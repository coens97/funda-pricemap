{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar R_EARTH = 6378000;\n/**\n * Calculate density grid from an array of points\n * @param {array} points\n * @param {number} cellSize - cell size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid data, cell dimension\n */\n\nexport function pointToDensityGridData(points, cellSize, getPosition) {\n  var _pointsToGridHashing2 = _pointsToGridHashing(points, cellSize, getPosition),\n      gridHash = _pointsToGridHashing2.gridHash,\n      gridOffset = _pointsToGridHashing2.gridOffset;\n\n  var layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset);\n\n  return {\n    gridOffset: gridOffset,\n    layerData: layerData\n  };\n}\n/**\n * Project points into each cell, return a hash table of cells\n * @param {array} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n\nfunction _pointsToGridHashing() {\n  var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var cellSize = arguments[1];\n  var getPosition = arguments[2]; // find the geometric center of sample points\n\n  var latMin = Infinity;\n  var latMax = -Infinity;\n  var pLat = void 0;\n\n  for (var p = 0; p < points.length; p++) {\n    pLat = getPosition(points[p])[1];\n\n    if (Number.isFinite(pLat)) {\n      latMin = pLat < latMin ? pLat : latMin;\n      latMax = pLat > latMax ? pLat : latMax;\n    }\n  }\n\n  var centerLat = (latMin + latMax) / 2;\n\n  var gridOffset = _calculateGridLatLonOffset(cellSize, centerLat);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {\n      gridHash: {},\n      gridOffset: gridOffset\n    };\n  } // calculate count per cell\n\n\n  var gridHash = points.reduce(function (accu, pt) {\n    var lat = getPosition(pt)[1];\n    var lng = getPosition(pt)[0];\n\n    if (!Number.isFinite(lat) || !Number.isFinite(lng)) {\n      return accu;\n    }\n\n    var latIdx = Math.floor((lat + 90) / gridOffset.yOffset);\n    var lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);\n    var key = latIdx + '-' + lonIdx;\n    accu[key] = accu[key] || {\n      count: 0,\n      points: []\n    };\n    accu[key].count += 1;\n    accu[key].points.push(pt);\n    return accu;\n  }, {});\n  return {\n    gridHash: gridHash,\n    gridOffset: gridOffset\n  };\n}\n\nfunction _getGridLayerDataFromGridHash(gridHash, gridOffset) {\n  return Object.keys(gridHash).reduce(function (accu, key, i) {\n    var idxs = key.split('-');\n    var latIdx = parseInt(idxs[0], 10);\n    var lonIdx = parseInt(idxs[1], 10);\n    accu.push(Object.assign({\n      index: i,\n      position: [-180 + gridOffset.xOffset * lonIdx, -90 + gridOffset.yOffset * latIdx]\n    }, gridHash[key]));\n    return accu;\n  }, []);\n}\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\n\n\nfunction _calculateGridLatLonOffset(cellSize, latitude) {\n  var yOffset = _calculateLatOffset(cellSize);\n\n  var xOffset = _calculateLonOffset(latitude, cellSize);\n\n  return {\n    yOffset: yOffset,\n    xOffset: xOffset\n  };\n}\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\n\n\nfunction _calculateLatOffset(dy) {\n  return dy / R_EARTH * (180 / Math.PI);\n}\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\n\n\nfunction _calculateLonOffset(lat, dx) {\n  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);\n}","map":null,"metadata":{},"sourceType":"module"}