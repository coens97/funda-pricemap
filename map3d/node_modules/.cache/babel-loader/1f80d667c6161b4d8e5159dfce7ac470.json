{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.installParameterDefinitions = installParameterDefinitions;\nexports.TEXTURE_PARAMETERS = exports.SAMPLER_PARAMETERS = exports.RENDERBUFFER_PARAMETERS = exports.PROGRAM_PARAMETERS = exports.FRAMEBUFFER_STATUS = exports.FRAMEBUFFER_ATTACHMENT_PARAMETERS = exports.FENCE_SYNC_PARAMETERS = exports.BUFFER_PARAMETERS = exports.GLboolean = exports.GLuint = exports.GLint = exports.GLfloat = exports.GLenum = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _BUFFER_PARAMETERS, _FRAMEBUFFER_STATUS, _PROGRAM_PARAMETERS, _RENDERBUFFER_PARAMET, _SAMPLER_PARAMETERS, _TEXTURE_PARAMETERS; // Parameter support.\n// Installs definitions that enable querying an object for all its parameters\n// with resource.getParameters(). This is mainly useful during debugging.\n// Note: Kept separate to avoid bundling in production applications\n// WebGL specification 'types'\n\n\nvar GLenum = 'GLenum';\nexports.GLenum = GLenum;\nvar GLfloat = 'GLfloat';\nexports.GLfloat = GLfloat;\nvar GLint = 'GLint';\nexports.GLint = GLint;\nvar GLuint = 'GLint';\nexports.GLuint = GLuint;\nvar GLboolean = 'GLboolean';\n/*\n TODO - will most likely remove some of these fields from the main struct\n but they can be useful for debugging/seer integration, so keep them here for now\nexport const DBG_PARAMETERS = {\n  blend: {\n    type: GLboolean,\n    params: GL.BLEND,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)\n  },\n\n  blendColor: {\n    type: new Float32Array(4),\n    value: new Float32Array([0, 0, 0, 0]),\n    params: GL.BLEND_COLOR,\n    setter: (gl, value) => gl.blendColor(...value)\n  },\n\n  blendEquation: {\n    type: [GLenum, GLenum],\n    object: ['rgb', 'alpha'],\n    alias: 'blendEquationSeparate',\n    value: [GL.FUNC_ADD, GL.FUNC_ADD],\n    params: [GL.BLEND_EQUATION_RGB, GL.BLEND_EQUATION_ALPHA],\n    setter: (gl, value) => gl.blendEquationSeparate(...value),\n    normalizeArgs: args => isArray(args) ? args : [args, args]\n  },\n\n  // blend func\n  blendFunc: {\n    type: [GLenum, GLenum, GLenum, GLenum],\n    object: ['srcRgb', 'dstRgb', 'srcAlpha', 'dstAlpha'],\n    value: [GL.ONE, GL.ZERO, GL.ONE, GL.ZERO],\n    params: [GL.BLEND_SRC_RGB, GL.BLEND_DST_RGB, GL.BLEND_SRC_ALPHA, GL.BLEND_DST_ALPHA],\n    setter: (gl, value) => gl.blendFuncSeparate(...value),\n    normalizeArgs: args => isArray(args) && args.length === 3 ? [...args, ...args] : args\n  },\n\n  clearColor: {\n    type: new Float32Array(4),\n    params: GL.COLOR_CLEAR_VALUE,\n    value: new Float32Array([0, 0, 0, 0]), // TBD\n    setter: (gl, value) => gl.clearColor(...value)\n  },\n\n  colorMask: {\n    type: [GLboolean, GLboolean, GLboolean, GLboolean],\n    params: GL.COLOR_WRITEMASK,\n    value: [true, true, true, true],\n    setter: (gl, value) => gl.colorMask(...value)\n  },\n\n  // TODO - We have a name clash here\n  cullFace: {\n    type: GLboolean,\n    params: GL.CULL_FACE,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)\n  },\n\n  cullFaceMode: {\n    type: GLenum,\n    params: GL.CULL_FACE_MODE,\n    value: GL.BACK,\n    setter: (gl, value) => gl.cullFace(value)\n  },\n\n  depthTest: {\n    type: GLboolean,\n    params: GL.DEPTH_TEST,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)\n  },\n\n  depthClearValue: {\n    type: GLfloat,\n    params: GL.DEPTH_CLEAR_VALUE,\n    value: 1,\n    setter: (gl, value) => gl.clearDepth(value)\n  },\n\n  depthFunc: {\n    type: GLenum,\n    params: GL.DEPTH_FUNC,\n    value: GL.LESS,\n    setter: (gl, value) => gl.depthFunc(value)\n  },\n\n  depthRange: {\n    type: new Float32Array(2),\n    object: ['min', 'max'],\n    params: GL.DEPTH_RANGE,\n    value: new Float32Array([0, 1]), // TBD\n    setter: (gl, value) => gl.depthRange(...value)\n  },\n\n  depthWritemask: {\n    type: GLboolean,\n    params: GL.DEPTH_WRITEMASK,\n    value: true,\n    setter: (gl, value) => gl.depthMask(value)\n  },\n\n  dither: {\n    type: GLboolean,\n    params: GL.DITHER,\n    value: true,\n    setter: (gl, value) => value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)\n  },\n\n  fragmentShaderDerivativeHint: {\n    type: GLenum,\n    params: GL.FRAGMENT_SHADER_DERIVATIVE_HINT,\n    value: GL.DONT_CARE,\n    setter: (gl, value) => gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value),\n    gl1: 'OES_standard_derivatives'\n  },\n\n  frontFace: {\n    type: GLenum,\n    params: GL.FRONT_FACE,\n    value: GL.CCW,\n    setter: (gl, value) => gl.frontFace(value)\n  },\n\n  // Hint for quality of images generated with glGenerateMipmap\n  generateMipmapHint: {\n    type: GLenum,\n    params: GL.GENERATE_MIPMAP_HINT,\n    value: GL.DONT_CARE,\n    setter: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value)\n  },\n\n  lineWidth: {\n    type: GLfloat,\n    params: GL.LINE_WIDTH,\n    value: 1,\n    setter: (gl, value) => gl.lineWidth(value)\n  },\n\n  polygonOffsetFill: {\n    type: GLboolean,\n    params: GL.POLYGON_OFFSET_FILL,\n    value: false,\n    setter: (gl, value) =>\n      value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL)\n  },\n\n  // Add small offset to fragment depth values (by factor × DZ + r × units)\n  // Useful for rendering hidden-line images, for applying decals to surfaces,\n  // and for rendering solids with highlighted edges.\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml\n  polygonOffset: {\n    type: [GLfloat, GLfloat],\n    object: ['factor', 'units'],\n    params: [GL.POLYGON_OFFSET_FACTOR, GL.POLYGON_OFFSET_UNITS],\n    value: [0, 0],\n    setter: (gl, value) => gl.polygonOffset(...value)\n  },\n\n  // TODO - enabling multisampling\n  // glIsEnabled with argument GL_SAMPLE_ALPHA_TO_COVERAGE\n  // glIsEnabled with argument GL_SAMPLE_COVERAGE\n\n  // specify multisample coverage parameters\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glSampleCoverage.xml\n  sampleCoverage: {\n    type: [GLfloat, GLboolean],\n    object: ['value', 'invert'],\n    params: [GL.SAMPLE_COVERAGE_VALUE, GL.SAMPLE_COVERAGE_INVERT],\n    value: [1.0, false],\n    setter: (gl, value) => gl.sampleCoverage(...value)\n  },\n\n  scissorTest: {\n    type: GLboolean,\n    params: GL.SCISSOR_TEST,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)\n  },\n\n  scissorBox: {\n    type: new Int32Array(4),\n    object: ['x', 'y', 'width', 'height'],\n    // When scissor test enabled we expect users to set correct scissor box,\n    // otherwise we default to following value array.\n    params: GL.SCISSOR_BOX,\n    value: new Int32Array([0, 0, 1024, 1024]),\n    setter: (gl, value) => gl.scissor(...value)\n  },\n\n  stencilTest: {\n    type: GLboolean,\n    params: GL.STENCIL_TEST,\n    value: false,\n    setter: (gl, value) => value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)\n  },\n\n  // Sets index used when stencil buffer is cleared.\n  stencilClearValue: {\n    type: GLint,\n    params: GL.STENCIL_CLEAR_VALUE,\n    value: 0,\n    setter: (gl, value) => gl.clearStencil(value)\n  },\n\n  // Sets bit mask enabling writing of individual bits in the stencil planes\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml\n  stencilMask: {\n    type: [GLuint, GLuint],\n    object: ['mask', 'backMask'],\n    value: [0xFFFFFFFF, 0xFFFFFFFF],\n    params: [GL.STENCIL_WRITEMASK, GL.STENCIL_BACK_WRITEMASK],\n    setter: (gl, value) => {\n      value = isArray(value) ? value : [value, value];\n      const [mask, backMask] = value;\n      gl.stencilMaskSeparate(GL.FRONT, mask);\n      gl.stencilMaskSeparate(GL.BACK, backMask);\n    }\n  },\n\n  // Set stencil testing function, reference value and mask for front and back\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml\n  stencilFunc: {\n    type: [GLenum, GLint, GLuint, GLenum, GLint, GLuint],\n    object: [\n      'func', 'ref', 'valueMask', 'backFunc', 'backRef', 'backValueMask'\n    ],\n    value: [GL.ALWAYS, 0, 0xFFFFFFFF, GL.ALWAYS, 0, 0xFFFFFFFF],\n    params: [\n      // front\n      GL.STENCIL_FUNC,\n      GL.STENCIL_REF,\n      GL.STENCIL_VALUE_MASK,\n      // back\n      GL.STENCIL_BACK_FUNC,\n      GL.STENCIL_BACK_REF,\n      GL.STENCIL_BACK_VALUE_MASK\n    ],\n    setter: (gl, value) => {\n      const [func, ref, mask, backFunc, backRef, backMask] = value;\n      gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n      gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n    }\n  },\n\n  // Specifies the action to take when the stencil test fails, front and back.\n  // Stencil test fail action, depth test fail action, pass action\n  // GL.KEEP, GL.ZERO, GL.REPLACE, GL.INCR, GL.INCR_WRAP, GL.DECR, GL.DECR_WRAP,\n  // and GL.INVERT\n  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml\n  stencilOp: {\n    type: [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum],\n    object: [\n      'fail', 'passDepthFail', 'passDepthPass',\n      'backFail', 'backPassDepthFail', 'backPassDepthPass'\n    ],\n    params: [\n      // front\n      GL.STENCIL_FAIL,\n      GL.STENCIL_PASS_DEPTH_FAIL,\n      GL.STENCIL_PASS_DEPTH_PASS,\n      // back\n      GL.STENCIL_BACK_FAIL,\n      GL.STENCIL_BACK_PASS_DEPTH_FAIL,\n      GL.STENCIL_BACK_PASS_DEPTH_PASS\n    ],\n    value: [GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP],\n    setter: (gl, value) => {\n      const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = value;\n      gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n      gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n    }\n  },\n\n  viewport: {\n    type: new Int32Array(4),\n    object: ['x', 'y', 'width', 'height'],\n    // We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n    params: GL.VIEWPORT,\n    value: new Int32Array([0, 0, 1024, 1024]),\n    setter: (gl, value) => gl.viewport(...value)\n  },\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n\n  // Packing of pixel data in memory (1,2,4,8)\n  [GL.PACK_ALIGNMENT]: {\n    type: GLint,\n    params: GL.PACK_ALIGNMENT,\n    value: 4,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_ALIGNMENT, value)\n  },\n  // Unpacking pixel data from memory(1,2,4,8)\n  [GL.UNPACK_ALIGNMENT]: {\n    type: GLint,\n    params: GL.UNPACK_ALIGNMENT,\n    value: 4,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ALIGNMENT, value)\n  },\n  // Flip source data along its vertical axis\n  [GL.UNPACK_FLIP_Y_WEBGL]: {\n    type: GLboolean,\n    params: GL.UNPACK_FLIP_Y_WEBGL,\n    value: false,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, value)\n  },\n  // Multiplies the alpha channel into the other color channels\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: {\n    type: GLboolean,\n    params: GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n    value: false,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, value)\n  },\n  // Default color space conversion or no color space conversion.\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: {\n    type: GLenum,\n    params: GL.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n    value: GL.BROWSER_DEFAULT_WEBGL,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, value)\n  },\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n\n  // Number of pixels in a row.\n  [GL.PACK_ROW_LENGTH]: {\n    type: GLint,\n    params: GL.PACK_ROW_LENGTH,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_ROW_LENGTH, value),\n    webgl2: true\n  },\n  // Number of pixels skipped before the first pixel is written into memory.\n  [GL.PACK_SKIP_PIXELS]: {\n    type: GLint,\n    params: GL.PACK_SKIP_PIXELS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_PIXELS, value),\n    webgl2: true\n  },\n  // Number of rows of pixels skipped before first pixel is written to memory.\n  [GL.PACK_SKIP_ROWS]: {\n    type: GLint,\n    params: GL.PACK_SKIP_ROWS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_ROWS, value),\n    webgl2: true\n  },\n  // Number of pixels in a row.\n  [GL.UNPACK_ROW_LENGTH]: {\n    type: GLint,\n    params: GL.UNPACK_ROW_LENGTH,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ROW_LENGTH, value),\n    webgl2: true\n  },\n  // Image height used for reading pixel data from memory\n  [GL.UNPACK_IMAGE_HEIGHT]: {\n    type: GLint,\n    params: GL.UNPACK_IMAGE_HEIGHT,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_IMAGE_HEIGHT, value),\n    webgl2: true\n  },\n  // Number of pixel images skipped before first pixel is read from memory\n  [GL.UNPACK_SKIP_PIXELS]: {\n    type: GLint,\n    params: GL.UNPACK_SKIP_PIXELS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_PIXELS, value),\n    webgl2: true\n  },\n  // Number of rows of pixels skipped before first pixel is read from memory\n  [GL.UNPACK_SKIP_ROWS]: {\n    type: GLint,\n    params: GL.UNPACK_SKIP_ROWS,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_ROWS, value),\n    webgl2: true\n  },\n  // Number of pixel images skipped before first pixel is read from memory\n  [GL.UNPACK_SKIP_IMAGES]: {\n    type: GLint,\n    params: GL.UNPACK_SKIP_IMAGES,\n    value: 0,\n    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_IMAGES, value),\n    webgl2: true\n  }\n};\n*/\n\nexports.GLboolean = GLboolean;\nvar BUFFER_PARAMETERS = (_BUFFER_PARAMETERS = {}, (0, _defineProperty2.default)(_BUFFER_PARAMETERS, 34660, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_BUFFER_PARAMETERS, 34661, {\n  webgl1: 0 // GLenum indicating the usage pattern of the buffer.\n\n}), _BUFFER_PARAMETERS);\nexports.BUFFER_PARAMETERS = BUFFER_PARAMETERS;\nvar FENCE_SYNC_PARAMETERS = [37138, // GLenum, type of sync object (always GL.SYNC_FENCE).\n37140, // GLenum, status of sync object (GL.SIGNALED/GL.UNSIGNALED)\n37139, // GLenum. object condition (always GL.SYNC_GPU_COMMANDS_COMPLETE).\n37141 // GLenum, flags sync object was created with (always 0)\n];\nexports.FENCE_SYNC_PARAMETERS = FENCE_SYNC_PARAMETERS;\nvar FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, // WebGLRenderbuffer or WebGLTexture\n36048, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n36051, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n36050, // GLint\n// EXT_sRGB or WebGL2\n33296, // GL.LINEAR, GL.SRBG\n// WebGL2\n36052, // GLint\n33298, // GLint\n33299, // GLint\n33300, // GLint\n33301, // GLint\n33302, // GLint\n33303, // GLint\n33297 // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\nexports.FRAMEBUFFER_ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\nvar FRAMEBUFFER_STATUS = (_FRAMEBUFFER_STATUS = {}, (0, _defineProperty2.default)(_FRAMEBUFFER_STATUS, 36053, 'Success. Framebuffer is correctly set up'), (0, _defineProperty2.default)(_FRAMEBUFFER_STATUS, 36054, 'Framebuffer attachment types mismatched or some attachment point not attachment complete'), (0, _defineProperty2.default)(_FRAMEBUFFER_STATUS, 36055, 'Framebuffer has no attachment'), (0, _defineProperty2.default)(_FRAMEBUFFER_STATUS, 36057, 'Framebuffer attachments do not have the same size'), (0, _defineProperty2.default)(_FRAMEBUFFER_STATUS, 36061, 'Framebuffer attachment format not supported or depth and stencil attachments are not same'), (0, _defineProperty2.default)(_FRAMEBUFFER_STATUS, 36182, 'Framebuffer attachement SAMPLES differs among renderbuffers, or are mixed with textures'), _FRAMEBUFFER_STATUS);\nexports.FRAMEBUFFER_STATUS = FRAMEBUFFER_STATUS;\nvar PROGRAM_PARAMETERS = (_PROGRAM_PARAMETERS = {}, (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35712, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35714, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35715, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35717, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35721, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35718, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35967, {\n  webgl2: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35971, {\n  webgl2: 0\n}), (0, _defineProperty2.default)(_PROGRAM_PARAMETERS, 35382, {\n  webgl2: 0 // GLint\n\n}), _PROGRAM_PARAMETERS); //  parameters\n\nexports.PROGRAM_PARAMETERS = PROGRAM_PARAMETERS;\nvar RENDERBUFFER_PARAMETERS = (_RENDERBUFFER_PARAMET = {}, (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36162, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36163, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36164, {\n  type: 'GLenum',\n  webgl1: 32854\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36177, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36178, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36176, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36179, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36180, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36181, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_RENDERBUFFER_PARAMET, 36011, {\n  webgl2: 1\n}), _RENDERBUFFER_PARAMET);\nexports.RENDERBUFFER_PARAMETERS = RENDERBUFFER_PARAMETERS;\nvar SAMPLER_PARAMETERS = (_SAMPLER_PARAMETERS = {}, (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 10240, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 10241, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 10242, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 10243, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 32882, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 33084, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 33085, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 34893, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 34892, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 33082, {\n  webgl2: true\n}), (0, _defineProperty2.default)(_SAMPLER_PARAMETERS, 33083, {\n  webgl2: true // maximum level-of-detail value\n  // [GL.TEXTURE_MAX_ANISOTROPY_EXT]: {webgl2: 'EXT_texture_filter_anisotropic'}\n\n}), _SAMPLER_PARAMETERS); // const SHADER_PARAMETERS = [\n//   GL.DELETE_STATUS, // GLboolean - whether shader is flagged for deletion.\n//   GL.COMPILE_STATUS, // GLboolean - was last shader compilation successful.\n//   GL.SHADER_TYPE // GLenum - GL.VERTEX_SHADER or GL.FRAGMENT_SHADER.\n// ];\n\nexports.SAMPLER_PARAMETERS = SAMPLER_PARAMETERS;\nvar TEXTURE_PARAMETERS = (_TEXTURE_PARAMETERS = {}, (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 10240, {\n  type: 'GLenum',\n  webgl1: 9729\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 10241, {\n  type: 'GLenum',\n  webgl1: 9986\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 10242, {\n  type: 'GLenum',\n  webgl1: 10497\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 10243, {\n  type: 'GLenum',\n  webgl1: 10497\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 32882, {\n  type: 'GLenum',\n  webgl2: 10497\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 33084, {\n  webgl2: 0\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 33085, {\n  webgl2: 1000\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 34893, {\n  type: 'GLenum',\n  webgl2: 515\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 34892, {\n  type: 'GLenum',\n  webgl2: 0\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 33082, {\n  webgl2: -1000\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 33083, {\n  webgl2: 1000\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 4096, {\n  webgl1: 0\n}), (0, _defineProperty2.default)(_TEXTURE_PARAMETERS, 4097, {\n  webgl1: 0\n}), _TEXTURE_PARAMETERS); // TODO - separate install parameter definitions function from api metadata\n\n/*\nimport Buffer from '../buffer';\nimport FenceSync from '../fence-sync';\nimport Framebuffer from '../framebuffer';\nimport Program from '../program';\nimport Renderbuffer from '../renderbuffer';\nimport Sampler from '../sampler';\n// import Shader from './shader';\nimport Texture from '../texture';\n*/\n\nexports.TEXTURE_PARAMETERS = TEXTURE_PARAMETERS;\n\nfunction installParameterDefinitions() {// Buffer.PARAMETERS = BUFFER_PARAMETERS;\n  // FenceSync.PARAMETERS = FENCE_SYNC_PARAMETERS;\n  // Framebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n  // Framebuffer.STATUS = FRAMEBUFFER_STATUS;\n  // Program.PARAMETERS = PROGRAM_PARAMETERS;\n  // Renderbuffer.PARAMETERS = RENDERBUFFER_PARAMETERS;\n  // Sampler.PARAMETERS = SAMPLER_PARAMETERS;\n  // // Shader.PARAMETERS = SHADER_PARAMETERS;\n  // Texture.PARAMETERS = TEXTURE_PARAMETERS;\n}","map":null,"metadata":{},"sourceType":"script"}