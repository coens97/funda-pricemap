{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { CompositeLayer, get } from '../../../lib';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer'; // Use primitive layer to avoid \"Composite Composite\" layers for now\n\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nvar defaultLineColor = [0x0, 0x0, 0x0, 0xFF];\nvar defaultFillColor = [0x0, 0x0, 0x0, 0xFF];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  elevationScale: 1,\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0,\n  //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  // max point radius in pixels\n  fp64: false,\n  // Line and polygon outline color\n  getLineColor: function getLineColor(f) {\n    return get(f, 'properties.lineColor') || defaultLineColor;\n  },\n  // Point and polygon fill color\n  getFillColor: function getFillColor(f) {\n    return get(f, 'properties.fillColor') || defaultFillColor;\n  },\n  // Point radius\n  getRadius: function getRadius(f) {\n    return get(f, 'properties.radius') || get(f, 'properties.size') || 1;\n  },\n  // Line and polygon outline accessors\n  getLineWidth: function getLineWidth(f) {\n    return get(f, 'properties.lineWidth') || 1;\n  },\n  // Polygon extrusion accessor\n  getElevation: function getElevation(f) {\n    return get(f, 'properties.elevation') || 1000;\n  },\n  // Optional settings for 'lighting' shader module\n  lightSettings: {\n    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],\n    ambientRatio: 0.05,\n    diffuseRatio: 0.6,\n    specularRatio: 0.8,\n    lightsStrength: [2.0, 0.0, 0.0, 0.0],\n    numberOfLights: 2\n  }\n};\n\nvar getCoordinates = function getCoordinates(f) {\n  return get(f, 'geometry.coordinates');\n};\n\nvar GeoJsonLayer = function (_CompositeLayer) {\n  _inherits(GeoJsonLayer, _CompositeLayer);\n\n  function GeoJsonLayer() {\n    _classCallCheck(this, GeoJsonLayer);\n\n    return _possibleConstructorReturn(this, (GeoJsonLayer.__proto__ || Object.getPrototypeOf(GeoJsonLayer)).apply(this, arguments));\n  }\n\n  _createClass(GeoJsonLayer, [{\n    key: 'initializeState',\n    value: function initializeState() {\n      this.state = {\n        features: {}\n      };\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged) {\n        var data = this.props.data;\n        var features = getGeojsonFeatures(data);\n        this.state.features = separateGeojsonFeatures(features);\n      }\n    }\n  }, {\n    key: 'getPickingInfo',\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      return Object.assign(info, {\n        // override object with picked feature\n        object: info.object && info.object.feature || info.object\n      });\n    }\n  }, {\n    key: 'renderLayers',\n    value: function renderLayers() {\n      var features = this.state.features;\n      var pointFeatures = features.pointFeatures,\n          lineFeatures = features.lineFeatures,\n          polygonFeatures = features.polygonFeatures,\n          polygonOutlineFeatures = features.polygonOutlineFeatures; // Layer composition props\n\n      var _props = this.props,\n          id = _props.id,\n          stroked = _props.stroked,\n          filled = _props.filled,\n          extruded = _props.extruded,\n          wireframe = _props.wireframe,\n          lightSettings = _props.lightSettings; // Rendering props underlying layer\n\n      var _props2 = this.props,\n          lineWidthScale = _props2.lineWidthScale,\n          lineWidthMinPixels = _props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _props2.lineWidthMaxPixels,\n          lineJointRounded = _props2.lineJointRounded,\n          lineMiterLimit = _props2.lineMiterLimit,\n          pointRadiusScale = _props2.pointRadiusScale,\n          pointRadiusMinPixels = _props2.pointRadiusMinPixels,\n          pointRadiusMaxPixels = _props2.pointRadiusMaxPixels,\n          elevationScale = _props2.elevationScale,\n          fp64 = _props2.fp64; // Accessor props for underlying layers\n\n      var _props3 = this.props,\n          getLineColor = _props3.getLineColor,\n          getFillColor = _props3.getFillColor,\n          getRadius = _props3.getRadius,\n          getLineWidth = _props3.getLineWidth,\n          getElevation = _props3.getElevation,\n          updateTriggers = _props3.updateTriggers;\n      var drawPoints = pointFeatures && pointFeatures.length > 0;\n      var drawLines = lineFeatures && lineFeatures.length > 0;\n      var hasPolygonLines = polygonOutlineFeatures && polygonOutlineFeatures.length > 0;\n      var hasPolygon = polygonFeatures && polygonFeatures.length > 0; // base layer props\n\n      var _props4 = this.props,\n          opacity = _props4.opacity,\n          pickable = _props4.pickable,\n          visible = _props4.visible,\n          parameters = _props4.parameters,\n          getPolygonOffset = _props4.getPolygonOffset; // viewport props\n\n      var _props5 = this.props,\n          positionOrigin = _props5.positionOrigin,\n          projectionMode = _props5.projectionMode,\n          modelMatrix = _props5.modelMatrix;\n      var forwardProps = {\n        // Forward layer props\n        opacity: opacity,\n        pickable: pickable,\n        visible: visible,\n        parameters: parameters,\n        getPolygonOffset: getPolygonOffset,\n        // Forward viewport props\n        projectionMode: projectionMode,\n        positionOrigin: positionOrigin,\n        modelMatrix: modelMatrix,\n        // Forward common props\n        fp64: fp64\n      }; // Filled Polygon Layer\n\n      var polygonFillLayer = filled && hasPolygon && new SolidPolygonLayer(Object.assign({}, forwardProps, {\n        id: id + '-polygon-fill',\n        data: polygonFeatures,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        wireframe: false,\n        lightSettings: lightSettings,\n        getPolygon: getCoordinates,\n        getElevation: getElevation,\n        getColor: getFillColor,\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getColor: updateTriggers.getFillColor\n        }\n      }));\n      var polygonWireframeLayer = wireframe && extruded && hasPolygon && new SolidPolygonLayer(Object.assign({}, forwardProps, {\n        id: id + '-polygon-wireframe',\n        data: polygonFeatures,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        wireframe: true,\n        getPolygon: getCoordinates,\n        getElevation: getElevation,\n        getColor: getLineColor,\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getColor: updateTriggers.getLineColor\n        }\n      }));\n      var polygonLineLayer = !extruded && stroked && hasPolygonLines && new PathLayer(Object.assign({}, forwardProps, {\n        id: id + '-polygon-outline',\n        data: polygonOutlineFeatures,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        getPath: getCoordinates,\n        getColor: getLineColor,\n        getWidth: getLineWidth,\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth\n        }\n      }));\n      var pathLayer = drawLines && new PathLayer(Object.assign({}, forwardProps, {\n        id: id + '-line-paths',\n        data: lineFeatures,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        getPath: getCoordinates,\n        getColor: getLineColor,\n        getWidth: getLineWidth,\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth\n        }\n      }));\n      var pointLayer = drawPoints && new ScatterplotLayer(Object.assign({}, forwardProps, {\n        id: id + '-points',\n        data: pointFeatures,\n        radiusScale: pointRadiusScale,\n        radiusMinPixels: pointRadiusMinPixels,\n        radiusMaxPixels: pointRadiusMaxPixels,\n        getPosition: getCoordinates,\n        getColor: getFillColor,\n        getRadius: getRadius,\n        updateTriggers: {\n          getColor: updateTriggers.getFillColor,\n          getRadius: updateTriggers.getRadius\n        }\n      }));\n      return [// If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer, polygonWireframeLayer, polygonLineLayer, pathLayer, pointLayer, // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer];\n    }\n  }]);\n\n  return GeoJsonLayer;\n}(CompositeLayer);\n\nexport default GeoJsonLayer;\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}