{"ast":null,"code":"import isImmutableMap from \"./is-immutable-map\";\nimport diffStyles from \"./diff-styles\";\nexport function getInteractiveLayerIds(mapStyle) {\n  var interactiveLayerIds = null;\n  return isImmutableMap(mapStyle) && mapStyle.has(\"layers\") ? interactiveLayerIds = mapStyle.get(\"layers\").filter(function (l) {\n    return l.get(\"interactive\");\n  }).map(function (l) {\n    return l.get(\"id\");\n  }).toJS() : Array.isArray(mapStyle.layers) && (interactiveLayerIds = mapStyle.layers.filter(function (l) {\n    return l.interactive;\n  }).map(function (l) {\n    return l.id;\n  })), interactiveLayerIds;\n}\nexport function setDiffStyle(prevStyle, nextStyle, map) {\n  function styleKeysMap(style) {\n    return style.map(function () {\n      return !0;\n    }).delete(\"layers\").delete(\"sources\").toJS();\n  }\n\n  var prevKeysMap = prevStyle && styleKeysMap(prevStyle) || {},\n      nextKeysMap = styleKeysMap(nextStyle);\n  if (!prevStyle || function () {\n    var prevKeysList = Object.keys(prevKeysMap),\n        nextKeysList = Object.keys(nextKeysMap);\n    return prevKeysList.length !== nextKeysList.length || !!nextKeysList.some(function (key) {\n      return prevStyle.get(key) !== nextStyle.get(key);\n    });\n  }()) return void map.setStyle(nextStyle.toJS());\n\n  var _diffStyles = diffStyles(prevStyle, nextStyle),\n      sourcesDiff = _diffStyles.sourcesDiff,\n      layersDiff = _diffStyles.layersDiff;\n\n  checkForEqualLayerSourceChanges(sourcesDiff.exit, nextStyle.get(\"layers\")), applySourceLayerChanges(map, nextStyle, sourcesDiff, layersDiff);\n}\n\nfunction updateStyleSource(map, update) {\n  var newSource = update.source.toJS();\n\n  if (\"geojson\" === newSource.type) {\n    var oldSource = map.getSource(update.id);\n\n    if (\"geojson\" === oldSource.type) {\n      var oldOpts = oldSource.workerOptions,\n          scale = oldOpts.geojsonVtOptions.extent / 512;\n      if ((void 0 === newSource.maxzoom || newSource.maxzoom === oldOpts.geojsonVtOptions.maxZoom) && (void 0 === newSource.buffer || newSource.buffer === oldOpts.geojsonVtOptions.buffer / scale) && (void 0 === newSource.tolerance || newSource.tolerance === oldOpts.geojsonVtOptions.tolerance / scale) && (void 0 === newSource.cluster || newSource.cluster === oldOpts.cluster) && (void 0 === newSource.clusterRadius || newSource.clusterRadius === oldOpts.superclusterOptions.radius / scale) && (void 0 === newSource.clusterMaxZoom || newSource.clusterMaxZoom === oldOpts.superclusterOptions.maxZoom)) return void oldSource.setData(newSource.data);\n    }\n  }\n\n  map.removeSource(update.id), map.addSource(update.id, newSource);\n}\n\nfunction applySourceLayerChanges(map, nextStyle, sourcesDiff, layersDiff) {\n  if (layersDiff.updates.some(function (node) {\n    return node.layer.get(\"ref\");\n  })) return void map.setStyle(nextStyle.toJS());\n\n  var _iteratorNormalCompletion = !0,\n      _didIteratorError = !1,\n      _iteratorError = void 0;\n\n  try {\n    for (var _step, enter, _iterator = sourcesDiff.enter[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {\n      enter = _step.value, map.addSource(enter.id, enter.source.toJS());\n    }\n  } catch (err) {\n    _didIteratorError = !0, _iteratorError = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion || null == _iterator.return || _iterator.return();\n    } finally {\n      if (_didIteratorError) throw _iteratorError;\n    }\n  }\n\n  var _iteratorNormalCompletion2 = !0,\n      _didIteratorError2 = !1,\n      _iteratorError2 = void 0;\n\n  try {\n    for (var _step2, update, _iterator2 = sourcesDiff.update[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {\n      update = _step2.value, updateStyleSource(map, update);\n    }\n  } catch (err) {\n    _didIteratorError2 = !0, _iteratorError2 = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();\n    } finally {\n      if (_didIteratorError2) throw _iteratorError2;\n    }\n  }\n\n  var _iteratorNormalCompletion3 = !0,\n      _didIteratorError3 = !1,\n      _iteratorError3 = void 0;\n\n  try {\n    for (var _step3, exit, _iterator3 = layersDiff.exiting[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = !0) {\n      exit = _step3.value, map.style.getLayer(exit.id) && map.removeLayer(exit.id);\n    }\n  } catch (err) {\n    _didIteratorError3 = !0, _iteratorError3 = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion3 || null == _iterator3.return || _iterator3.return();\n    } finally {\n      if (_didIteratorError3) throw _iteratorError3;\n    }\n  }\n\n  var _iteratorNormalCompletion4 = !0,\n      _didIteratorError4 = !1,\n      _iteratorError4 = void 0;\n\n  try {\n    for (var _step4, _update, _iterator4 = layersDiff.updates[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = !0) {\n      _update = _step4.value, _update.enter || map.removeLayer(_update.id), map.addLayer(_update.layer.toJS(), _update.before);\n    }\n  } catch (err) {\n    _didIteratorError4 = !0, _iteratorError4 = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion4 || null == _iterator4.return || _iterator4.return();\n    } finally {\n      if (_didIteratorError4) throw _iteratorError4;\n    }\n  }\n\n  var _iteratorNormalCompletion5 = !0,\n      _didIteratorError5 = !1,\n      _iteratorError5 = void 0;\n\n  try {\n    for (var _step5, _exit, _iterator5 = sourcesDiff.exit[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = !0) {\n      _exit = _step5.value, map.removeSource(_exit.id);\n    }\n  } catch (err) {\n    _didIteratorError5 = !0, _iteratorError5 = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion5 || null == _iterator5.return || _iterator5.return();\n    } finally {\n      if (_didIteratorError5) throw _iteratorError5;\n    }\n  }\n}\n\nfunction checkForEqualLayerSourceChanges(sourceExit, nextLayers) {\n  var sourceIds = sourceExit.map(function (s) {\n    return s.id;\n  }),\n      layersNotRemoved = nextLayers.filter(function (lyr) {\n    return sourceIds.includes(lyr.get(\"source\"));\n  });\n  if (layersNotRemoved.size) throw new Error(\"You must remove any layers associated with sources you are removing: \".concat(layersNotRemoved.map(function (l) {\n    return l.get(\"id\");\n  }).toJS().join(\"\")));\n}","map":null,"metadata":{},"sourceType":"module"}