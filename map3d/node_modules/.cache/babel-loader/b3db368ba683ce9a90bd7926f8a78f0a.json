{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport seer from 'seer';\n/**\n * Recursively set a nested property of an object given a properties array and a value\n */\n\nvar recursiveSet = function recursiveSet(obj, path, value) {\n  if (!obj) {\n    return;\n  }\n\n  if (path.length > 1) {\n    recursiveSet(obj[path[0]], path.slice(1), value);\n  } else {\n    obj[path[0]] = value;\n  }\n};\n\nvar overrides = new Map();\n/**\n * Create an override on the specify layer, indexed by a valuePath array.\n * Do nothing in case Seer as not been initialized to prevent any preformance drawback.\n */\n\nexport var setPropOverrides = function setPropOverrides(id, valuePath, value) {\n  if (!seer.isReady()) {\n    return;\n  }\n\n  if (!overrides.has(id)) {\n    overrides.set(id, new Map());\n  }\n\n  var props = overrides.get(id);\n  props.set(valuePath, value);\n};\n/**\n * Get the props overrides of a specific layer if Seer as been initialized\n * Invalidates the data to be sure new ones are always picked up.\n */\n\nexport var applyPropOverrides = function applyPropOverrides(props) {\n  if (!seer.isReady() || !props.id) {\n    return;\n  }\n\n  var overs = overrides.get(props.id);\n\n  if (!overs) {\n    return;\n  }\n\n  overs.forEach(function (value, valuePath) {\n    recursiveSet(props, valuePath, value); // Invalidate data array if we have a data override\n\n    if (valuePath[0] === 'data') {\n      props.data = [].concat(_toConsumableArray(props.data));\n    }\n  });\n};\n/**\n * Listen for deck.gl edit events\n */\n\nexport var layerEditListener = function layerEditListener(cb) {\n  if (!seer.isReady()) {\n    return;\n  }\n\n  seer.listenFor('deck.gl', cb);\n};\n/**\n * Listen for seer init events to resend data\n */\n\nexport var seerInitListener = function seerInitListener(cb) {\n  if (!seer.isReady()) {\n    return;\n  }\n\n  seer.listenFor('init', cb);\n};\n/**\n * On finalyze of a specify layer, remove it from seer\n */\n\nexport var removeLayerInSeer = function removeLayerInSeer(id) {\n  if (!seer.isReady() || !id) {\n    return;\n  }\n\n  seer.deleteItem('deck.gl', id);\n};\nexport var logPayload = function logPayload(layer) {\n  var data = [{\n    path: 'objects.props',\n    data: layer.props\n  }];\n  var badges = [layer.constructor.layerName];\n\n  if (layer.state) {\n    if (layer.state.attributeManager) {\n      var attrs = layer.state.attributeManager.getAttributes();\n      data.push({\n        path: 'objects.attributes',\n        data: attrs\n      });\n      badges.push(layer.state.attributeManager.stats.getTimeString());\n    }\n\n    if (layer.state.model) {\n      layer.state.model.timerQueryEnabled = true;\n      var lastFrameTime = layer.state.model.stats.lastFrameTime;\n\n      if (lastFrameTime) {\n        badges.push((lastFrameTime * 1000).toFixed(0) + \"\\u03BCs\");\n      }\n    }\n  }\n\n  data.push({\n    path: 'badges',\n    data: badges\n  });\n  return data;\n};\nexport var initLayerInSeer = function initLayerInSeer(layer) {\n  if (!seer.isReady() || !layer) {\n    return;\n  }\n\n  var badges = [layer.constructor.layerName];\n  seer.listItem('deck.gl', layer.id, {\n    badges: badges,\n    links: layer.state && layer.state.model ? ['luma.gl:' + layer.state.model.id] : undefined,\n    parent: layer.parentLayer ? layer.parentLayer.id : undefined\n  });\n};\n/**\n * Log layer's properties to Seer\n */\n\nexport var updateLayerInSeer = function updateLayerInSeer(layer) {\n  if (!seer.isReady() || seer.throttle('deck.gl:' + layer.id, 1E3)) {\n    return;\n  }\n\n  var data = logPayload(layer);\n  seer.multiUpdate('deck.gl', layer.id, data);\n};","map":null,"metadata":{},"sourceType":"module"}