{"ast":null,"code":"/* eslint-disable */\n// TODO - generic draw call\n// One of the good things about GL is that there are so many ways to draw things\nimport GL, { glGet } from './gl-constants';\nimport { assertWebGLContext, assertWebGL2Context } from './context';\nimport { glContextWithState } from './context';\nimport assert from 'assert'; // A good thing about webGL is that there are so many ways to draw things,\n// e.g. depending on whether data is indexed and/or isInstanced.\n// This function unifies those into a single call with simple parameters\n// that have sane defaults.\n\nexport function draw(gl, _ref) {\n  var _ref$drawMode = _ref.drawMode,\n      drawMode = _ref$drawMode === undefined ? GL.TRIANGLES : _ref$drawMode,\n      vertexCount = _ref.vertexCount,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === undefined ? 0 : _ref$offset,\n      _ref$isIndexed = _ref.isIndexed,\n      isIndexed = _ref$isIndexed === undefined ? false : _ref$isIndexed,\n      _ref$indexType = _ref.indexType,\n      indexType = _ref$indexType === undefined ? GL.UNSIGNED_SHORT : _ref$indexType,\n      _ref$isInstanced = _ref.isInstanced,\n      isInstanced = _ref$isInstanced === undefined ? false : _ref$isInstanced,\n      _ref$instanceCount = _ref.instanceCount,\n      instanceCount = _ref$instanceCount === undefined ? 0 : _ref$instanceCount;\n  assertWebGLContext(gl);\n  var extension = gl.getExtension('ANGLE_instanced_arrays'); // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n\n  if (isInstanced) {\n    var webgl2 = isWebGL2(gl);\n\n    var _extension = gl.getExtension('ANGLE_instanced_arrays');\n\n    var context = webgl2 ? gl : _extension;\n    var suffix = webgl2 ? '' : 'ANGLE';\n    var drawElements = 'drawElementsInstanced' + suffix;\n    var drawArrays = 'drawArraysInstanced' + suffix;\n\n    if (isIndexed) {\n      context[drawElements](drawMode, vertexCount, indexType, offset, instanceCount);\n    } else {\n      context[drawArrays](drawMode, offset, vertexCount, instanceCount);\n    }\n  } else if (isIndexed) {\n    gl.drawElements(drawMode, vertexCount, indexType, offset);\n  } else {\n    gl.drawArrays(drawMode, offset, vertexCount);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}