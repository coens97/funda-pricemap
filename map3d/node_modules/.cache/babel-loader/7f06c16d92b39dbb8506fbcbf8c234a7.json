{"ast":null,"code":"// GL Constants\nvar GL_BYTE = 0x1400;\nvar GL_UNSIGNED_BYTE = 0x1401;\nvar GL_SHORT = 0x1402;\nvar GL_UNSIGNED_SHORT = 0x1403;\nvar GL_INT = 0x1404;\nvar GL_UNSIGNED_INT = 0x1405;\nvar GL_FLOAT = 0x1406;\nvar GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array'; // Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\n\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  var type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n\n  switch (type) {\n    case Float32Array:\n      return GL_FLOAT;\n\n    case Uint16Array:\n      return GL_UNSIGNED_SHORT;\n\n    case Uint32Array:\n      return GL_UNSIGNED_INT;\n\n    case Uint8Array:\n      return GL_UNSIGNED_BYTE;\n\n    case Uint8ClampedArray:\n      return GL_UNSIGNED_BYTE;\n\n    case Int8Array:\n      return GL_BYTE;\n\n    case Int16Array:\n      return GL_SHORT;\n\n    case Int32Array:\n      return GL_INT;\n\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n} // Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\n\nexport function getTypedArrayFromGLType(glType) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$clamped = _ref.clamped,\n      clamped = _ref$clamped === undefined ? true : _ref$clamped; // Sorted in some order of likelihood to reduce amount of comparisons\n\n\n  switch (glType) {\n    case GL_FLOAT:\n      return Float32Array;\n\n    case GL_UNSIGNED_SHORT:\n    case GL_UNSIGNED_SHORT_5_6_5:\n    case GL_UNSIGNED_SHORT_4_4_4_4:\n    case GL_UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n\n    case GL_UNSIGNED_INT:\n      return Uint32Array;\n\n    case GL_UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n\n    case GL_BYTE:\n      return Int8Array;\n\n    case GL_SHORT:\n      return Int16Array;\n\n    case GL_INT:\n      return Int32Array;\n\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */","map":null,"metadata":{},"sourceType":"module"}