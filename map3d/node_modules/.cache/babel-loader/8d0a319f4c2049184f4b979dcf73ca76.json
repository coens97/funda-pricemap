{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable no-inline-comments */\n\n\nimport GL from './api';\nimport { isWebGL2, assertWebGL2Context } from './context';\nimport Resource from './resource';\n\nvar Sampler =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(Sampler, _Resource);\n\n  _createClass(Sampler, null, [{\n    key: 'isSupported',\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }, {\n    key: 'isHandle',\n    value: function isHandle(handle) {\n      return this.gl.isSampler(this.handle);\n    }\n  }]);\n\n  function Sampler(gl, opts) {\n    _classCallCheck(this, Sampler);\n\n    assertWebGL2Context(gl);\n\n    var _this = _possibleConstructorReturn(this, (Sampler.__proto__ || Object.getPrototypeOf(Sampler)).call(this, gl, opts));\n\n    Object.seal(_this);\n    return _this;\n  }\n  /**\n   * Bind to the same texture unit as a texture to control sampling for that texture\n   * @param {GLuint} unit - texture unit index\n   * @return {Sampler} - returns self to enable chaining\n   */\n\n\n  _createClass(Sampler, [{\n    key: 'bind',\n    value: function bind(unit) {\n      this.gl.bindSampler(unit, this.handle);\n      return this;\n    }\n    /**\n     * Bind to the same texture unit as a texture to control sampling for that texture\n     * @param {GLuint} unit - texture unit index\n     * @return {Sampler} - returns self to enable chaining\n     */\n\n  }, {\n    key: 'unbind',\n    value: function unbind(unit) {\n      this.gl.bindSampler(unit, null);\n      return this;\n    } // RESOURCE METHODS\n\n  }, {\n    key: '_createHandle',\n    value: function _createHandle() {\n      return this.gl.createSampler();\n    }\n  }, {\n    key: '_deleteHandle',\n    value: function _deleteHandle() {\n      this.gl.deleteSampler(this.handle);\n    }\n  }, {\n    key: '_getParameter',\n    value: function _getParameter(pname) {\n      var value = this.gl.getSamplerParameter(this.handle, pname);\n      return value;\n    }\n  }, {\n    key: '_setParameter',\n    value: function _setParameter(pname, param) {\n      // Apparently there are some conversion integer/float rules that made\n      // the WebGL committe expose two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      switch (pname) {\n        case GL.TEXTURE_MIN_LOD:\n        case GL.TEXTURE_MAX_LOD:\n          this.gl.samplerParameterf(this.handle, pname, param);\n          break;\n\n        default:\n          this.gl.samplerParameteri(this.handle, pname, param);\n          break;\n      }\n\n      return this;\n    }\n  }]);\n\n  return Sampler;\n}(Resource);\n\nexport default Sampler;","map":null,"metadata":{},"sourceType":"module"}