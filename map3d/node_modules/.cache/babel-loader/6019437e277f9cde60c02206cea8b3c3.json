{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nvar OrthographicView =\n/*#__PURE__*/\nfunction (_View) {\n  _inherits(OrthographicView, _View);\n\n  function OrthographicView() {\n    _classCallCheck(this, OrthographicView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrthographicView).apply(this, arguments));\n  }\n\n  _createClass(OrthographicView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          width = _ref.width,\n          height = _ref.height,\n          viewState = _ref.viewState; // Get view matrix parameters from view state\n\n      var _viewState$eye = viewState.eye,\n          eye = _viewState$eye === void 0 ? [0, 0, 1] : _viewState$eye,\n          _viewState$lookAt = viewState.lookAt,\n          lookAt = _viewState$lookAt === void 0 ? [0, 0, 0] : _viewState$lookAt,\n          _viewState$up = viewState.up,\n          up = _viewState$up === void 0 ? [0, 1, 0] : _viewState$up,\n          _viewState$offset = viewState.offset,\n          offset = _viewState$offset === void 0 ? [0, 1] : _viewState$offset,\n          _viewState$zoom = viewState.zoom,\n          zoom = _viewState$zoom === void 0 ? 1 : _viewState$zoom; // Make sure Matrix4.ortho doesn't crash on 0 width/height\n\n      width = width || 1;\n      height = height || 1; // Get projection matrix parameters from the view itself\n      // NOTE: automatically calculated from width and height if not provided\n\n      var _this$props = this.props,\n          _this$props$left = _this$props.left,\n          left = _this$props$left === void 0 ? (-width / 2 + offset[0]) * zoom : _this$props$left,\n          _this$props$top = _this$props.top,\n          top = _this$props$top === void 0 ? (-height / 2 + offset[1]) * zoom : _this$props$top,\n          _this$props$right = _this$props.right,\n          right = _this$props$right === void 0 ? (width / 2 + offset[0]) * zoom : _this$props$right,\n          _this$props$bottom = _this$props.bottom,\n          bottom = _this$props$bottom === void 0 ? (height / 2 + offset[1]) * zoom : _this$props$bottom,\n          _this$props$near = _this$props.near,\n          near = _this$props$near === void 0 ? 1 : _this$props$near,\n          _this$props$far = _this$props.far,\n          far = _this$props$far === void 0 ? 100 : _this$props$far;\n      return new Viewport({\n        id: this.id,\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        viewMatrix: new Matrix4().lookAt({\n          eye: eye,\n          lookAt: lookAt,\n          up: up\n        }),\n        projectionMatrix: new Matrix4().ortho({\n          left: left,\n          right: right,\n          bottom: bottom,\n          top: top,\n          near: near,\n          far: far\n        })\n      });\n    }\n  }, {\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrthographicController\n      });\n    }\n  }]);\n\n  return OrthographicView;\n}(View);\n\nexport { OrthographicView as default };\nOrthographicView.displayName = 'OrthographicView';","map":null,"metadata":{},"sourceType":"module"}