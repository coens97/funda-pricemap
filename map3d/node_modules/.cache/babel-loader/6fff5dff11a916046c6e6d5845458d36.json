{"ast":null,"code":"import { isBrowser } from './utils/is-browser';\nimport { global } from './utils/globals';\nimport log from './utils/log'; // Version detection\n// TODO - this imports a rather large JSON file, we only need one field\n\nimport { version } from '../package.json';\nvar STARTUP_MESSAGE = 'Assign luma.log.priority in console to control logging: 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\\nluma.log.break[], set to gl funcs, luma.log.profile[] set to model names';\n\nif (global.luma && global.luma.VERSION !== version) {\n  throw new Error('luma.gl - multiple versions detected: ' + global.luma.VERSION + ' vs ' + version);\n}\n\nif (!global.luma) {\n  /* global console */\n\n  /* eslint-disable no-console */\n  if (isBrowser) {\n    console.log('luma.gl ' + version + ' - ' + STARTUP_MESSAGE);\n  }\n\n  global.luma = global.luma || {\n    VERSION: version,\n    version: version,\n    log: log,\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: {},\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      headlessGL: null,\n      headlessTypes: null,\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport { global };\nexport default global.luma;","map":null,"metadata":{},"sourceType":"module"}