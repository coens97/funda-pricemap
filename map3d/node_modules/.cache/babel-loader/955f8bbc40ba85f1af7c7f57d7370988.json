{"ast":null,"code":"// Create a WebGL context\nimport assert from 'assert';\n/* global HTMLCanvasElement, WebGLRenderingContext */\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\n\nexport function createContext(_ref) {\n  var canvas = _ref.canvas,\n      _ref$opts = _ref.opts,\n      opts = _ref$opts === undefined ? {} : _ref$opts,\n      _ref$onError = _ref.onError,\n      onError = _ref$onError === undefined ? function (message) {\n    return null;\n  } : _ref$onError; // See if we can extract any extra information about why context creation failed\n\n  function onContextCreationError(error) {\n    onError('WebGL context: ' + (error.statusMessage || 'Unknown error'));\n  }\n\n  canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);\n  var _opts$webgl = opts.webgl1,\n      webgl1 = _opts$webgl === undefined ? true : _opts$webgl,\n      _opts$webgl2 = opts.webgl2,\n      webgl2 = _opts$webgl2 === undefined ? true : _opts$webgl2;\n  var gl = null; // Prefer webgl2 over webgl1, prefer conformant over experimental\n\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', opts);\n    gl = gl || canvas.getContext('experimental-webgl2', opts);\n  }\n\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', opts);\n    gl = gl || canvas.getContext('experimental-webgl', opts);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);\n\n  if (!gl) {\n    return onError('Failed to create ' + (webgl2 && !webgl1 ? 'WebGL2' : 'WebGL') + ' context');\n  }\n\n  return gl;\n}\n/**\n * Installs a spy on Canvas.getContext\n * calls the provided callback with the {context}\n */\n\nexport function trackContextCreation(_ref2) {\n  var _ref2$onContextCreate = _ref2.onContextCreate,\n      onContextCreate = _ref2$onContextCreate === undefined ? function () {\n    return null;\n  } : _ref2$onContextCreate,\n      _ref2$onContextCreate2 = _ref2.onContextCreated,\n      onContextCreated = _ref2$onContextCreate2 === undefined ? function () {} : _ref2$onContextCreate2;\n  assert(onContextCreate || onContextCreated);\n\n  if (typeof HTMLCanvasElement !== 'undefined') {\n    var getContext = HTMLCanvasElement.prototype.getContext;\n\n    HTMLCanvasElement.prototype.getContext = function getContextSpy(type, opts) {\n      // Let intercepter create context\n      var context = void 0;\n\n      if (type === 'webgl') {\n        context = onContextCreate({\n          canvas: this,\n          type: type,\n          opts: opts,\n          getContext: getContext.bind(this)\n        });\n      } // If not, create context\n\n\n      context = context || getContext.call(this, type, opts); // Report it created\n\n      if (context instanceof WebGLRenderingContext) {\n        onContextCreated({\n          canvas: this,\n          context: context,\n          type: type,\n          opts: opts\n        });\n      }\n\n      return context;\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}