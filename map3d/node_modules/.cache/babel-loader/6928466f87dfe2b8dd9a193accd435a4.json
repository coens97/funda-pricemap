{"ast":null,"code":"import assert from '../../utils/assert';\nvar shaderModules = {};\nvar defaultShaderModules = [];\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\n\nexport function registerShaderModules(shaderModuleList) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ignoreMultipleRe = _ref.ignoreMultipleRegistrations,\n      ignoreMultipleRegistrations = _ref$ignoreMultipleRe === void 0 ? false : _ref$ignoreMultipleRe;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = shaderModuleList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var shaderModule = _step.value;\n      registerShaderModule(shaderModule, {\n        ignoreMultipleRegistrations: ignoreMultipleRegistrations\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\n\nexport function setDefaultShaderModules(modules) {\n  defaultShaderModules = modules;\n} // Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\n\nexport function getShaderModule(moduleOrName) {\n  // Check if \"inline\" module\n  if (typeof moduleOrName !== 'string') {\n    var _shaderModule = moduleOrName;\n    assert(typeof _shaderModule.name === 'string');\n    registerShaderModule(_shaderModule, {\n      ignoreMultipleRegistrations: true\n    });\n    return _shaderModule;\n  } // Look up module\n\n\n  var shaderModule = shaderModules[moduleOrName];\n\n  if (!shaderModule) {\n    // console.log(`${moduleOrName} not in registered modules:`, shaderModules);\n    assert(false, \"Unknown shader module \".concat(moduleOrName));\n  }\n\n  return shaderModule;\n} // registers any supplied modules and returns a list of module names\n\nexport function resolveModules(modules) {\n  var moduleNames = modules.map(function (module) {\n    if (typeof module !== 'string') {\n      registerShaderModules([module], {\n        ignoreMultipleRegistrations: true\n      });\n      return module.name;\n    }\n\n    return module;\n  });\n  return getShaderDependencies(moduleNames);\n}\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\n\nexport function getShaderDependencies(modules) {\n  modules = modules.concat(defaultShaderModules);\n  var result = {};\n  getDependencyGraph({\n    modules: modules,\n    level: 0,\n    result: result\n  }); // Return a reverse sort so that dependencies come before the modules that use them\n\n  return Object.keys(result).sort(function (a, b) {\n    return result[b] - result[a];\n  });\n}\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\n\nexport function getDependencyGraph(_ref2) {\n  var modules = _ref2.modules,\n      level = _ref2.level,\n      result = _ref2.result;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  } // Update level on all current modules\n\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var moduleOrName = _step2.value;\n      var shaderModule = getShaderModule(moduleOrName);\n\n      if (result[shaderModule.name] === undefined || result[shaderModule.name] < level) {\n        result[shaderModule.name] = level;\n      }\n    } // Recurse\n\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _moduleOrName = _step3.value;\n\n      var _shaderModule2 = getShaderModule(_moduleOrName);\n\n      if (_shaderModule2.dependencies) {\n        getDependencyGraph({\n          modules: _shaderModule2.dependencies,\n          level: level + 1,\n          result: result\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return result;\n} // PRIVATE API\n\nfunction parseDeprecationDefinitions() {\n  var deprecations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  deprecations.forEach(function (def) {\n    switch (def.type) {\n      case 'function':\n        def.regex = new RegExp(\"\\\\b\".concat(def.old, \"\\\\(\"));\n        break;\n\n      default:\n        def.regex = new RegExp(\"\".concat(def.type, \" \").concat(def.old, \";\"));\n    }\n  });\n  return deprecations;\n}\n\nfunction registerShaderModule(shaderModule, _ref3) {\n  var _ref3$ignoreMultipleR = _ref3.ignoreMultipleRegistrations,\n      ignoreMultipleRegistrations = _ref3$ignoreMultipleR === void 0 ? false : _ref3$ignoreMultipleR;\n  assert(shaderModule.name, 'shader module has no name');\n\n  if (!ignoreMultipleRegistrations && shaderModules[shaderModule.name]) {\n    // TODO - instead verify that definition is not changing...\n    throw new Error(\"shader module \".concat(shaderModule.name, \" already registered\"));\n  }\n\n  shaderModules[shaderModule.name] = shaderModule;\n  shaderModule.dependencies = shaderModule.dependencies || [];\n  shaderModule.deprecations = parseDeprecationDefinitions(shaderModule.deprecations);\n}","map":null,"metadata":{},"sourceType":"module"}