{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\n\n\nimport { GL, Framebuffer, Model, Geometry } from 'luma.gl';\nimport { Effect } from '../../lib';\nimport { WebMercatorViewport } from '../../../lib/viewports';\nimport reflectionVertex from './reflection-effect-vertex.glsl';\nimport reflectionFragment from './reflection-effect-fragment.glsl';\n\nvar ReflectionEffect = function (_Effect) {\n  _inherits(ReflectionEffect, _Effect);\n  /**\n   * @classdesc\n   * ReflectionEffect\n   *\n   * @class\n   * @param reflectivity How visible reflections should be over the map, between 0 and 1\n   * @param blur how blurry the reflection should be, between 0 and 1\n   */\n\n\n  function ReflectionEffect() {\n    var reflectivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    var blur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;\n\n    _classCallCheck(this, ReflectionEffect);\n\n    var _this = _possibleConstructorReturn(this, (ReflectionEffect.__proto__ || Object.getPrototypeOf(ReflectionEffect)).call(this));\n\n    _this.reflectivity = reflectivity;\n    _this.blur = blur;\n    _this.framebuffer = null;\n\n    _this.setNeedsRedraw();\n\n    return _this;\n  }\n\n  _createClass(ReflectionEffect, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return {\n        vs: reflectionVertex,\n        fs: reflectionFragment,\n        modules: [],\n        shaderCache: this.context.shaderCache\n      };\n    }\n  }, {\n    key: 'initialize',\n    value: function initialize(_ref) {\n      var gl = _ref.gl,\n          layerManager = _ref.layerManager;\n      this.unitQuad = new Model(gl, Object.assign({}, this.getShaders(), {\n        id: 'reflection-effect',\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        })\n      }));\n      this.framebuffer = new Framebuffer(gl, {\n        depth: true\n      });\n    }\n  }, {\n    key: 'preDraw',\n    value: function preDraw(_ref2) {\n      var gl = _ref2.gl,\n          layerManager = _ref2.layerManager;\n      var viewport = layerManager.context.viewport;\n      /*\n       * the renderer already has a reference to this, but we don't have a reference to the renderer.\n       * when we refactor the camera code, we should make sure we get a reference to the renderer so\n       * that we can keep this in one place.\n       */\n\n      var dpi = typeof window !== 'undefined' && window.devicePixelRatio || 1;\n      this.framebuffer.resize({\n        width: dpi * viewport.width,\n        height: dpi * viewport.height\n      });\n      var pitch = viewport.pitch;\n      this.framebuffer.bind();\n      /* this is a huge hack around the existing viewport class.\n       * TODO in the future, once we implement bona-fide cameras, we really need to fix this.\n       */\n\n      layerManager.setViewport(new WebMercatorViewport(Object.assign({}, viewport, {\n        pitch: -180 - pitch\n      })));\n      gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n      layerManager.drawLayers({\n        pass: 'reflection'\n      });\n      layerManager.setViewport(viewport);\n      this.framebuffer.unbind();\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref3) {\n      var gl = _ref3.gl,\n          layerManager = _ref3.layerManager;\n      /*\n       * Render our unit quad.\n       * This will cover the entire screen, but will lie behind all other geometry.\n       * This quad will sample the previously generated reflection texture\n       * in order to create the reflection effect\n       */\n\n      this.unitQuad.render({\n        reflectionTexture: this.framebuffer.texture,\n        reflectionTextureWidth: this.framebuffer.width,\n        reflectionTextureHeight: this.framebuffer.height,\n        reflectivity: this.reflectivity,\n        blur: this.blur\n      });\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize(_ref4) {\n      /* TODO: Free resources? */\n      var gl = _ref4.gl,\n          layerManager = _ref4.layerManager;\n    }\n  }]);\n\n  return ReflectionEffect;\n}(Effect);\n\nexport default ReflectionEffect;","map":null,"metadata":{},"sourceType":"module"}