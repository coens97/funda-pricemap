{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport GL from './api';\nimport { isWebGL2, assertWebGL2Context } from './context';\nimport { withParameters } from './context-state';\nimport Texture from '../webgl/texture';\nimport Buffer from './buffer';\n\nvar Texture3D =\n/*#__PURE__*/\nfunction (_Texture) {\n  _inherits(Texture3D, _Texture);\n\n  _createClass(Texture3D, null, [{\n    key: 'isSupported',\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n    /**\n     * @classdesc\n     * 3D WebGL Texture\n     * Note: Constructor will initialize your texture.\n     *\n     * @class\n     * @param {WebGLRenderingContext} gl - gl context\n     * @param {Image|ArrayBuffer|null} opts= - named options\n     * @param {Image|ArrayBuffer|null} opts.data= - buffer\n     * @param {GLint} width - width of texture\n     * @param {GLint} height - height of texture\n     */\n\n  }]);\n\n  function Texture3D(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Texture3D);\n\n    assertWebGL2Context(gl);\n\n    var _this = _possibleConstructorReturn(this, (Texture3D.__proto__ || Object.getPrototypeOf(Texture3D)).call(this, gl, Object.assign({}, opts, {\n      target: opts.target || GL.TEXTURE_3D\n    })));\n\n    _this.width = null;\n    _this.height = null;\n    _this.depth = null;\n    Object.seal(_this);\n\n    _this.setImageData(opts);\n\n    if (opts.generateMipmap) {\n      _this.generateMipmap();\n    }\n\n    return _this;\n  }\n\n  _createClass(Texture3D, [{\n    key: 'initialize',\n    value: function initialize() {\n      var _this2 = this;\n\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.opts = Object.assign({}, this.opts, opts);\n      var _opts = this.opts,\n          pixels = _opts.pixels,\n          settings = _opts.settings;\n\n      if (settings) {\n        withParameters(settings, function () {\n          if (pixels) {\n            _this2.setImage3D(_this2.opts);\n          }\n        });\n        this.setParameters(opts);\n      }\n    } // WebGL2\n    // Image 3D copies from Typed Array or WebGLBuffer\n\n  }, {\n    key: 'setImage3D',\n    value: function setImage3D(_ref) {\n      var _ref$level = _ref.level,\n          level = _ref$level === undefined ? 0 : _ref$level,\n          _ref$internalformat = _ref.internalformat,\n          internalformat = _ref$internalformat === undefined ? GL.RGBA : _ref$internalformat,\n          width = _ref.width,\n          height = _ref.height,\n          _ref$depth = _ref.depth,\n          depth = _ref$depth === undefined ? 1 : _ref$depth,\n          _ref$border = _ref.border,\n          border = _ref$border === undefined ? 0 : _ref$border,\n          format = _ref.format,\n          _ref$type = _ref.type,\n          type = _ref$type === undefined ? GL.UNSIGNED_BYTE : _ref$type,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === undefined ? 0 : _ref$offset,\n          pixels = _ref.pixels;\n\n      if (ArrayBuffer.isView(pixels)) {\n        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);\n        return;\n      }\n\n      if (pixels instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      }\n    }\n  }]);\n\n  return Texture3D;\n}(Texture);\n\nexport default Texture3D;","map":null,"metadata":{},"sourceType":"module"}