{"ast":null,"code":"function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport Resource from './resource';\nimport { parseGLSLCompilerError, getShaderName } from '../webgl-utils';\nimport { assertWebGLContext } from '../webgl-utils';\nimport { uid, log } from '../utils';\nimport assert from '../utils/assert';\nvar ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\nvar GL_FRAGMENT_SHADER = 0x8B30;\nvar GL_VERTEX_SHADER = 0x8B31;\nvar GL_COMPILE_STATUS = 0x8B81;\nvar GL_SHADER_TYPE = 0x8B4F; // For now this is an internal class\n\nexport var Shader =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(Shader, _Resource);\n\n  _createClass(Shader, null, [{\n    key: \"getTypeName\",\n    value: function getTypeName(shaderType) {\n      switch (shaderType) {\n        case GL_VERTEX_SHADER:\n          return 'vertex-shader';\n\n        case GL_FRAGMENT_SHADER:\n          return 'fragment-shader';\n\n        default:\n          assert(false);\n          return 'unknown';\n      }\n    }\n    /* eslint-disable max-statements */\n\n  }]);\n\n  function Shader(gl, source, shaderType) {\n    var _this;\n\n    _classCallCheck(this, Shader);\n\n    assertWebGLContext(gl);\n    assert(typeof source === 'string', ERR_SOURCE);\n    _this = _possibleConstructorReturn(this, (Shader.__proto__ || Object.getPrototypeOf(Shader)).call(this, gl, {\n      id: getShaderName(source) || uid(Shader.getTypeName(shaderType))\n    }));\n    _this.shaderType = shaderType;\n    _this.source = source;\n    _this.opts.source = source;\n\n    _this.initialize(_this.opts);\n\n    return _this;\n  }\n\n  _createClass(Shader, [{\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var source = _ref.source;\n      var shaderName = getShaderName(source);\n\n      if (shaderName) {\n        this.id = uid(shaderName);\n      }\n\n      this._compile(source);\n\n      this.opts.source = source;\n    } // Accessors\n\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      return this.gl.getShaderParameter(this.handle, pname);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.getTypeName(this.shaderType), \":\").concat(this.id);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return getShaderName(this.opts.source) || 'unnamed-shader';\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this.gl.getShaderSource(this.handle);\n    } // Debug method - Returns translated source if available\n\n  }, {\n    key: \"getTranslatedSource\",\n    value: function getTranslatedSource() {\n      var extension = this.gl.getExtension('WEBGL_debug_shaders');\n      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';\n    } // PRIVATE METHODS\n\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      this.gl.shaderSource(this.handle, this.source);\n      this.gl.compileShader(this.handle); // TODO - For performance reasons, avoid checking shader compilation errors on production?\n      // TODO - Load log even when no error reported, to catch warnings?\n      // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n\n      var compileStatus = this.getParameter(GL_COMPILE_STATUS);\n\n      if (!compileStatus) {\n        var infoLog = this.gl.getShaderInfoLog(this.handle);\n\n        var _parseGLSLCompilerErr = parseGLSLCompilerError(infoLog, this.source, this.shaderType),\n            shaderName = _parseGLSLCompilerErr.shaderName,\n            errors = _parseGLSLCompilerErr.errors,\n            warnings = _parseGLSLCompilerErr.warnings;\n\n        log.error(\"GLSL compilation errors in \".concat(shaderName, \"\\n\").concat(errors))();\n        log.warn(\"GLSL compilation warnings in \".concat(shaderName, \"\\n\").concat(warnings))();\n        throw new Error(\"GLSL compilation errors in \".concat(shaderName));\n      }\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteShader(this.handle);\n    }\n  }, {\n    key: \"_getOptsFromHandle\",\n    value: function _getOptsFromHandle() {\n      return {\n        type: this.getParameter(GL_SHADER_TYPE),\n        source: this.getSource()\n      };\n    }\n  }]);\n\n  return Shader;\n}(Resource);\nexport var VertexShader =\n/*#__PURE__*/\nfunction (_Shader) {\n  _inherits(VertexShader, _Shader);\n\n  function VertexShader(gl, source) {\n    _classCallCheck(this, VertexShader);\n\n    return _possibleConstructorReturn(this, (VertexShader.__proto__ || Object.getPrototypeOf(VertexShader)).call(this, gl, source, GL_VERTEX_SHADER));\n  } // PRIVATE METHODS\n\n\n  _createClass(VertexShader, [{\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createShader(GL_VERTEX_SHADER);\n    }\n  }]);\n\n  return VertexShader;\n}(Shader);\nexport var FragmentShader =\n/*#__PURE__*/\nfunction (_Shader2) {\n  _inherits(FragmentShader, _Shader2);\n\n  function FragmentShader(gl, source) {\n    _classCallCheck(this, FragmentShader);\n\n    return _possibleConstructorReturn(this, (FragmentShader.__proto__ || Object.getPrototypeOf(FragmentShader)).call(this, gl, source, GL_FRAGMENT_SHADER));\n  } // PRIVATE METHODS\n\n\n  _createClass(FragmentShader, [{\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createShader(GL_FRAGMENT_SHADER);\n    }\n  }]);\n\n  return FragmentShader;\n}(Shader);","map":null,"metadata":{},"sourceType":"module"}