{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getTimestamp } from './utils/timestamp';\nimport { formatTime } from './utils/formatters';\n\nvar Stats = function () {\n  function Stats(_ref) {\n    var id = _ref.id;\n\n    _classCallCheck(this, Stats);\n\n    this.id = id;\n    this.time = getTimestamp();\n    this.counters = {};\n    Object.seal(this);\n  }\n\n  _createClass(Stats, [{\n    key: \"addCounter\",\n    value: function addCounter(name) {\n      this._getCounter(name);\n\n      return this;\n    }\n  }, {\n    key: \"bump\",\n    value: function bump(name) {\n      var counter = this._getCounter(name);\n\n      counter.call++;\n      counter.count++;\n      return this;\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(name, count) {\n      var counter = this._getCounter(name);\n\n      counter.call++;\n      counter.count += count;\n      return this;\n    }\n  }, {\n    key: \"addTimer\",\n    value: function addTimer(name) {\n      var timer = this._getCounter(name);\n\n      timer.time = 0;\n      return this;\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(name, time) {\n      var timer = this._getCounter(name);\n\n      timer.time += time;\n      timer.count++;\n      return this;\n    }\n  }, {\n    key: \"timeStart\",\n    value: function timeStart(name, subname) {\n      var timer = this._getCounter(name);\n\n      timer._startTime = getTimestamp();\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd(name, subname) {\n      var timer = this._getCounter(name);\n\n      this.addTime(name, getTimestamp() - timer._startTime);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.time = getTimestamp();\n\n      for (var key in this.counters) {\n        var counter = this.counters[key];\n        counter.count = 0;\n        counter.time = 0;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hasTimeElapsed\",\n    value: function hasTimeElapsed() {\n      var deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return getTimestamp() - this.time > 1000;\n    }\n  }, {\n    key: \"getStats\",\n    value: function getStats() {\n      var deltaTime = (getTimestamp() - this.time) / 1000;\n      var stats = {};\n\n      for (var key in this.counters) {\n        var counter = this.counters[key];\n        stats[counter.title] = {\n          total: counter.count,\n          fps: Math.round(counter.count / deltaTime)\n        };\n\n        if (counter.time) {\n          stats[counter.title].totalTime = formatTime(counter.time);\n          stats[counter.title].avgTime = formatTime(counter.time / counter.count);\n        }\n      }\n\n      return stats;\n    }\n  }, {\n    key: \"getStatsTable\",\n    value: function getStatsTable() {\n      var stats = this.getStats();\n\n      for (var key in stats) {\n        if (stats[key].total === 0) {\n          delete stats[key];\n        }\n      }\n\n      return stats;\n    }\n  }, {\n    key: \"getStatNames\",\n    value: function getStatNames() {\n      return Object.keys(this.counters);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var counter = this._getCounter(name);\n\n      return counter.count;\n    }\n  }, {\n    key: \"getCount\",\n    value: function getCount(name) {\n      var counter = this._getCounter(name);\n\n      return counter.count;\n    }\n  }, {\n    key: \"getFPS\",\n    value: function getFPS(name) {\n      var counter = this._getCounter(name);\n\n      var deltaTime = (getTimestamp() - this.time) / 1000;\n      return Math.round(counter.count / deltaTime);\n    }\n  }, {\n    key: \"getTimeString\",\n    value: function getTimeString() {\n      return \"\".concat(this.id, \":\").concat(formatTime(this.time), \"(\").concat(this.count, \")\");\n    }\n  }, {\n    key: \"oneSecondPassed\",\n    value: function oneSecondPassed() {\n      var deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return this.hasTimeElapsed(deltaTime);\n    }\n  }, {\n    key: \"_getCounter\",\n    value: function _getCounter(name) {\n      var counter = this.counters[name];\n\n      if (!counter) {\n        counter = {\n          title: name,\n          unit: '',\n          timer: false,\n          count: 0,\n          time: 0,\n          totalTime: 0,\n          averageTime: 0\n        };\n        this.counters[name] = counter;\n      }\n\n      return counter;\n    }\n  }, {\n    key: \"_incrementTimer\",\n    value: function _incrementTimer(counter, time, count) {\n      counter.count += count;\n      counter.totalTime += time;\n      counter.averageTime = counter.totalTime / count;\n    }\n  }]);\n\n  return Stats;\n}();\n\nexport { Stats as default };","map":null,"metadata":{},"sourceType":"module"}