{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n/* eslint-disable no-inline-comments, max-len */\n\nimport { pushContextState, popContextState } from '../webgl-context/track-context-state';\nimport { getParameter, getParameters, setParameter, setParameters as glSetParameters, resetParameters, getModifiedParameters } from '../webgl-context/set-parameters';\nimport { isObjectEmpty } from '../utils';\nimport assert from '../utils/assert'; // map of parameter setter function names, parameter constants, default values and types\n// - Uses gl function names, except when setter function exist that are named differently\n// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and\n//   blendEquationSeparate, we use non-separate name, but accept both non-separate and\n//   separate arguments. Thus, a `getParameter` call will always return all the separate values\n//   in an array, in a form that can be accepted by the setter.\n\nexport var LUMA_SETTERS = {\n  framebuffer: function framebuffer(gl, _framebuffer) {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    var handle = _framebuffer && 'handle' in _framebuffer ? _framebuffer.handle : _framebuffer;\n    return gl.bindFramebuffer(36160, handle);\n  },\n  blend: function blend(gl, value) {\n    return value ? gl.enable(3042) : gl.disable(3042);\n  },\n  blendColor: function blendColor(gl, value) {\n    return gl.blendColor.apply(gl, _toConsumableArray(value));\n  },\n  blendEquation: function blendEquation(gl, args) {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate.apply(gl, _toConsumableArray(args));\n  },\n  blendFunc: function blendFunc(gl, args) {\n    args = isArray(args) && args.length === 2 ? _toConsumableArray(args).concat(_toConsumableArray(args)) : args;\n    gl.blendFuncSeparate.apply(gl, _toConsumableArray(args));\n  },\n  clearColor: function clearColor(gl, value) {\n    return gl.clearColor.apply(gl, _toConsumableArray(value));\n  },\n  clearDepth: function clearDepth(gl, value) {\n    return gl.clearDepth(value);\n  },\n  clearStencil: function clearStencil(gl, value) {\n    return gl.clearStencil(value);\n  },\n  colorMask: function colorMask(gl, value) {\n    return gl.colorMask.apply(gl, _toConsumableArray(value));\n  },\n  cull: function cull(gl, value) {\n    return value ? gl.enable(2884) : gl.disable(2884);\n  },\n  cullFace: function cullFace(gl, value) {\n    return gl.cullFace(value);\n  },\n  depthTest: function depthTest(gl, value) {\n    return value ? gl.enable(2929) : gl.disable(2929);\n  },\n  depthFunc: function depthFunc(gl, value) {\n    return gl.depthFunc(value);\n  },\n  depthMask: function depthMask(gl, value) {\n    return gl.depthMask(value);\n  },\n  depthRange: function depthRange(gl, value) {\n    return gl.depthRange.apply(gl, _toConsumableArray(value));\n  },\n  dither: function dither(gl, value) {\n    return value ? gl.enable(3024) : gl.disable(3024);\n  },\n  derivativeHint: function derivativeHint(gl, value) {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(35723, value);\n  },\n  frontFace: function frontFace(gl, value) {\n    return gl.frontFace(value);\n  },\n  mipmapHint: function mipmapHint(gl, value) {\n    return gl.hint(33170, value);\n  },\n  lineWidth: function lineWidth(gl, value) {\n    return gl.lineWidth(value);\n  },\n  polygonOffsetFill: function polygonOffsetFill(gl, value) {\n    return value ? gl.enable(32823) : gl.disable(32823);\n  },\n  polygonOffset: function polygonOffset(gl, value) {\n    return gl.polygonOffset.apply(gl, _toConsumableArray(value));\n  },\n  sampleCoverage: function sampleCoverage(gl, value) {\n    return gl.sampleCoverage.apply(gl, _toConsumableArray(value));\n  },\n  scissorTest: function scissorTest(gl, value) {\n    return value ? gl.enable(3089) : gl.disable(3089);\n  },\n  scissor: function scissor(gl, value) {\n    return gl.scissor.apply(gl, _toConsumableArray(value));\n  },\n  stencilTest: function stencilTest(gl, value) {\n    return value ? gl.enable(2960) : gl.disable(2960);\n  },\n  stencilMask: function stencilMask(gl, value) {\n    value = isArray(value) ? value : [value, value];\n\n    var _value = value,\n        _value2 = _slicedToArray(_value, 2),\n        mask = _value2[0],\n        backMask = _value2[1];\n\n    gl.stencilMaskSeparate(1028, mask);\n    gl.stencilMaskSeparate(1029, backMask);\n  },\n  stencilFunc: function stencilFunc(gl, args) {\n    args = isArray(args) && args.length === 3 ? _toConsumableArray(args).concat(_toConsumableArray(args)) : args;\n\n    var _args = args,\n        _args2 = _slicedToArray(_args, 6),\n        func = _args2[0],\n        ref = _args2[1],\n        mask = _args2[2],\n        backFunc = _args2[3],\n        backRef = _args2[4],\n        backMask = _args2[5];\n\n    gl.stencilFuncSeparate(1028, func, ref, mask);\n    gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);\n  },\n  stencilOp: function stencilOp(gl, args) {\n    args = isArray(args) && args.length === 3 ? _toConsumableArray(args).concat(_toConsumableArray(args)) : args;\n\n    var _args3 = args,\n        _args4 = _slicedToArray(_args3, 6),\n        sfail = _args4[0],\n        dpfail = _args4[1],\n        dppass = _args4[2],\n        backSfail = _args4[3],\n        backDpfail = _args4[4],\n        backDppass = _args4[5];\n\n    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);\n  },\n  viewport: function viewport(gl, value) {\n    return gl.viewport.apply(gl, _toConsumableArray(value));\n  }\n}; // HELPERS\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n} // GETTERS AND SETTERS\n// Get the parameter value(s) from the context\n\n\nexport { getParameter }; // from '../webgl-utils/set-parameters'\n// Get the parameters from the context\n\nexport { getParameters }; // from '../webgl-utils/set-parameters'\n// Resets gl state to default values.\n\nexport { setParameter }; // from '../webgl-utils/set-parameters'\n// Resets gl state to default values.\n\nexport { resetParameters }; // from '../webgl-utils/set-parameters'\n// Get a map of modified parameters\n\nexport { getModifiedParameters }; // Note: \"setParameters\" is given extra treatment below\n// Set the parameter value(s) by key to the context\n// Sets value with key to context.\n// Value may be \"normalized\" (in case a short form is supported). In that case\n// the normalized value is retured.\n\nexport function setParameters(gl, parameters) {\n  glSetParameters(gl, parameters);\n\n  for (var key in parameters) {\n    var setter = LUMA_SETTERS[key];\n\n    if (setter) {\n      setter(gl, parameters[key], key);\n    }\n  }\n} // VERY LIMITED / BASIC GL STATE MANAGEMENT\n// Executes a function with gl states temporarily set, exception safe\n// Currently support pixelStorage, scissor test and framebuffer binding\n\nexport function withParameters(gl, parameters, func) {\n  // assertWebGLContext(gl);\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  var _parameters$nocatch = parameters.nocatch,\n      nocatch = _parameters$nocatch === void 0 ? true : _parameters$nocatch; // frameBuffer not supported use framebuffer\n\n  assert(!parameters.frameBuffer);\n  pushContextState(gl);\n  setParameters(gl, parameters); // Setup is done, call the function\n\n  var value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}","map":null,"metadata":{},"sourceType":"module"}