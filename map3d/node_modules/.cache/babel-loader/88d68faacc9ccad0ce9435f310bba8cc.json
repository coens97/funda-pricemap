{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React, { createElement, cloneElement } from 'react';\nimport autobind from './utils/autobind';\nimport { experimental } from '../core';\nvar DeckGLJS = experimental.DeckGLJS,\n    log = experimental.log;\n\nvar DeckGL = function (_React$Component) {\n  _inherits(DeckGL, _React$Component);\n\n  function DeckGL(props) {\n    _classCallCheck(this, DeckGL);\n\n    var _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));\n\n    _this.state = {};\n    autobind(_this);\n    return _this;\n  }\n\n  _createClass(DeckGL, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.deck = new DeckGLJS(Object.assign({}, this.props, {\n        canvas: this.overlay\n      }));\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.deck) {\n        this.deck.setProps(nextProps);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.deck.finalize();\n    } // Public API\n\n  }, {\n    key: 'queryObject',\n    value: function queryObject(opts) {\n      log.deprecated('queryObject', 'pickObject');\n      return this.deck.pickObject(opts);\n    }\n  }, {\n    key: 'pickObject',\n    value: function pickObject(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          _ref$radius = _ref.radius,\n          radius = _ref$radius === undefined ? 0 : _ref$radius,\n          _ref$layerIds = _ref.layerIds,\n          layerIds = _ref$layerIds === undefined ? null : _ref$layerIds;\n      return this.deck.pickObject({\n        x: x,\n        y: y,\n        radius: radius,\n        layerIds: layerIds\n      });\n    }\n  }, {\n    key: 'queryVisibleObjects',\n    value: function queryVisibleObjects(opts) {\n      log.deprecated('queryVisibleObjects', 'pickObjects');\n      return this.pickObjects(opts);\n    }\n  }, {\n    key: 'pickObjects',\n    value: function pickObjects(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          _ref2$width = _ref2.width,\n          width = _ref2$width === undefined ? 1 : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === undefined ? 1 : _ref2$height,\n          _ref2$layerIds = _ref2.layerIds,\n          layerIds = _ref2$layerIds === undefined ? null : _ref2$layerIds;\n      return this.deck.pickObjects({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        layerIds: layerIds\n      });\n    } // Private Helpers\n    // Iterate over viewport descriptors and render children associate with viewports\n    // at the specified positions\n    // TODO - Can we supply a similar function for the non-React case?\n\n  }, {\n    key: '_renderChildrenUnderViewports',\n    value: function _renderChildrenUnderViewports() {\n      var _this2 = this; // Flatten out nested viewports array\n\n\n      var viewports = this.deck ? this.deck.getViewports() : []; // Build a viewport id to viewport index\n\n      var viewportMap = {};\n      viewports.forEach(function (viewport) {\n        if (viewport.id) {\n          viewportMap[viewport.id] = viewport;\n        }\n      });\n      return React.Children.toArray(this.props.children).map( // If child specifies props.viewportId, position under viewport, otherwise render as normal\n      function (child, i) {\n        return child.props.viewportId ? _this2._positionChild({\n          child: child,\n          viewportMap: viewportMap,\n          i: i\n        }) : child;\n      });\n    }\n  }, {\n    key: '_positionChild',\n    value: function _positionChild(_ref3) {\n      var child = _ref3.child,\n          viewportMap = _ref3.viewportMap,\n          i = _ref3.i;\n      var viewportId = child.props.viewportId;\n      var viewport = viewportId && viewportMap[viewportId]; // Drop (aut-hide) elements with viewportId that are not matched by any current viewport\n\n      if (!viewport) {\n        return null;\n      } // Resolve potentially relative dimensions using the deck.gl container size\n\n\n      var x = viewport.x,\n          y = viewport.y,\n          width = viewport.width,\n          height = viewport.height; // Clone the element with width and height set per viewport\n\n      var newProps = Object.assign({}, child.props, {\n        width: width,\n        height: height\n      }); // Inject map properties\n      // TODO - this is too react-map-gl specific\n\n      Object.assign(newProps, viewport.getMercatorParams(), {\n        visible: viewport.isMapSynched()\n      });\n      var clone = cloneElement(child, newProps); // Wrap it in an absolutely positioning div\n\n      var style = {\n        position: 'absolute',\n        left: x,\n        top: y,\n        width: width,\n        height: height\n      };\n      var key = 'viewport-child-' + viewportId + '-' + i;\n      return createElement('div', {\n        key: key,\n        id: key,\n        style: style\n      }, clone);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this; // Render the background elements (typically react-map-gl instances)\n      // using the viewport descriptors\n\n\n      var children = this._renderChildrenUnderViewports(); // Render deck.gl as last child\n\n\n      var _props = this.props,\n          id = _props.id,\n          width = _props.width,\n          height = _props.height,\n          style = _props.style;\n      var deck = createElement('canvas', {\n        ref: function ref(c) {\n          return _this3.overlay = c;\n        },\n        key: 'overlay',\n        id: id,\n        style: Object.assign({}, style, {\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: width,\n          height: height\n        })\n      });\n      children.push(deck);\n      return createElement('div', {\n        id: 'deckgl-wrapper'\n      }, children);\n    }\n  }]);\n\n  return DeckGL;\n}(React.Component);\n\nexport default DeckGL;\nDeckGL.propTypes = DeckGLJS.propTypes;\nDeckGL.defaultProps = DeckGLJS.defaultProps;","map":null,"metadata":{},"sourceType":"module"}