{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\"; //\n// A pass that disables stencil test.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport { ClipSpace } from '../models';\nimport Pass from './pass';\nvar fs = \"uniform sampler2D uDiffuseSampler;\\nuniform float uOpacity;\\n\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec4 texel = texture2D(uDiffuseSampler, uv);\\n  gl_FragColor = uOpacity * texel;\\n}\\n\";\n\nvar CopyPass =\n/*#__PURE__*/\nfunction (_Pass) {\n  _inherits(CopyPass, _Pass);\n\n  function CopyPass(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CopyPass);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CopyPass).call(this, gl, Object.assign({\n      id: 'copy-pass',\n      swap: true\n    }, props)));\n    _this.clipspace = new ClipSpace(gl, {\n      id: 'copy-pass',\n      fs: fs\n    });\n    return _this;\n  }\n\n  _createClass(CopyPass, [{\n    key: \"_renderPass\",\n    value: function _renderPass(_ref) {\n      var inputBuffer = _ref.inputBuffer;\n      var _this$props$opacity = this.props.opacity,\n          opacity = _this$props$opacity === void 0 ? 1.0 : _this$props$opacity;\n      this.clipspace.draw({\n        uniforms: {\n          uDiffuseSampler: inputBuffer,\n          uOpacity: opacity\n        },\n        parameters: {\n          depthWrite: false,\n          depthTest: false\n        }\n      });\n    }\n  }]);\n\n  return CopyPass;\n}(Pass);\n\nexport { CopyPass as default };","map":null,"metadata":{},"sourceType":"module"}