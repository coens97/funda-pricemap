{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport Viewport from './viewport';\nimport { createMat4, transformVector } from '../utils/math-utils';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateY from 'gl-mat4/rotateY';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n/*\n * A deck.gl Viewport class used by OrbitController\n * Adds zoom and pixel translation on top of the PerspectiveViewport\n */\n\nvar OrbitViewport = function (_Viewport) {\n  _inherits(OrbitViewport, _Viewport);\n\n  function OrbitViewport(_ref) {\n    var _ref$id = _ref.id,\n        id = _ref$id === undefined ? 'orbit-viewport' : _ref$id,\n        width = _ref.width,\n        height = _ref.height,\n        distance = _ref.distance,\n        _ref$rotationX = _ref.rotationX,\n        rotationX = _ref$rotationX === undefined ? 0 : _ref$rotationX,\n        _ref$rotationOrbit = _ref.rotationOrbit,\n        rotationOrbit = _ref$rotationOrbit === undefined ? 0 : _ref$rotationOrbit,\n        _ref$orbitAxis = _ref.orbitAxis,\n        orbitAxis = _ref$orbitAxis === undefined ? 'Z' : _ref$orbitAxis,\n        _ref$lookAt = _ref.lookAt,\n        lookAt = _ref$lookAt === undefined ? [0, 0, 0] : _ref$lookAt,\n        _ref$up = _ref.up,\n        up = _ref$up === undefined ? [0, 1, 0] : _ref$up,\n        _ref$fov = _ref.fov,\n        fov = _ref$fov === undefined ? 75 : _ref$fov,\n        _ref$near = _ref.near,\n        near = _ref$near === undefined ? 1 : _ref$near,\n        _ref$far = _ref.far,\n        far = _ref$far === undefined ? 100 : _ref$far,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === undefined ? 1 : _ref$zoom;\n\n    _classCallCheck(this, OrbitViewport);\n\n    var rotationMatrix = mat4_rotateX([], createMat4(), -rotationX / 180 * Math.PI);\n\n    if (orbitAxis === 'Z') {\n      mat4_rotateZ(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);\n    } else {\n      mat4_rotateY(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);\n    }\n\n    var translateMatrix = createMat4();\n    mat4_scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);\n    mat4_translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);\n    var viewMatrix = mat4_lookAt([], [0, 0, distance], [0, 0, 0], up);\n    var fovRadians = fov * DEGREES_TO_RADIANS;\n    var aspect = width / height;\n    var perspectiveMatrix = mat4_perspective([], fovRadians, aspect, near, far);\n\n    var _this = _possibleConstructorReturn(this, (OrbitViewport.__proto__ || Object.getPrototypeOf(OrbitViewport)).call(this, {\n      id: id,\n      viewMatrix: mat4_multiply(viewMatrix, viewMatrix, mat4_multiply(rotationMatrix, rotationMatrix, translateMatrix)),\n      projectionMatrix: perspectiveMatrix,\n      width: width,\n      height: height\n    }));\n\n    _this.width = width;\n    _this.height = height;\n    _this.distance = distance;\n    _this.rotationX = rotationX;\n    _this.rotationOrbit = rotationOrbit;\n    _this.orbitAxis = orbitAxis;\n    _this.lookAt = lookAt;\n    _this.up = up;\n    _this.fov = fov;\n    _this.near = near;\n    _this.far = far;\n    _this.zoom = zoom;\n    return _this;\n  }\n\n  _createClass(OrbitViewport, [{\n    key: 'project',\n    value: function project(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === undefined ? false : _ref2$topLeft;\n\n      var v = transformVector(this.pixelProjectionMatrix, [].concat(_toConsumableArray(xyz), [1]));\n\n      var _v = _slicedToArray(v, 3),\n          x = _v[0],\n          y = _v[1],\n          z = _v[2];\n\n      var y2 = topLeft ? this.height - y : y;\n      return [x, y2, z];\n    }\n  }, {\n    key: 'unproject',\n    value: function unproject(xyz) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$topLeft = _ref3.topLeft,\n          topLeft = _ref3$topLeft === undefined ? false : _ref3$topLeft;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? this.height - y : y;\n      return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);\n    }\n    /** Move camera to make a model bounding box centered at lookat position fit in the viewport.\n     * @param {Array} sizes - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n     * @returns a new OrbitViewport object\n     */\n\n  }, {\n    key: 'fitBounds',\n    value: function fitBounds(sizes) {\n      var width = this.width,\n          height = this.height,\n          rotationX = this.rotationX,\n          rotationOrbit = this.rotationOrbit,\n          orbitAxis = this.orbitAxis,\n          lookAt = this.lookAt,\n          up = this.up,\n          fov = this.fov,\n          near = this.near,\n          far = this.far,\n          zoom = this.zoom;\n      var size = Math.max(sizes[0], sizes[1], sizes[2]) / 2;\n      var newDistance = size / Math.tan(fov / 180 * Math.PI / 2);\n      return new OrbitViewport({\n        width: width,\n        height: height,\n        rotationX: rotationX,\n        rotationOrbit: rotationOrbit,\n        orbitAxis: orbitAxis,\n        up: up,\n        fov: fov,\n        near: near,\n        far: far,\n        zoom: zoom,\n        lookAt: lookAt,\n        distance: newDistance\n      });\n    }\n  }]);\n\n  return OrbitViewport;\n}(Viewport);\n\nexport default OrbitViewport;\nOrbitViewport.displayName = 'OrbitViewport';","map":null,"metadata":{},"sourceType":"module"}