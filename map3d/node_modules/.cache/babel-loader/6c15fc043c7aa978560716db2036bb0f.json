{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\n\n\nvar defaultGetValue = function defaultGetValue(points) {\n  return points.length;\n};\n\nvar BinSorter =\n/*#__PURE__*/\nfunction () {\n  function BinSorter() {\n    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var getValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetValue;\n\n    _classCallCheck(this, BinSorter);\n\n    this.sortedBins = this.getSortedBins(bins, getValue);\n    this.maxCount = this.getMaxCount();\n    this.binMap = this.getBinMap();\n  }\n  /**\n   * Get an array of object with sorted values and index of bins\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n\n\n  _createClass(BinSorter, [{\n    key: \"getSortedBins\",\n    value: function getSortedBins(bins, getValue) {\n      return bins.reduce(function (accu, h, i) {\n        var value = getValue(h.points);\n\n        if (value !== null && value !== undefined) {\n          // filter bins if value is null or undefined\n          accu.push({\n            i: Number.isFinite(h.index) ? h.index : i,\n            value: value,\n            counts: h.points.length\n          });\n        }\n\n        return accu;\n      }, []).sort(function (a, b) {\n        return a.value - b.value;\n      });\n    }\n    /**\n     * Get range of values of all bins\n     * @param {Number[]} range\n     * @param {Number} range[0] - lower bound\n     * @param {Number} range[1] - upper bound\n     * @return {Array} array of new value range\n     */\n\n  }, {\n    key: \"getValueRange\",\n    value: function getValueRange(_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          lower = _ref2[0],\n          upper = _ref2[1];\n\n      var len = this.sortedBins.length;\n\n      if (!len) {\n        return [0, 0];\n      }\n\n      var lowerIdx = Math.ceil(lower / 100 * (len - 1));\n      var upperIdx = Math.floor(upper / 100 * (len - 1));\n      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n    /**\n     * Get ths max count of all bins\n     * @return {Number | Boolean} max count\n     */\n\n  }, {\n    key: \"getMaxCount\",\n    value: function getMaxCount() {\n      var maxCount = 0;\n      this.sortedBins.forEach(function (x) {\n        return maxCount = maxCount > x.counts ? maxCount : x.counts;\n      });\n      return maxCount;\n    }\n    /**\n     * Get a mapping from cell/hexagon index to sorted bin\n     * This is used to retrieve bin value for color calculation\n     * @return {Object} bin index to sortedBins\n     */\n\n  }, {\n    key: \"getBinMap\",\n    value: function getBinMap() {\n      return this.sortedBins.reduce(function (mapper, curr) {\n        return Object.assign(mapper, _defineProperty({}, curr.i, curr));\n      }, {});\n    }\n  }]);\n\n  return BinSorter;\n}();\n\nexport { BinSorter as default };","map":null,"metadata":{},"sourceType":"module"}