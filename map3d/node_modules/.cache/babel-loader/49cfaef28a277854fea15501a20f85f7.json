{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { Layer, experimental, WebMercatorViewport, _GPUGridAggregator as GPUGridAggregator, log } from '@deck.gl/core';\nvar defaultColorRange = experimental.defaultColorRange;\nimport GL from 'luma.gl/constants';\nimport { Model, Geometry, Buffer, isWebGL2 } from 'luma.gl';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\nimport assert from 'assert';\nvar DEFAULT_MINCOLOR = [0, 0, 0, 0];\nvar DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nvar AGGREGATION_DATA_UBO_INDEX = 0;\nvar COLOR_PROPS = [\"minColor\", \"maxColor\", \"colorRange\", \"colorDomain\"];\nvar COLOR_RANGE_LENGTH = 6;\nvar defaultProps = {\n  cellSizePixels: {\n    value: 100,\n    min: 1\n  },\n  cellMarginPixels: {\n    value: 2,\n    min: 0,\n    max: 5\n  },\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getPosition: function getPosition(d) {\n    return d.position;\n  },\n  getWeight: function getWeight(d) {\n    return 1;\n  },\n  gpuAggregation: true\n};\n\nvar ScreenGridLayer =\n/*#__PURE__*/\nfunction (_Layer) {\n  _inherits(ScreenGridLayer, _Layer);\n\n  function ScreenGridLayer() {\n    _classCallCheck(this, ScreenGridLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScreenGridLayer).apply(this, arguments));\n  }\n\n  _createClass(ScreenGridLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var shaders = isWebGL2(this.context.gl) ? {\n        vs: vs,\n        fs: fs\n      } : {\n        vs: vs_WebGL1,\n        fs: fs_WebGL1\n      };\n      shaders.modules = ['picking'];\n      return shaders;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      var gl = this.context.gl;\n      /* eslint-disable max-len */\n\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          update: this.calculateInstancePositions\n        },\n        instanceCounts: {\n          size: 4,\n          transition: true,\n          accessor: ['getPosition', 'getWeight'],\n          update: this.calculateInstanceCounts,\n          noAlloc: true\n        }\n      });\n      /* eslint-disable max-len */\n\n      var options = {\n        id: \"\".concat(this.id, \"-aggregator\"),\n        shaderCache: this.context.shaderCache\n      };\n      this.setState({\n        model: this._getModel(gl),\n        gpuGridAggregator: new GPUGridAggregator(gl, options),\n        maxCountBuffer: this._getMaxCountBuffer(gl),\n        aggregationData: null\n      });\n\n      this._setupUniformBuffer();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this._updateUniforms(opts);\n\n      if (opts.changeFlags.dataChanged) {\n        this._processData();\n      }\n\n      var changeFlags = this._getAggregationChangeFlags(opts);\n\n      if (changeFlags) {\n        this._updateAggregation(changeFlags);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var gl = this.context.gl;\n      var _this$props$parameter = this.props.parameters,\n          parameters = _this$props$parameter === void 0 ? {} : _this$props$parameter;\n      var minColor = this.props.minColor || DEFAULT_MINCOLOR;\n      var maxColor = this.props.maxColor || DEFAULT_MAXCOLOR; // If colorDomain not specified we use default domain [1, maxCount]\n      // maxCount value will be deduced from aggregated buffer in the vertex shader.\n\n      var colorDomain = this.props.colorDomain || [1, 0];\n      var _this$state = this.state,\n          model = _this$state.model,\n          maxCountBuffer = _this$state.maxCountBuffer,\n          cellScale = _this$state.cellScale,\n          shouldUseMinMax = _this$state.shouldUseMinMax,\n          colorRange = _this$state.colorRange,\n          maxWeight = _this$state.maxWeight;\n      var layerUniforms = {\n        minColor: minColor,\n        maxColor: maxColor,\n        cellScale: cellScale,\n        colorRange: colorRange,\n        colorDomain: colorDomain,\n        shouldUseMinMax: shouldUseMinMax\n      };\n\n      if (isWebGL2(gl)) {\n        maxCountBuffer.bind({\n          target: GL.UNIFORM_BUFFER\n        });\n      } else {\n        layerUniforms.maxWeight = maxWeight;\n      }\n\n      uniforms = Object.assign(layerUniforms, uniforms);\n      model.draw({\n        uniforms: uniforms,\n        parameters: Object.assign({\n          depthTest: false,\n          depthMask: false\n        }, parameters)\n      });\n\n      if (isWebGL2(gl)) {\n        maxCountBuffer.unbind();\n      }\n    }\n  }, {\n    key: \"calculateInstancePositions\",\n    value: function calculateInstancePositions(attribute, _ref3) {\n      var numInstances = _ref3.numInstances;\n      var _this$context$viewpor = this.context.viewport,\n          width = _this$context$viewpor.width,\n          height = _this$context$viewpor.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var numCol = this.state.numCol;\n      var value = attribute.value,\n          size = attribute.size;\n\n      for (var i = 0; i < numInstances; i++) {\n        var x = i % numCol;\n        var y = Math.floor(i / numCol);\n        value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n        value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n        value[i * size + 2] = 0;\n      }\n    }\n  }, {\n    key: \"calculateInstanceCounts\",\n    value: function calculateInstanceCounts(attribute, _ref4) {\n      var numInstances = _ref4.numInstances;\n      var countsBuffer = this.state.countsBuffer;\n      attribute.update({\n        buffer: countsBuffer\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref5) {\n      var info = _ref5.info,\n          mode = _ref5.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        var aggregationData = this.state.aggregationData;\n\n        if (!aggregationData) {\n          aggregationData = {\n            countsData: this.state.countsBuffer.getData(),\n            maxCountData: this.state.maxCountBuffer.getData()\n          }; // Cache aggregationData to avoid multiple buffer reads.\n\n          this.setState({\n            aggregationData: aggregationData\n          });\n        }\n\n        var _aggregationData = aggregationData,\n            countsData = _aggregationData.countsData,\n            maxCountData = _aggregationData.maxCountData; // Each instance (one cell) is aggregated into single pixel,\n        // Get current instance's aggregation details.\n\n        info.object = GPUGridAggregator.getAggregationData({\n          countsData: countsData,\n          maxCountData: maxCountData,\n          pixelIndex: index\n        });\n      }\n\n      return info;\n    } // HELPER Methods\n\n  }, {\n    key: \"_getAggregationChangeFlags\",\n    value: function _getAggregationChangeFlags(_ref6) {\n      var oldProps = _ref6.oldProps,\n          props = _ref6.props,\n          changeFlags = _ref6.changeFlags;\n      var cellSizeChanged = props.cellSizePixels !== oldProps.cellSizePixels || props.cellMarginPixels !== oldProps.cellMarginPixels;\n      var dataChanged = changeFlags.dataChanged;\n      var viewportChanged = changeFlags.viewportChanged;\n\n      if (cellSizeChanged || dataChanged || viewportChanged) {\n        return {\n          cellSizeChanged: cellSizeChanged,\n          dataChanged: dataChanged,\n          viewportChanged: viewportChanged\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n    } // Creates and returns a Uniform Buffer object to hold maxCount value.\n\n  }, {\n    key: \"_getMaxCountBuffer\",\n    value: function _getMaxCountBuffer(gl) {\n      return new Buffer(gl, {\n        bytes: 4 * 4,\n        // Four floats\n        size: 4,\n        index: AGGREGATION_DATA_UBO_INDEX\n      });\n    } // Process 'data' and build positions and weights Arrays.\n\n  }, {\n    key: \"_processData\",\n    value: function _processData() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getPosition = _this$props.getPosition,\n          getWeight = _this$props.getWeight;\n      var positions = [];\n      var weights = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var point = _step.value;\n          var position = getPosition(point);\n          positions.push(position[0]);\n          positions.push(position[1]);\n          weights.push(getWeight(point));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.setState({\n        positions: positions,\n        weights: weights\n      });\n    } // Set a binding point for the aggregation uniform block index\n\n  }, {\n    key: \"_setupUniformBuffer\",\n    value: function _setupUniformBuffer() {\n      var gl = this.context.gl; // For WebGL1, uniform buffer is not used.\n\n      if (!isWebGL2(gl)) {\n        return;\n      }\n\n      var programHandle = this.state.model.program.handle; // TODO: Replace with luma.gl api when ready.\n\n      var uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n      gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n    }\n  }, {\n    key: \"_shouldUseMinMax\",\n    value: function _shouldUseMinMax() {\n      var _this$props2 = this.props,\n          minColor = _this$props2.minColor,\n          maxColor = _this$props2.maxColor,\n          colorDomain = _this$props2.colorDomain,\n          colorRange = _this$props2.colorRange;\n\n      if (minColor || maxColor) {\n        log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n        return true;\n      } // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n      // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n\n\n      if (colorDomain || colorRange) {\n        return false;\n      } // None specified, use default minColor and maxColor\n\n\n      return true;\n    }\n  }, {\n    key: \"_updateAggregation\",\n    value: function _updateAggregation(changeFlags) {\n      var attributeManager = this.getAttributeManager();\n\n      if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n        this._updateGridParams();\n\n        attributeManager.invalidateAll();\n      }\n\n      var _this$props3 = this.props,\n          cellSizePixels = _this$props3.cellSizePixels,\n          gpuAggregation = _this$props3.gpuAggregation;\n      var _this$state2 = this.state,\n          positions = _this$state2.positions,\n          weights = _this$state2.weights,\n          maxCountBuffer = _this$state2.maxCountBuffer,\n          countsBuffer = _this$state2.countsBuffer;\n      var viewport = this.context.viewport;\n      var projectPoints = false;\n      var gridTransformMatrix = null;\n\n      if (this.context.viewport instanceof WebMercatorViewport) {\n        // project points from world space (lng/lat) to viewport (screen) space.\n        projectPoints = true;\n      } else {\n        projectPoints = false; // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n\n        gridTransformMatrix = viewport.pixelProjectionMatrix;\n      }\n\n      var results = this.state.gpuGridAggregator.run({\n        positions: positions,\n        weights: weights,\n        cellSize: [cellSizePixels, cellSizePixels],\n        viewport: viewport,\n        countsBuffer: countsBuffer,\n        maxCountBuffer: maxCountBuffer,\n        changeFlags: changeFlags,\n        useGPU: gpuAggregation,\n        projectPoints: projectPoints,\n        gridTransformMatrix: gridTransformMatrix\n      });\n      var _results$maxWeight = results.maxWeight,\n          maxWeight = _results$maxWeight === void 0 ? 0 : _results$maxWeight;\n      this.setState({\n        aggregationData: null,\n        // Aggregation changed, enforce reading buffer data for picking.\n        maxWeight: maxWeight // uniform to use under WebGL1\n\n      });\n      attributeManager.invalidate('instanceCounts');\n    }\n  }, {\n    key: \"_updateUniforms\",\n    value: function _updateUniforms(_ref7) {\n      var oldProps = _ref7.oldProps,\n          props = _ref7.props,\n          changeFlags = _ref7.changeFlags;\n      var newState = {};\n\n      if (COLOR_PROPS.some(function (key) {\n        return oldProps[key] !== props[key];\n      })) {\n        newState.shouldUseMinMax = this._shouldUseMinMax();\n      }\n\n      if (oldProps.colorRange !== props.colorRange) {\n        var colorRangeUniform = [];\n        assert(props.colorRange && props.colorRange.length === COLOR_RANGE_LENGTH);\n        props.colorRange.forEach(function (color) {\n          colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);\n        });\n        newState.colorRange = colorRangeUniform;\n      }\n\n      if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n        var _this$context$viewpor2 = this.context.viewport,\n            width = _this$context$viewpor2.width,\n            height = _this$context$viewpor2.height;\n        var _this$props4 = this.props,\n            cellSizePixels = _this$props4.cellSizePixels,\n            cellMarginPixels = _this$props4.cellMarginPixels;\n        var margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n        newState.cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);\n      }\n\n      this.setState(newState);\n    }\n  }, {\n    key: \"_updateGridParams\",\n    value: function _updateGridParams() {\n      var _this$context$viewpor3 = this.context.viewport,\n          width = _this$context$viewpor3.width,\n          height = _this$context$viewpor3.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var gl = this.context.gl;\n      var numCol = Math.ceil(width / cellSizePixels);\n      var numRow = Math.ceil(height / cellSizePixels);\n      var numInstances = numCol * numRow;\n      var dataBytes = numInstances * 4 * 4;\n      var countsBuffer = this.state.countsBuffer;\n\n      if (countsBuffer) {\n        countsBuffer.delete();\n      }\n\n      countsBuffer = new Buffer(gl, {\n        size: 4,\n        bytes: dataBytes,\n        type: GL.FLOAT,\n        instanced: 1\n      });\n      this.setState({\n        numCol: numCol,\n        numRow: numRow,\n        numInstances: numInstances,\n        countsBuffer: countsBuffer\n      });\n    }\n  }]);\n\n  return ScreenGridLayer;\n}(Layer);\n\nexport { ScreenGridLayer as default };\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}