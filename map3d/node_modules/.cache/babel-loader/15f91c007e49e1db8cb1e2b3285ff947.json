{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { LIFECYCLE } from '../lifecycle/constants';\nimport { createProps } from '../lifecycle/create-props'; // import {diffProps} from '../lifecycle/props';\n// import log from '../utils/log';\n// import assert from '../utils/assert';\n\nimport ComponentState from './component-state';\nvar defaultProps = {};\nvar counter = 0;\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  function Component()\n  /* ...propObjects */\n  {\n    _classCallCheck(this, Component); // Merge supplied props with default props and freeze them.\n\n    /* eslint-disable prefer-spread */\n\n\n    this.props = createProps.apply(this, arguments);\n    /* eslint-enable prefer-spread */\n    // Define all members before layer is sealed\n\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n\n    this.count = counter++; // Keep track of how many layer instances you are generating\n\n    this.lifecycle = LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers\n\n    this.parent = null; // reference to the composite layer parent that rendered this layer\n\n    this.context = null; // Will reference layer manager's context, contains state shared by layers\n\n    this.state = null; // Will be set to the shared layer state object during layer matching\n\n    this.internalState = null; // Seal the layer\n\n    Object.seal(this);\n  } // clone this layer with modified props\n\n\n  _createClass(Component, [{\n    key: \"clone\",\n    value: function clone(newProps) {\n      return new this.constructor(Object.assign({}, this.props, newProps));\n    }\n  }, {\n    key: \"_initState\",\n    // PROTECTED METHODS, override in subclass\n    value: function _initState() {\n      this.internalState = new ComponentState({});\n    }\n  }, {\n    key: \"stats\",\n    get: function get() {\n      return this.internalState.stats;\n    }\n  }]);\n\n  return Component;\n}();\n\nexport { Component as default };\nComponent.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}