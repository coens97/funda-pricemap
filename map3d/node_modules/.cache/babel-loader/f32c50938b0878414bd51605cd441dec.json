{"ast":null,"code":"function _instanceof(left, right) {\n  return null != right && \"undefined\" != typeof Symbol && right[Symbol.hasInstance] ? right[Symbol.hasInstance](left) : left instanceof right;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [],\n      _n = !0,\n      _d = !1,\n      _e = void 0;\n\n  try {\n    for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0) {\n      ;\n    }\n  } catch (err) {\n    _d = !0, _e = err;\n  } finally {\n    try {\n      _n || null == _i[\"return\"] || _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _defineProperties(target, props) {\n  for (var descriptor, i = 0; i < props.length; i++) {\n    descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, \"value\" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;\n}\n\nimport MapState from \"./map-state\";\nimport { LinearInterpolator } from \"./transition\";\nimport { TRANSITION_EVENTS } from \"./transition-manager\";\n\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n},\n    LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n},\n    PITCH_MOUSE_THRESHOLD = 5,\n    PITCH_ACCEL = 1.2,\n    ZOOM_ACCEL = .01,\n    EVENT_TYPES = {\n  WHEEL: [\"wheel\"],\n  PAN: [\"panstart\", \"panmove\", \"panend\"],\n  PINCH: [\"pinchstart\", \"pinchmove\", \"pinchend\"],\n  DOUBLE_TAP: [\"doubletap\"],\n  KEYBOARD: [\"keydown\"]\n},\n    MapControls = function () {\n  function MapControls() {\n    _classCallCheck(this, MapControls), this._state = {\n      isDragging: !1\n    }, this.events = [], this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  var _Mathabs = Math.abs;\n  return _createClass(MapControls, [{\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      switch (this.mapState = this.getMapState(), event.type) {\n        case \"panstart\":\n          return this._onPanStart(event);\n\n        case \"panmove\":\n          return this._onPan(event);\n\n        case \"panend\":\n          return this._onPanEnd(event);\n\n        case \"pinchstart\":\n          return this._onPinchStart(event);\n\n        case \"pinchmove\":\n          return this._onPinch(event);\n\n        case \"pinchend\":\n          return this._onPinchEnd(event);\n\n        case \"doubletap\":\n          return this._onDoubleTap(event);\n\n        case \"wheel\":\n          return this._onWheel(event);\n\n        case \"keydown\":\n          return this._onKeyDown(event);\n\n        default:\n          return !1;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return !!(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(newState) {\n      Object.assign(this._state, newState), this.onStateChange && this.onStateChange(this._state);\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newMapState) {\n      var extraProps = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},\n          extraState = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},\n          oldViewport = this.mapState ? this.mapState.getViewportProps() : {},\n          newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps),\n          viewStateChanged = Object.keys(newViewport).some(function (key) {\n        return oldViewport[key] !== newViewport[key];\n      });\n      viewStateChanged && this.onViewStateChange && this.onViewStateChange({\n        viewState: newViewport\n      }), viewStateChanged && this.onViewportChange && this.onViewportChange(newViewport), this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n    }\n  }, {\n    key: \"getMapState\",\n    value: function getMapState(overrides) {\n      return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var onChangeViewport = options.onChangeViewport,\n          _options$touchZoomRot = options.touchZoomRotate,\n          touchZoomRotate = void 0 === _options$touchZoomRot || _options$touchZoomRot,\n          onViewStateChange = options.onViewStateChange,\n          onViewportChange = options.onViewportChange,\n          _options$onStateChang = options.onStateChange,\n          onStateChange = void 0 === _options$onStateChang ? this.onStateChange : _options$onStateChang,\n          _options$eventManager = options.eventManager,\n          eventManager = void 0 === _options$eventManager ? this.eventManager : _options$eventManager,\n          _options$scrollZoom = options.scrollZoom,\n          scrollZoom = void 0 === _options$scrollZoom || _options$scrollZoom,\n          _options$dragPan = options.dragPan,\n          dragPan = void 0 === _options$dragPan || _options$dragPan,\n          _options$dragRotate = options.dragRotate,\n          dragRotate = void 0 === _options$dragRotate || _options$dragRotate,\n          _options$doubleClickZ = options.doubleClickZoom,\n          doubleClickZoom = void 0 === _options$doubleClickZ || _options$doubleClickZ,\n          _options$touchZoom = options.touchZoom,\n          _options$touchRotate = options.touchRotate,\n          _options$keyboard = options.keyboard,\n          keyboard = void 0 === _options$keyboard || _options$keyboard;\n      this.onViewStateChange = onViewStateChange, this.onViewportChange = onViewportChange || onChangeViewport, this.onStateChange = onStateChange, this.mapStateProps && this.mapStateProps.height !== options.height && this.updateViewport(new MapState(options)), this.mapStateProps = options, this.eventManager !== eventManager && (this.eventManager = eventManager, this._events = {}, this.toggleEvents(this.events, !0));\n      var isInteractive = !!(this.onViewStateChange || this.onViewportChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom), this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate)), this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && touchZoomRotate), this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom), this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard), this.scrollZoom = scrollZoom, this.dragPan = dragPan, this.dragRotate = dragRotate, this.doubleClickZoom = doubleClickZoom, this.touchZoom = touchZoomRotate && (void 0 === _options$touchZoom || _options$touchZoom), this.touchRotate = touchZoomRotate && void 0 !== _options$touchRotate && _options$touchRotate, this.keyboard = keyboard;\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this = this;\n\n      this.eventManager && eventNames.forEach(function (eventName) {\n        _this._events[eventName] !== enabled && (_this._events[eventName] = enabled, enabled ? _this.eventManager.on(eventName, _this.handleEvent) : _this.eventManager.off(eventName, _this.handleEvent));\n      });\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event),\n          newMapState = this.mapState.panStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      return this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: !0\n      });\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      return this.isFunctionKeyPressed(event) || event.rightButton ? this._onPanRotate(event) : this._onPanMove(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd() {\n      var newMapState = this.mapState.panEnd().rotateEnd();\n      return this.updateViewport(newMapState, null, {\n        isDragging: !1\n      });\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) return !1;\n      var pos = this.getCenter(event),\n          newMapState = this.mapState.pan({\n        pos: pos\n      });\n      return this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: !0\n      });\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) return !1;\n\n      var deltaX = event.deltaX,\n          deltaY = event.deltaY,\n          _this$getCenter = this.getCenter(event),\n          _this$getCenter2 = _slicedToArray(_this$getCenter, 2),\n          centerY = _this$getCenter2[1],\n          startY = centerY - deltaY,\n          _this$mapState$getVie = this.mapState.getViewportProps(),\n          width = _this$mapState$getVie.width,\n          height = _this$mapState$getVie.height,\n          deltaScaleY = 0;\n\n      0 < deltaY ? _Mathabs(height - startY) > PITCH_MOUSE_THRESHOLD && (deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL) : 0 > deltaY && startY > PITCH_MOUSE_THRESHOLD && (deltaScaleY = 1 - centerY / startY), deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      var newMapState = this.mapState.rotate({\n        deltaScaleX: deltaX / width,\n        deltaScaleY: deltaScaleY\n      });\n      return this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: !0\n      });\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) return !1;\n      event.srcEvent.preventDefault();\n      var pos = this.getCenter(event),\n          delta = event.delta,\n          scale = 2 / (1 + Math.exp(-_Mathabs(delta * ZOOM_ACCEL)));\n      0 > delta && 0 !== scale && (scale = 1 / scale);\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      return this.updateViewport(newMapState, NO_TRANSITION_PROPS);\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event),\n          newMapState = this.mapState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      return this._state.startPinchRotation = event.rotation, this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: !0\n      });\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) return !1;\n      var newMapState = this.mapState;\n\n      if (this.touchZoom) {\n        var scale = event.scale,\n            pos = this.getCenter(event);\n        newMapState = newMapState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation,\n            startPinchRotation = this._state.startPinchRotation;\n        newMapState = newMapState.rotate({\n          deltaScaleX: -(rotation - startPinchRotation) / 180\n        });\n      }\n\n      return this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: !0\n      });\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd() {\n      var newMapState = this.mapState.zoomEnd().rotateEnd();\n      return this._state.startPinchRotation = 0, this.updateViewport(newMapState, null, {\n        isDragging: !1\n      });\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) return !1;\n      var pos = this.getCenter(event),\n          isZoomOut = this.isFunctionKeyPressed(event),\n          newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: isZoomOut ? .5 : 2\n      });\n      return this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        })\n      }));\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) return !1;\n      var newMapState,\n          funcKey = this.isFunctionKeyPressed(event),\n          mapStateProps = this.mapStateProps;\n\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          newMapState = funcKey ? this.getMapState({\n            zoom: mapStateProps.zoom - 2\n          }) : this.getMapState({\n            zoom: mapStateProps.zoom - 1\n          });\n          break;\n\n        case 187:\n          newMapState = funcKey ? this.getMapState({\n            zoom: mapStateProps.zoom + 2\n          }) : this.getMapState({\n            zoom: mapStateProps.zoom + 1\n          });\n          break;\n\n        case 37:\n          newMapState = funcKey ? this.getMapState({\n            bearing: mapStateProps.bearing - 15\n          }) : this.mapState.pan({\n            pos: [100, 0],\n            startPos: [0, 0]\n          });\n          break;\n\n        case 39:\n          newMapState = funcKey ? this.getMapState({\n            bearing: mapStateProps.bearing + 15\n          }) : this.mapState.pan({\n            pos: [-100, 0],\n            startPos: [0, 0]\n          });\n          break;\n\n        case 38:\n          newMapState = funcKey ? this.getMapState({\n            pitch: mapStateProps.pitch + 10\n          }) : this.mapState.pan({\n            pos: [0, 100],\n            startPos: [0, 0]\n          });\n          break;\n\n        case 40:\n          newMapState = funcKey ? this.getMapState({\n            pitch: mapStateProps.pitch - 10\n          }) : this.mapState.pan({\n            pos: [0, -100],\n            startPos: [0, 0]\n          });\n          break;\n\n        default:\n          return !1;\n      }\n\n      return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n    }\n  }]), MapControls;\n}();\n\nexport { MapControls as default };","map":null,"metadata":{},"sourceType":"module"}