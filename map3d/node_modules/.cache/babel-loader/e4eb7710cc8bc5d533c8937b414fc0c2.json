{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Replacement for the external assert method to reduce bundle size\n// Since GeoJSON format issues are common to users we do show messages in\n// this case\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"deck.gl: \".concat(message));\n  }\n}\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\n\nexport function getGeojsonFeatures(geojson) {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n\n    default:\n      // Assume it's a geometry, we'll check type in separateGeojsonFeatures\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{\n        geometry: geojson\n      }];\n  }\n} // Linearize\n\nexport function separateGeojsonFeatures(features) {\n  var separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n\n  for (var featureIndex = 0; featureIndex < features.length; featureIndex++) {\n    var feature = features[featureIndex];\n    assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n    var geometry = feature.geometry;\n    var sourceFeature = {\n      feature: feature,\n      index: featureIndex\n    };\n\n    if (geometry.type === 'GeometryCollection') {\n      assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      var geometries = geometry.geometries;\n\n      for (var i = 0; i < geometries.length; i++) {\n        var subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, sourceFeature);\n      }\n    } else {\n      separateGeometry(geometry, separated, sourceFeature);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, sourceFeature) {\n  var type = geometry.type,\n      coordinates = geometry.coordinates;\n  var pointFeatures = separated.pointFeatures,\n      lineFeatures = separated.lineFeatures,\n      polygonFeatures = separated.polygonFeatures,\n      polygonOutlineFeatures = separated.polygonOutlineFeatures;\n  checkCoordinates(type, coordinates); // Split each feature, but keep track of the source feature and index (for Multi* geometries)\n\n  switch (type) {\n    case 'Point':\n      pointFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      break;\n\n    case 'MultiPoint':\n      coordinates.forEach(function (point) {\n        pointFeatures.push({\n          geometry: {\n            type: 'Point',\n            coordinates: point\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'LineString':\n      lineFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      break;\n\n    case 'MultiLineString':\n      // Break multilinestrings into multiple lines\n      coordinates.forEach(function (path) {\n        lineFeatures.push({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'Polygon':\n      polygonFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      }); // Break polygon into multiple lines\n\n      coordinates.forEach(function (path) {\n        polygonOutlineFeatures.push({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'MultiPolygon':\n      // Break multipolygons into multiple polygons\n      coordinates.forEach(function (polygon) {\n        polygonFeatures.push({\n          geometry: {\n            type: 'Polygon',\n            coordinates: polygon\n          },\n          sourceFeature: sourceFeature\n        }); // Break polygon into multiple lines\n\n        polygon.forEach(function (path) {\n          polygonOutlineFeatures.push({\n            geometry: {\n              type: 'LineString',\n              coordinates: path\n            },\n            sourceFeature: sourceFeature\n          });\n        });\n      });\n      break;\n\n    default:\n  }\n}\n/**\n * Returns the source feature that was passed to `separateGeojsonFeatures`\n */\n\n\nexport function unwrapSourceFeature(wrappedFeature) {\n  // The feature provided by the user is under `sourceFeature.feature`\n  return wrappedFeature.sourceFeature.feature;\n}\n/**\n * Returns the index of the source feature that was passed to `separateGeojsonFeatures`\n */\n\nexport function unwrapSourceFeatureIndex(wrappedFeature) {\n  // The index of the feature provided by the user is under `sourceFeature.index`\n  return wrappedFeature.sourceFeature.index;\n}\n/**\n * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,\n * only the following:\n   - geometry.type is supported\n   - geometry.coordinate has correct nesting level\n */\n\nvar COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nfunction checkCoordinates(type, coordinates) {\n  var nestLevel = COORDINATE_NEST_LEVEL[type];\n  assert(nestLevel, \"Unknown GeoJSON type \".concat(type));\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  assert(coordinates && Number.isFinite(coordinates[0]), \"\".concat(type, \" coordinates are malformed\"));\n}","map":null,"metadata":{},"sourceType":"module"}