{"ast":null,"code":"function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/* eslint-disable complexity */\n\n\nimport assert from '../utils/assert';\nimport { Buffer } from '../webgl';\nimport GL from '../constants';\n\nvar Attribute =\n/*#__PURE__*/\nfunction () {\n  function Attribute(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Attribute);\n\n    var _opts$id = opts.id,\n        id = _opts$id === void 0 ? 'unnamed-attribute' : _opts$id,\n        type = opts.type,\n        _opts$isIndexed = opts.isIndexed,\n        isIndexed = _opts$isIndexed === void 0 ? false : _opts$isIndexed; // Options that cannot be changed later\n\n    this.gl = gl;\n    this.id = id;\n    this.isIndexed = isIndexed;\n    this.target = isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER;\n    this.type = type; // Initialize the attribute descriptor, with WebGL and metadata fields\n\n    this.value = null;\n    this.externalBuffer = null;\n    this.buffer = null;\n    this.userData = {}; // Reserved for application\n\n    this.update(opts); // Sanity - no app fields on our attributes. Use userData instead.\n\n    Object.seal(this); // Check all fields and generate helpful error messages\n\n    this._validateAttributeDefinition();\n  }\n\n  _createClass(Attribute, [{\n    key: \"delete\",\n    value: function _delete() {\n      if (this.buffer) {\n        this.buffer.delete();\n        this.buffer = null;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref) {\n      var value = _ref.value,\n          buffer = _ref.buffer,\n          _ref$size = _ref.size,\n          size = _ref$size === void 0 ? this.size : _ref$size,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? this.offset || 0 : _ref$offset,\n          _ref$stride = _ref.stride,\n          stride = _ref$stride === void 0 ? this.stride || 0 : _ref$stride,\n          _ref$normalized = _ref.normalized,\n          normalized = _ref$normalized === void 0 ? this.normalized || false : _ref$normalized,\n          _ref$integer = _ref.integer,\n          integer = _ref$integer === void 0 ? this.integer || false : _ref$integer,\n          _ref$instanced = _ref.instanced,\n          instanced = _ref$instanced === void 0 ? this.instanced || 0 : _ref$instanced,\n          _ref$isGeneric = _ref.isGeneric,\n          isGeneric = _ref$isGeneric === void 0 ? this.isGeneric || false : _ref$isGeneric,\n          isInstanced = _ref.isInstanced;\n      this.size = size;\n      this.offset = offset;\n      this.stride = stride;\n      this.normalized = normalized;\n      this.integer = integer;\n      this.isGeneric = isGeneric;\n\n      if (isInstanced !== undefined) {\n        this.instanced = isInstanced ? 1 : 0;\n      } else {\n        this.instanced = instanced;\n      }\n\n      if (buffer) {\n        this.externalBuffer = buffer;\n        this.type = buffer.type;\n      } else if (value) {\n        this.externalBuffer = null;\n        this.value = value;\n\n        if (!isGeneric) {\n          // Create buffer if needed\n          this.buffer = this.buffer || new Buffer(this.gl, {\n            target: this.target,\n            type: this.type\n          });\n          this.buffer.setData({\n            data: value\n          });\n          this.type = this.buffer.type;\n        }\n      }\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      if (this.isGeneric) {\n        return null;\n      }\n\n      return this.externalBuffer || this.buffer;\n    }\n  }, {\n    key: \"_validateAttributeDefinition\",\n    value: function _validateAttributeDefinition() {\n      assert(this.size >= 1 && this.size <= 4, \"Attribute definition for \".concat(this.id, \" invalid size\"));\n    }\n  }]);\n\n  return Attribute;\n}();\n\nexport { Attribute as default };","map":null,"metadata":{},"sourceType":"module"}