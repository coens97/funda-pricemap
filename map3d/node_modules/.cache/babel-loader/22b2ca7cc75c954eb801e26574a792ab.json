{"ast":null,"code":"import { Buffer } from 'luma.gl';\nimport { padArray } from '../utils/array-utils';\nvar ATTRIBUTE_MAPPING = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\nexport function getShaders(transitions) {\n  // Build shaders\n  var varyings = [];\n  var attributeDeclarations = [];\n  var uniformsDeclarations = [];\n  var varyingDeclarations = [];\n  var calculations = [];\n\n  for (var attributeName in transitions) {\n    var transition = transitions[attributeName];\n    var attributeType = ATTRIBUTE_MAPPING[transition.attribute.size];\n\n    if (attributeType) {\n      transition.bufferIndex = varyings.length;\n      varyings.push(attributeName);\n      attributeDeclarations.push(\"attribute \".concat(attributeType, \" \").concat(attributeName, \"From;\"));\n      attributeDeclarations.push(\"attribute \".concat(attributeType, \" \").concat(attributeName, \"To;\"));\n      uniformsDeclarations.push(\"uniform float \".concat(attributeName, \"Time;\"));\n      varyingDeclarations.push(\"varying \".concat(attributeType, \" \").concat(attributeName, \";\"));\n      calculations.push(\"\".concat(attributeName, \" = mix(\").concat(attributeName, \"From, \").concat(attributeName, \"To,\\n        \").concat(attributeName, \"Time);\"));\n    }\n  }\n\n  var vs = \"\\n#define SHADER_NAME feedback-vertex-shader\\n\".concat(attributeDeclarations.join('\\n'), \"\\n\").concat(uniformsDeclarations.join('\\n'), \"\\n\").concat(varyingDeclarations.join('\\n'), \"\\n\\nvoid main(void) {\\n  \").concat(calculations.join('\\n'), \"\\n  gl_Position = vec4(0.0);\\n}\\n\");\n  var fs = \"#define SHADER_NAME feedback-fragment-shader\\n\\nprecision highp float;\\n\\n\".concat(varyingDeclarations.join('\\n'), \"\\n\\nvoid main(void) {\\n  gl_FragColor = vec4(0.0);\\n}\\n\");\n  return {\n    vs: vs,\n    fs: fs,\n    varyings: varyings\n  };\n}\nexport function getBuffers(transitions) {\n  var sourceBuffers = {};\n  var feedbackBuffers = {};\n\n  for (var attributeName in transitions) {\n    var _transitions$attribut = transitions[attributeName],\n        fromState = _transitions$attribut.fromState,\n        toState = _transitions$attribut.toState,\n        buffer = _transitions$attribut.buffer;\n    sourceBuffers[\"\".concat(attributeName, \"From\")] = fromState;\n    sourceBuffers[\"\".concat(attributeName, \"To\")] = toState;\n    feedbackBuffers[\"\".concat(attributeName)] = buffer;\n  }\n\n  return {\n    sourceBuffers: sourceBuffers,\n    feedbackBuffers: feedbackBuffers\n  };\n}\nexport function padBuffer(_ref) {\n  var fromState = _ref.fromState,\n      toState = _ref.toState,\n      fromLength = _ref.fromLength,\n      toLength = _ref.toLength,\n      fromBufferLayout = _ref.fromBufferLayout,\n      toBufferLayout = _ref.toBufferLayout,\n      _ref$getData = _ref.getData,\n      getData = _ref$getData === void 0 ? function (x) {\n    return x;\n  } : _ref$getData;\n  var hasBufferLayout = fromBufferLayout && toBufferLayout; // check if buffer needs to be padded\n\n  if (!hasBufferLayout && fromLength >= toLength || !(fromState instanceof Buffer)) {\n    return;\n  }\n\n  var data = new Float32Array(toLength);\n  var fromData = fromState.getData({});\n  var value = toState.value,\n      buffer = toState.buffer,\n      size = toState.size,\n      constant = toState.constant;\n  var toData = value || buffer.getData({});\n  var getMissingData = constant ? function (i, chunk) {\n    return getData(value, chunk);\n  } : function (i, chunk) {\n    return getData(toData.subarray(i, i + size), chunk);\n  };\n  padArray({\n    source: fromData,\n    target: data,\n    sourceLayout: fromBufferLayout,\n    targetLayout: toBufferLayout,\n    size: toState.size,\n    getData: getMissingData\n  });\n  fromState.setData({\n    data: data\n  });\n}","map":null,"metadata":{},"sourceType":"module"}