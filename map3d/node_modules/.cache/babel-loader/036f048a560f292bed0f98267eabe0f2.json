{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { hexbin } from 'd3-hexbin';\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Array} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\n\nexport function pointToHexbin(_ref, viewport) {\n  var data = _ref.data,\n      radius = _ref.radius,\n      getPosition = _ref.getPosition; // get hexagon radius in mercator world unit\n\n  var radiusInPixel = getRadiusInPixel(radius, viewport); // add world space coordinates to points\n\n  var screenPoints = data.map(function (pt) {\n    return Object.assign({\n      screenCoord: viewport.projectFlat(getPosition(pt))\n    }, pt);\n  });\n  var newHexbin = hexbin().radius(radiusInPixel).x(function (d) {\n    return d.screenCoord[0];\n  }).y(function (d) {\n    return d.screenCoord[1];\n  });\n  var hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map(function (hex, index) {\n      return {\n        centroid: viewport.unprojectFlat([hex.x, hex.y]),\n        points: hex,\n        index: index\n      };\n    })\n  };\n}\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n\n * @return {Number} radius in mercator world spcae coordinates\n */\n\nexport function getRadiusInPixel(radius, viewport) {\n  var _viewport$getDistance = viewport.getDistanceScales(),\n      pixelsPerMeter = _viewport$getDistance.pixelsPerMeter; // x, y distance should be the same\n\n\n  return radius * pixelsPerMeter[0];\n}","map":null,"metadata":{},"sourceType":"module"}