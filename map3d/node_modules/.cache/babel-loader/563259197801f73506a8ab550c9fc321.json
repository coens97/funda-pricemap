{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: !0\n});\n\nvar _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n},\n    _createClass = function () {\n  function defineProperties(target, props) {\n    for (var descriptor, i = 0; i < props.length; i++) {\n      descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 'value' in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;\n  };\n}(),\n    _globals = require('./utils/globals'),\n    _localStorage = require('./utils/local-storage'),\n    _localStorage2 = _interopRequireDefault(_localStorage),\n    _timestamp = require('./utils/timestamp'),\n    _formatters = require('./utils/formatters'),\n    _color = require('./utils/color'),\n    _autobind = require('./utils/autobind'),\n    _assert = require('../lib/utils/assert'),\n    _assert2 = _interopRequireDefault(_assert);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n\n  return Array.from(arr);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) throw new TypeError('Cannot call a class as a function');\n}\n\nvar originalConsole = {\n  debug: _globals.isBrowser ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n},\n    DEFAULT_SETTINGS = {\n  enabled: !1,\n  priority: 0\n};\n\nfunction noop() {}\n\nvar cache = {};\n\nfunction getTableHeader(table) {\n  for (var key in table) {\n    for (var title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n\n  return 'empty';\n}\n\nvar Log = function () {\n  function Log() {\n    var _ref = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},\n        id = _ref.id;\n\n    _classCallCheck(this, Log), this.id = id, this.VERSION = _globals.VERSION, this._startTs = (0, _timestamp.getTimestamp)(), this._deltaTs = (0, _timestamp.getTimestamp)(), this.LOG_THROTTLE_TIMEOUT = 0, this._storage = new _localStorage2.default('__probe-' + this.id + '__', DEFAULT_SETTINGS), this.userData = {}, this.timeStamp(this.id + ' started'), (0, _autobind.autobind)(this), Object.seal(this);\n  }\n\n  return _createClass(Log, [{\n    key: 'isEnabled',\n    value: function isEnabled() {\n      return this._storage.config.enabled;\n    }\n  }, {\n    key: 'getPriority',\n    value: function getPriority() {\n      return this._storage.config.priority;\n    }\n  }, {\n    key: 'getLevel',\n    value: function getLevel() {\n      return this._storage.config.priority;\n    }\n  }, {\n    key: 'getTotal',\n    value: function getTotal() {\n      return +((0, _timestamp.getTimestamp)() - this._startTs).toPrecision(10);\n    }\n  }, {\n    key: 'getDelta',\n    value: function getDelta() {\n      return +((0, _timestamp.getTimestamp)() - this._deltaTs).toPrecision(10);\n    }\n  }, {\n    key: 'enable',\n    value: function enable() {\n      var enabled = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0];\n      return this._storage.updateConfiguration({\n        enabled: enabled\n      }), this;\n    }\n  }, {\n    key: 'setLevel',\n    value: function setLevel(level) {\n      return this._storage.updateConfiguration({\n        priority: level\n      }), this;\n    }\n  }, {\n    key: 'warn',\n    value: function warn(message) {\n      for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return this._getLogFunction({\n        message: message,\n        args: args,\n        method: originalConsole.warn,\n        once: !0\n      });\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      for (var _len2 = arguments.length, args = Array(1 < _len2 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return this._getLogFunction({\n        message: message,\n        args: args,\n        method: originalConsole.error\n      });\n    }\n  }, {\n    key: 'deprecated',\n    value: function deprecated(oldUsage, newUsage) {\n      return this.warn('`' + oldUsage + '` is deprecated and will be removed in a later version. Use `' + newUsage + '` instead');\n    }\n  }, {\n    key: 'removed',\n    value: function removed(oldUsage, newUsage) {\n      return this.error('`' + oldUsage + '` has been removed. Use `' + newUsage + '` instead');\n    }\n  }, {\n    key: 'probe',\n    value: function probe(priority, message) {\n      for (var _len3 = arguments.length, args = Array(2 < _len3 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        args[_key3 - 2] = arguments[_key3];\n      }\n\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        args: args,\n        method: originalConsole.log,\n        time: !0,\n        once: !0\n      });\n    }\n  }, {\n    key: 'log',\n    value: function log(priority, message) {\n      for (var _len4 = arguments.length, args = Array(2 < _len4 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n        args[_key4 - 2] = arguments[_key4];\n      }\n\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        args: args,\n        method: originalConsole.debug\n      });\n    }\n  }, {\n    key: 'info',\n    value: function info(priority, message) {\n      for (var _len5 = arguments.length, args = Array(2 < _len5 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n        args[_key5 - 2] = arguments[_key5];\n      }\n\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        args: args,\n        method: console.info\n      });\n    }\n  }, {\n    key: 'once',\n    value: function once(priority, message) {\n      for (var _len6 = arguments.length, args = Array(2 < _len6 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n        args[_key6 - 2] = arguments[_key6];\n      }\n\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        args: args,\n        method: originalConsole.debug || originalConsole.info,\n        once: !0\n      });\n    }\n  }, {\n    key: 'table',\n    value: function table(priority, _table, columns) {\n      if (_table) {\n        var tag = getTableHeader(_table);\n        return this._getLogFunction({\n          priority: priority,\n          message: _table,\n          args: columns && [columns],\n          tag: tag,\n          method: console.table || noop\n        });\n      }\n\n      return noop;\n    }\n  }, {\n    key: 'image',\n    value: function image(_ref2) {\n      var priority = _ref2.priority,\n          _image = _ref2.image,\n          _ref2$message = _ref2.message,\n          message = void 0 === _ref2$message ? '' : _ref2$message,\n          _ref2$scale = _ref2.scale,\n          scale = void 0 === _ref2$scale ? 1 : _ref2$scale;\n      return priority > this.getPriority() ? noop : _globals.isBrowser ? this._logImageInBrowser({\n        image: _image,\n        message: message,\n        scale: scale\n      }) : this._logImageInNode({\n        image: _image,\n        message: message,\n        scale: scale\n      });\n    }\n  }, {\n    key: '_logImageInNode',\n    value: function _logImageInNode(_ref3) {\n      var image = _ref3.image,\n          _ref3$message = _ref3.message,\n          message = void 0 === _ref3$message ? '' : _ref3$message,\n          _ref3$scale = _ref3.scale,\n          scale = void 0 === _ref3$scale ? 1 : _ref3$scale,\n          asciify = null;\n\n      try {\n        asciify = module.require('asciify-image');\n      } catch (error) {}\n\n      return asciify ? function () {\n        return asciify(image, {\n          fit: 'box',\n          width: Math.round(80 * scale) + '%'\n        }).then(function (data) {\n          return console.log(data);\n        });\n      } : noop;\n    }\n  }, {\n    key: '_logImageInBrowser',\n    value: function _logImageInBrowser(_ref4) {\n      var image = _ref4.image,\n          _ref4$message = _ref4.message,\n          message = void 0 === _ref4$message ? '' : _ref4$message,\n          _ref4$scale = _ref4.scale,\n          scale = void 0 === _ref4$scale ? 1 : _ref4$scale;\n\n      if ('string' == typeof image) {\n        var img = new Image();\n        return img.onload = function () {\n          var _console,\n              args = (0, _formatters.formatImage)(img, message, scale);\n\n          (_console = console).log.apply(_console, _toConsumableArray(args));\n        }, img.src = image, noop;\n      }\n\n      var element = image.nodeName || '';\n\n      if ('img' === element.toLowerCase()) {\n        var _console2;\n\n        return (_console2 = console).log.apply(_console2, _toConsumableArray((0, _formatters.formatImage)(image, message, scale))), noop;\n      }\n\n      if ('canvas' === element.toLowerCase()) {\n        var _img = new Image();\n\n        return _img.onload = function () {\n          var _console3;\n\n          return (_console3 = console).log.apply(_console3, _toConsumableArray((0, _formatters.formatImage)(_img, message, scale)));\n        }, _img.src = image.toDataURL(), noop;\n      }\n\n      return noop;\n    }\n  }, {\n    key: 'time',\n    value: function time(priority, message) {\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        method: console.time ? console.time : console.info\n      });\n    }\n  }, {\n    key: 'timeEnd',\n    value: function timeEnd(priority, message) {\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        method: console.timeEnd ? console.timeEnd : console.info\n      });\n    }\n  }, {\n    key: 'timeStamp',\n    value: function timeStamp(priority, message) {\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        method: console.timeStamp || noop\n      });\n    }\n  }, {\n    key: 'group',\n    value: function group(priority, message) {\n      var opts = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {\n        collapsed: !1\n      };\n      opts = this._normalizeArguments({\n        priority: priority,\n        message: message,\n        opts: opts\n      });\n      var _opts = opts,\n          collapsed = _opts.collapsed;\n      return this._getLogFunction({\n        priority: priority,\n        message: message,\n        opts: opts,\n        method: (collapsed ? console.groupCollapsed : console.group) || console.info\n      });\n    }\n  }, {\n    key: 'groupCollapsed',\n    value: function groupCollapsed(priority, message) {\n      var opts = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      return this.group(priority, message, Object.assign({}, opts, {\n        collapsed: !0\n      }));\n    }\n  }, {\n    key: 'groupEnd',\n    value: function groupEnd(priority) {\n      return this._getLogFunction({\n        priority: priority,\n        message: '',\n        method: console.groupEnd || noop\n      });\n    }\n  }, {\n    key: 'withGroup',\n    value: function withGroup(priority, message, func) {\n      var opts = this._normalizeArguments({\n        priority: priority,\n        message: message\n      });\n\n      this.group(opts);\n\n      try {\n        func();\n      } finally {\n        this.groupEnd(opts.message);\n      }\n    }\n  }, {\n    key: 'trace',\n    value: function trace() {\n      console.trace && console.trace();\n    }\n  }, {\n    key: '_shouldLog',\n    value: function _shouldLog(priority) {\n      return priority = this._normalizePriority(priority), 0 === priority || this.isEnabled() && this.getPriority() >= priority;\n    }\n  }, {\n    key: '_getElapsedTime',\n    value: function _getElapsedTime() {\n      var total = this.getTotal(),\n          delta = this.getDelta();\n      return this._deltaTs = (0, _timestamp.getTimestamp)(), {\n        total: total,\n        delta: delta\n      };\n    }\n  }, {\n    key: '_getLogFunction',\n    value: function _getLogFunction(opts) {\n      if (this._shouldLog(opts.priority)) {\n        var _opts2 = opts,\n            method = _opts2.method;\n        opts = this._parseArguments(opts), (0, _assert2.default)(method);\n        var _opts3 = opts,\n            message = _opts3.message,\n            tag = opts.tag || opts.message;\n        if (opts.once) if (!cache[tag]) cache[tag] = (0, _timestamp.getTimestamp)();else return noop;\n        return message = this._decorateMessage(message, opts), method.bind.apply(method, [console, message].concat(_toConsumableArray(opts.args)));\n      }\n\n      return noop;\n    }\n  }, {\n    key: '_parseArguments',\n    value: function _parseArguments(options) {\n      var normOpts = this._normalizeArguments(options),\n          _getElapsedTime2 = this._getElapsedTime(),\n          delta = _getElapsedTime2.delta,\n          total = _getElapsedTime2.total;\n\n      return Object.assign(options, normOpts, {\n        delta: delta,\n        total: total\n      });\n    }\n  }, {\n    key: '_normalizePriority',\n    value: function _normalizePriority(priority) {\n      var resolvedPriority;\n\n      switch ('undefined' == typeof priority ? 'undefined' : _typeof(priority)) {\n        case 'number':\n          resolvedPriority = priority;\n          break;\n\n        case 'object':\n          resolvedPriority = priority.priority || 0;\n          break;\n\n        default:\n          resolvedPriority = 0;\n      }\n\n      return (0, _assert2.default)(Number.isFinite(resolvedPriority) && 0 <= resolvedPriority), resolvedPriority;\n    }\n  }, {\n    key: '_normalizeArguments',\n    value: function _normalizeArguments(_ref5) {\n      var priority = _ref5.priority,\n          message = _ref5.message,\n          _ref5$args = _ref5.args,\n          args = void 0 === _ref5$args ? [] : _ref5$args,\n          opts = _ref5.opts,\n          newOpts = {\n        priority: this._normalizePriority(priority),\n        message: message,\n        args: args\n      };\n\n      switch ('undefined' == typeof priority ? 'undefined' : _typeof(priority)) {\n        case 'string':\n        case 'function':\n          void 0 !== message && args.unshift(message), Object.assign(newOpts, {\n            message: priority\n          });\n          break;\n\n        case 'object':\n          Object.assign(newOpts, priority);\n          break;\n\n        default:\n      }\n\n      return 'function' == typeof newOpts.message && (newOpts.message = this._shouldLog(newOpts.priority) ? newOpts.message() : ''), (0, _assert2.default)('string' == typeof newOpts.message || 'object' === _typeof(newOpts.message)), Object.assign(newOpts, opts);\n    }\n  }, {\n    key: '_decorateMessage',\n    value: function _decorateMessage(message, opts) {\n      if ('string' == typeof message) {\n        var time = '';\n\n        if (opts.time) {\n          var _getElapsedTime3 = this._getElapsedTime(),\n              total = _getElapsedTime3.total;\n\n          time = (0, _formatters.leftPad)((0, _formatters.formatTime)(total));\n        }\n\n        message = opts.time ? this.id + ': ' + time + '  ' + message : this.id + ': ' + message, message = (0, _color.addColor)(message, opts.color, opts.background);\n      }\n\n      return message;\n    }\n  }, {\n    key: 'priority',\n    set: function set(newPriority) {\n      return this._storage.updateConfiguration({\n        priority: newPriority\n      }), this;\n    },\n    get: function get() {\n      return this._storage.config.priority;\n    }\n  }]), Log;\n}();\n\nexports.default = Log, Log.VERSION = _globals.VERSION;","map":null,"metadata":{},"sourceType":"script"}