{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME line-layer-vertex-shader\\n\\nattribute vec3 positions;\\nattribute vec3 instanceSourcePositions;\\nattribute vec3 instanceTargetPositions;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\nuniform vec2 viewportSize;\\nuniform float strokeWidth;\\nuniform float opacity;\\nuniform float renderPickingBuffer;\\n\\nvarying vec4 vColor;\\n\\n// offset vector by strokeWidth pixels\\n// offset_direction is -1 (left) or 1 (right)\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace * viewportSize);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  vec2 offset_screenspace = dir_screenspace * offset_direction * strokeWidth / 2.0;\\n  vec2 offset_clipspace = offset_screenspace / viewportSize * 2.0;\\n\\n  return offset_clipspace;\\n}\\n\\nvoid main(void) {\\n  // Position\\n  vec3 sourcePos = project_position(instanceSourcePositions);\\n  vec3 targetPos = project_position(instanceTargetPositions);\\n  vec4 source = project_to_clipspace(vec4(sourcePos, 1.0));\\n  vec4 target = project_to_clipspace(vec4(targetPos, 1.0));\\n\\n  // linear interpolation of source & target to pick right coord\\n  float segmentIndex = positions.x;\\n  vec4 p = mix(source, target, segmentIndex);\\n\\n  // extrude\\n  vec2 offset = getExtrusionOffset(target.xy - source.xy, positions.y);\\n  gl_Position = p + vec4(offset, 0.0, 0.0);\\n\\n  // Color\\n  vec4 color = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\\n  vec4 pickingColor = vec4(instancePickingColors / 255., 1.);\\n  vColor = mix(\\n    color,\\n    pickingColor,\\n    renderPickingBuffer\\n  );\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}