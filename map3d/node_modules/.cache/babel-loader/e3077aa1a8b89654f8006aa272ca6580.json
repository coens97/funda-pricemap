{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport { makeFontAtlas, DEFAULT_CHAR_SET } from './font-atlas';\nvar TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nvar ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nvar DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar MISSING_CHAR_WIDTH = 32;\nvar defaultProps = {\n  fp64: false,\n  sizeScale: 1,\n  fontFamily: DEFAULT_FONT_FAMILY,\n  characterSet: DEFAULT_CHAR_SET,\n  getText: function getText(x) {\n    return x.text;\n  },\n  getPosition: function getPosition(x) {\n    return x.position;\n  },\n  getColor: DEFAULT_COLOR,\n  getSize: 32,\n  getAngle: 0,\n  getTextAnchor: 'middle',\n  getAlignmentBaseline: 'center',\n  getPixelOffset: [0, 0]\n};\n\nvar TextLayer =\n/*#__PURE__*/\nfunction (_CompositeLayer) {\n  _inherits(TextLayer, _CompositeLayer);\n\n  function TextLayer() {\n    _classCallCheck(this, TextLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextLayer).apply(this, arguments));\n  }\n\n  _createClass(TextLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n      var fontChanged = oldProps.fontFamily !== props.fontFamily || oldProps.characterSet !== props.characterSet;\n\n      if (fontChanged) {\n        this.updateFontAtlas(props.fontFamily, props.characterSet);\n      }\n\n      if (changeFlags.dataChanged || fontChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText)) {\n        this.transformStringToLetters();\n      }\n    }\n  }, {\n    key: \"updateFontAtlas\",\n    value: function updateFontAtlas(fontFamily, characterSet) {\n      var gl = this.context.gl;\n\n      var _makeFontAtlas = makeFontAtlas(gl, {\n        fontFamily: fontFamily,\n        characterSet: characterSet\n      }),\n          scale = _makeFontAtlas.scale,\n          mapping = _makeFontAtlas.mapping,\n          texture = _makeFontAtlas.texture;\n\n      this.setState({\n        scale: scale,\n        iconAtlas: texture,\n        iconMapping: mapping\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      return Object.assign(info, {\n        // override object with original data\n        object: info.object && info.object.object\n      });\n    }\n  }, {\n    key: \"transformStringToLetters\",\n    value: function transformStringToLetters() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getText = _this$props.getText;\n      var iconMapping = this.state.iconMapping;\n\n      if (!data || data.length === 0) {\n        return;\n      }\n\n      var transformedData = [];\n      data.forEach(function (val) {\n        var text = getText(val);\n\n        if (text) {\n          var letters = Array.from(text);\n          var offsets = [0];\n          var offsetLeft = 0;\n          letters.forEach(function (letter, i) {\n            var datum = {\n              text: letter,\n              index: i,\n              offsets: offsets,\n              len: text.length,\n              object: val\n            };\n            var frame = iconMapping[letter];\n\n            if (frame) {\n              offsetLeft += frame.width;\n            } else {\n              log.warn(\"Missing character: \".concat(letter))();\n              offsetLeft += MISSING_CHAR_WIDTH;\n            }\n\n            offsets.push(offsetLeft);\n            transformedData.push(datum);\n          });\n        }\n      });\n      this.setState({\n        data: transformedData\n      });\n    }\n  }, {\n    key: \"getLetterOffset\",\n    value: function getLetterOffset(datum) {\n      return datum.offsets[datum.index];\n    }\n  }, {\n    key: \"getTextLength\",\n    value: function getTextLength(datum) {\n      return datum.offsets[datum.offsets.length - 1];\n    }\n  }, {\n    key: \"_getAccessor\",\n    value: function _getAccessor(accessor) {\n      if (typeof accessor === 'function') {\n        return function (x) {\n          return accessor(x.object);\n        };\n      }\n\n      return accessor;\n    }\n  }, {\n    key: \"getAnchorXFromTextAnchor\",\n    value: function getAnchorXFromTextAnchor(getTextAnchor) {\n      return function (x) {\n        var textAnchor = typeof getTextAnchor === 'function' ? getTextAnchor(x.object) : getTextAnchor;\n\n        if (!TEXT_ANCHOR.hasOwnProperty(textAnchor)) {\n          throw new Error(\"Invalid text anchor parameter: \".concat(textAnchor));\n        }\n\n        return TEXT_ANCHOR[textAnchor];\n      };\n    }\n  }, {\n    key: \"getAnchorYFromAlignmentBaseline\",\n    value: function getAnchorYFromAlignmentBaseline(getAlignmentBaseline) {\n      return function (x) {\n        var alignmentBaseline = typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(x.object) : getAlignmentBaseline;\n\n        if (!ALIGNMENT_BASELINE.hasOwnProperty(alignmentBaseline)) {\n          throw new Error(\"Invalid alignment baseline parameter: \".concat(alignmentBaseline));\n        }\n\n        return ALIGNMENT_BASELINE[alignmentBaseline];\n      };\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          scale = _this$state.scale,\n          iconAtlas = _this$state.iconAtlas,\n          iconMapping = _this$state.iconMapping;\n\n      if (!iconMapping || !iconAtlas || !data) {\n        return null;\n      }\n\n      var _this$props2 = this.props,\n          _getPosition = _this$props2.getPosition,\n          getColor = _this$props2.getColor,\n          getSize = _this$props2.getSize,\n          getAngle = _this$props2.getAngle,\n          getTextAnchor = _this$props2.getTextAnchor,\n          getAlignmentBaseline = _this$props2.getAlignmentBaseline,\n          getPixelOffset = _this$props2.getPixelOffset,\n          fp64 = _this$props2.fp64,\n          sizeScale = _this$props2.sizeScale,\n          transitions = _this$props2.transitions,\n          updateTriggers = _this$props2.updateTriggers;\n      return [new MultiIconLayer(this.getSubLayerProps({\n        id: 'text-multi-icon-layer',\n        data: data,\n        iconAtlas: iconAtlas,\n        iconMapping: iconMapping,\n        getIcon: function getIcon(d) {\n          return d.text;\n        },\n        getPosition: function getPosition(d) {\n          return _getPosition(d.object);\n        },\n        getShiftInQueue: function getShiftInQueue(d) {\n          return _this.getLetterOffset(d);\n        },\n        getLengthOfQueue: function getLengthOfQueue(d) {\n          return _this.getTextLength(d);\n        },\n        getColor: this._getAccessor(getColor),\n        getSize: this._getAccessor(getSize),\n        getAngle: this._getAccessor(getAngle),\n        getAnchorX: this.getAnchorXFromTextAnchor(getTextAnchor),\n        getAnchorY: this.getAnchorYFromAlignmentBaseline(getAlignmentBaseline),\n        getPixelOffset: this._getAccessor(getPixelOffset),\n        fp64: fp64,\n        sizeScale: sizeScale * scale,\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getColor: transitions.getColor,\n          getSize: transitions.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset\n        },\n        updateTriggers: {\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getColor: updateTriggers.getColor,\n          getSize: updateTriggers.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getAnchorX: updateTriggers.getTextAnchor,\n          getAnchorY: updateTriggers.getAlignmentBaseline\n        }\n      }))];\n    }\n  }]);\n\n  return TextLayer;\n}(CompositeLayer);\n\nexport { TextLayer as default };\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}