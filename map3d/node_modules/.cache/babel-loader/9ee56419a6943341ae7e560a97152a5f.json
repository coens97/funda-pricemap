{"ast":null,"code":"// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable no-shadow */\n// TODO - remove\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return parseFloat(value.toPrecision(precision));\n}\nexport function formatAngle(value) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$precision = _ref2.precision,\n      precision = _ref2$precision === void 0 ? config.precision || 4 : _ref2$precision,\n      _ref2$printDegrees = _ref2.printDegrees,\n      printDegrees = _ref2$printDegrees === void 0 ? config.printAngles : _ref2$printDegrees;\n\n  value = printDegrees ? degrees(value) : value;\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision))).concat(printDegrees ? 'Â°' : '');\n} // Returns true if value is either an array or a typed array\n// Note: does not return true for ArrayBuffers and DataViews\n\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n} // If the array has a clone function, calls it, otherwise returns a copy\n\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n} // If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\n\nfunction map(value, func) {\n  if (isArray(value)) {\n    var result = clone(value);\n\n    for (var i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n} //\n// GLSL math function equivalents\n// Works on both single values and vectors\n//\n\n\nexport function radians(degrees) {\n  return map(degrees, function (degrees) {\n    return degrees / 180 * Math.PI;\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function degrees(radians) {\n  return map(radians, function (radians) {\n    return radians * 180 / Math.PI;\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n} // GLSL equivalent: Works on single values and vectors\n\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n} // Interpolate between two numbers or two arrays\n\nexport function lerp(a, b, t) {\n  if (Array.isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","map":null,"metadata":{},"sourceType":"module"}