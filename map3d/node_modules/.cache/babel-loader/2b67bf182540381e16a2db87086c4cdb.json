{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\nvar DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nvar Accessor =\n/*#__PURE__*/\nfunction () {\n  _createClass(Accessor, null, [{\n    key: \"getBytesPerElement\",\n    value: function getBytesPerElement(accessor) {\n      // TODO: using `FLOAT` when type is not specified,\n      // ensure this assumption is valid or force API to specify type.\n      var ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"getBytesPerVertex\",\n    value: function getBytesPerVertex(accessor) {\n      assert(accessor.size); // TODO: using `FLOAT` when type is not specified,\n      // ensure this assumption is valid or force API to specify type.\n\n      var ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n      return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n    } // Combines (merges) a list of accessors. On top of default values\n    // Usually [programAccessor, bufferAccessor, appAccessor]\n    // All props will be set in the returned object.\n    // TODO check for conflicts between values in the supplied accessors\n\n  }, {\n    key: \"resolve\",\n    value: function resolve() {\n      for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n        accessors[_key] = arguments[_key];\n      }\n\n      return _construct(Accessor, [DEFAULT_ACCESSOR_VALUES].concat(accessors)); // Default values\n    }\n  }]);\n\n  function Accessor() {\n    var _this = this;\n\n    _classCallCheck(this, Accessor);\n\n    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      accessors[_key2] = arguments[_key2];\n    }\n\n    accessors.forEach(function (accessor) {\n      return _this._assign(accessor);\n    }); // Merge in sequence\n\n    Object.freeze(this);\n  }\n\n  _createClass(Accessor, [{\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this);\n    } // ACCESSORS\n    // TODO - remove>\n\n  }, {\n    key: \"_assign\",\n    // PRIVATE\n\n    /* eslint-disable complexity, max-statements */\n    value: function _assign() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // TYPE - not expected to be overridden\n\n      if (props.type !== undefined) {\n        if (this.type !== props.type) {\n          log.warn('accessor type mismatch');\n        }\n\n        this.type = props.type; // Auto-deduce integer type?\n\n        if (props.type === 5124 || props.type === 5125) {\n          this.integer = true;\n        }\n      } // SIZE - not expected to be overridden\n\n\n      if (props.size !== undefined) {\n        if (this.size !== props.size) {\n          log.warn('accessor size mismatch');\n        }\n\n        this.size = props.size;\n      } // INSTANCE DIVISOR\n\n\n      if (props.divisor !== undefined) {\n        this.divisor = props.divisor;\n      }\n\n      if (props.offset !== undefined) {\n        this.offset = props.offset;\n      }\n\n      if (props.stride !== undefined) {\n        this.stride = props.stride;\n      }\n\n      if (props.normalized !== undefined) {\n        this.normalized = props.normalized;\n      }\n\n      if (props.integer !== undefined) {\n        this.integer = props.integer;\n      } // Backwards compatibility\n\n\n      if (props.instanced !== undefined) {\n        log.deprecated('Accessor.instanced', 'Accessor.divisor');\n        this.divisor = props.instanced ? 1 : 0;\n      }\n\n      if (props.isInstanced !== undefined) {\n        log.deprecated('Accessor.isInstanced', 'Accessor.divisor');\n        this.divisor = props.isInstanced ? 1 : 0;\n      } // TODO - should this be supported?\n\n\n      if (props.index !== undefined) {\n        this.index = props.index ? 1 : 0;\n      }\n\n      return this;\n    }\n    /* eslint-enable complexity, max-statements */\n\n  }, {\n    key: \"BYTES_PER_ELEMENT\",\n    get: function get() {\n      return Accessor.getBytesPerElement(this);\n    }\n  }, {\n    key: \"BYTES_PER_VERTEX\",\n    get: function get() {\n      return Accessor.getBytesPerVertex(this);\n    }\n  }]);\n\n  return Accessor;\n}(); // TEST EXPORTS\n\n\nexport { Accessor as default };\nexport { DEFAULT_ACCESSOR_VALUES };","map":null,"metadata":{},"sourceType":"module"}