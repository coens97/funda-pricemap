{"ast":null,"code":"function _instanceof(left, right) {\n  return null != right && \"undefined\" != typeof Symbol && right[Symbol.hasInstance] ? right[Symbol.hasInstance](left) : left instanceof right;\n}\n\nfunction _typeof(obj) {\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _defineProperties(target, props) {\n  for (var descriptor, i = 0; i < props.length; i++) {\n    descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, \"value\" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  return call && (\"object\" === _typeof(call) || \"function\" == typeof call) ? call : _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" != typeof superClass && null !== superClass) throw new TypeError(\"Super expression must either be null or a function\");\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: !0,\n      configurable: !0\n    }\n  }), superClass && _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  return _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    return o.__proto__ = p, o;\n  }, _setPrototypeOf(o, p);\n}\n\nimport assert from \"../assert\";\nimport TransitionInterpolator from \"./transition-interpolator\";\nimport { flyToViewport } from \"viewport-mercator-project\";\nimport { isValid, lerp, getEndValueByShortestPath } from \"./transition-utils\";\n\nvar VIEWPORT_TRANSITION_PROPS = [\"longitude\", \"latitude\", \"zoom\", \"bearing\", \"pitch\"],\n    REQUIRED_PROPS = [\"latitude\", \"longitude\", \"zoom\", \"width\", \"height\"],\n    LINEARLY_INTERPOLATED_PROPS = [\"bearing\", \"pitch\"],\n    ViewportFlyToInterpolator = function (_TransitionInterpolat) {\n  function ViewportFlyToInterpolator() {\n    var _this;\n\n    return _classCallCheck(this, ViewportFlyToInterpolator), _this = _possibleConstructorReturn(this, (ViewportFlyToInterpolator.__proto__ || Object.getPrototypeOf(ViewportFlyToInterpolator)).call(this)), _this.propNames = VIEWPORT_TRANSITION_PROPS, _this;\n  }\n\n  return _inherits(ViewportFlyToInterpolator, _TransitionInterpolat), _createClass(ViewportFlyToInterpolator, [{\n    key: \"initializeProps\",\n    value: function initializeProps(startProps, endProps) {\n      for (var startViewportProps = {}, endViewportProps = {}, _i = 0; _i < REQUIRED_PROPS.length; _i++) {\n        var key = REQUIRED_PROPS[_i],\n            startValue = startProps[key],\n            endValue = endProps[key];\n        assert(isValid(startValue) && isValid(endValue), \"\".concat(key, \" must be supplied for transition\")), startViewportProps[key] = startValue, endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n      }\n\n      for (var _i2 = 0; _i2 < LINEARLY_INTERPOLATED_PROPS.length; _i2++) {\n        var _key = LINEARLY_INTERPOLATED_PROPS[_i2],\n            _startValue = startProps[_key] || 0,\n            _endValue = endProps[_key] || 0;\n\n        startViewportProps[_key] = _startValue, endViewportProps[_key] = getEndValueByShortestPath(_key, _startValue, _endValue);\n      }\n\n      return {\n        start: startViewportProps,\n        end: endViewportProps\n      };\n    }\n  }, {\n    key: \"interpolateProps\",\n    value: function interpolateProps(startProps, endProps, t) {\n      for (var key, viewport = flyToViewport(startProps, endProps, t), _i3 = 0; _i3 < LINEARLY_INTERPOLATED_PROPS.length; _i3++) {\n        key = LINEARLY_INTERPOLATED_PROPS[_i3], viewport[key] = lerp(startProps[key], endProps[key], t);\n      }\n\n      return viewport;\n    }\n  }]), ViewportFlyToInterpolator;\n}(TransitionInterpolator);\n\nexport { ViewportFlyToInterpolator as default };","map":null,"metadata":{},"sourceType":"module"}