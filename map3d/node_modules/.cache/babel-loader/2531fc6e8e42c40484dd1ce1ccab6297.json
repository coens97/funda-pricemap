{"ast":null,"code":"/**\n * Converts a function that accepts a node style (err, result) callback\n * as the last argument into a function that takes the same arguments\n * and returns a promise that resolves or rejects with the values provided\n * by the original callback\n * @param {Function} func - function to wrap\n * @return {Function} promisified function\n */\n\n/* eslint-disable no-try-catch */\nexport function promisify(func) {\n  return function promisifiedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new Promise(function (resolve, reject) {\n      function callback(error, data) {\n        try {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(data);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      func.apply(void 0, args.concat([callback]));\n    });\n  };\n}\n/* eslint-enable no-try-catch */","map":null,"metadata":{},"sourceType":"module"}