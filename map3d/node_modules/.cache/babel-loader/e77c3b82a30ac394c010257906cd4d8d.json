{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _COMPOSITE_GL_TYPES;\n/* eslint-disable camelcase */\n\n\nimport assert from '../utils/assert';\nvar GL_BYTE = 0x1400;\nvar GL_UNSIGNED_BYTE = 0x1401;\nvar GL_SHORT = 0x1402;\nvar GL_UNSIGNED_SHORT = 0x1403;\nvar GL_POINTS = 0x0;\nvar GL_LINES = 0x1;\nvar GL_LINE_LOOP = 0x2;\nvar GL_LINE_STRIP = 0x3;\nvar GL_TRIANGLES = 0x4;\nvar GL_TRIANGLE_STRIP = 0x5;\nvar GL_TRIANGLE_FAN = 0x6; // Local constants - these will \"collapse\" during minification\n\nvar GL_FLOAT = 0x1406;\nvar GL_FLOAT_VEC2 = 0x8B50;\nvar GL_FLOAT_VEC3 = 0x8B51;\nvar GL_FLOAT_VEC4 = 0x8B52;\nvar GL_INT = 0x1404;\nvar GL_INT_VEC2 = 0x8B53;\nvar GL_INT_VEC3 = 0x8B54;\nvar GL_INT_VEC4 = 0x8B55;\nvar GL_UNSIGNED_INT = 0x1405;\nvar GL_UNSIGNED_INT_VEC2 = 0x8DC6;\nvar GL_UNSIGNED_INT_VEC3 = 0x8DC7;\nvar GL_UNSIGNED_INT_VEC4 = 0x8DC8;\nvar GL_BOOL = 0x8B56;\nvar GL_BOOL_VEC2 = 0x8B57;\nvar GL_BOOL_VEC3 = 0x8B58;\nvar GL_BOOL_VEC4 = 0x8B59;\nvar GL_FLOAT_MAT2 = 0x8B5A;\nvar GL_FLOAT_MAT3 = 0x8B5B;\nvar GL_FLOAT_MAT4 = 0x8B5C;\nvar GL_FLOAT_MAT2x3 = 0x8B65;\nvar GL_FLOAT_MAT2x4 = 0x8B66;\nvar GL_FLOAT_MAT3x2 = 0x8B67;\nvar GL_FLOAT_MAT3x4 = 0x8B68;\nvar GL_FLOAT_MAT4x2 = 0x8B69;\nvar GL_FLOAT_MAT4x3 = 0x8B6A; // Composite types table\n\nvar COMPOSITE_GL_TYPES = (_COMPOSITE_GL_TYPES = {}, _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT, [GL_FLOAT, 1, 'float']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC2, [GL_FLOAT, 2, 'vec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC3, [GL_FLOAT, 3, 'vec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC4, [GL_FLOAT, 4, 'vec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT, [GL_INT, 1, 'int']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT_VEC2, [GL_INT, 2, 'ivec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT_VEC3, [GL_INT, 3, 'ivec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT_VEC4, [GL_INT, 4, 'ivec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT, [GL_UNSIGNED_INT, 1, 'uint']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC2, [GL_UNSIGNED_INT, 2, 'uvec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC3, [GL_UNSIGNED_INT, 3, 'uvec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC4, [GL_UNSIGNED_INT, 4, 'uvec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL, [GL_FLOAT, 1, 'bool']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL_VEC2, [GL_FLOAT, 2, 'bvec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL_VEC3, [GL_FLOAT, 3, 'bvec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL_VEC4, [GL_FLOAT, 4, 'bvec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2, [GL_FLOAT, 8, 'mat2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2x3, [GL_FLOAT, 8, 'mat2x3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2x4, [GL_FLOAT, 8, 'mat2x4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3, [GL_FLOAT, 12, 'mat3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3x2, [GL_FLOAT, 12, 'mat3x2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3x4, [GL_FLOAT, 12, 'mat3x4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4, [GL_FLOAT, 16, 'mat4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4x2, [GL_FLOAT, 16, 'mat4x2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4x3, [GL_FLOAT, 16, 'mat4x3']), _COMPOSITE_GL_TYPES); // Counts the number of complete primitives given a number of vertices and a drawMode\n\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n\n    case GL_LINES:\n      return GL_LINES;\n\n    case GL_LINE_STRIP:\n      return GL_LINES;\n\n    case GL_LINE_LOOP:\n      return GL_LINES;\n\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n\n    default:\n      assert(false);\n      return 0;\n  }\n} // Counts the number of complete \"primitives\" given a number of vertices and a drawMode\n\nexport function getPrimitiveCount(_ref) {\n  var drawMode = _ref.drawMode,\n      vertexCount = _ref.vertexCount;\n\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n\n    case GL_LINES:\n      return vertexCount / 2;\n\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n\n    default:\n      assert(false);\n      return 0;\n  }\n} // Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\n\nexport function getVertexCount(_ref2) {\n  var drawMode = _ref2.drawMode,\n      vertexCount = _ref2.vertexCount;\n  var primitiveCount = getPrimitiveCount({\n    drawMode: drawMode,\n    vertexCount: vertexCount\n  });\n\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n\n    case GL_LINES:\n      return primitiveCount * 2;\n\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n\n    default:\n      assert(false);\n      return 0;\n  }\n} // Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)\n\nexport function decomposeCompositeGLType(compositeGLType) {\n  var typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n\n  if (!typeAndSize) {\n    return null;\n  }\n\n  var _typeAndSize = _slicedToArray(typeAndSize, 2),\n      type = _typeAndSize[0],\n      components = _typeAndSize[1];\n\n  return {\n    type: type,\n    components: components\n  };\n}\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n\n    default:\n  }\n\n  for (var glType in COMPOSITE_GL_TYPES) {\n    var _COMPOSITE_GL_TYPES$g = _slicedToArray(COMPOSITE_GL_TYPES[glType], 3),\n        compType = _COMPOSITE_GL_TYPES$g[0],\n        compComponents = _COMPOSITE_GL_TYPES$g[1],\n        name = _COMPOSITE_GL_TYPES$g[2];\n\n    if (compType === type && compComponents === components) {\n      return {\n        glType: glType,\n        name: name\n      };\n    }\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}