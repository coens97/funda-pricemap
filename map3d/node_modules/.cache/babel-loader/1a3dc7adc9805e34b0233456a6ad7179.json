{"ast":null,"code":"var _GL_PARAMETER_DEFAULT, _GL_PARAMETER_SETTERS, _GL_PARAMETER_GETTERS;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\n\n\nimport GL from '../constants';\nimport { isWebGL2 } from '../webgl-utils';\nimport assert from '../utils/assert'; // DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\nexport var GL_PARAMETER_DEFAULTS = (_GL_PARAMETER_DEFAULT = {}, _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_COLOR, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_EQUATION_RGB, GL.FUNC_ADD), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_EQUATION_ALPHA, GL.FUNC_ADD), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_SRC_RGB, GL.ONE), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_DST_RGB, GL.ZERO), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_SRC_ALPHA, GL.ONE), _defineProperty(_GL_PARAMETER_DEFAULT, GL.BLEND_DST_ALPHA, GL.ZERO), _defineProperty(_GL_PARAMETER_DEFAULT, GL.COLOR_CLEAR_VALUE, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, GL.COLOR_WRITEMASK, [true, true, true, true]), _defineProperty(_GL_PARAMETER_DEFAULT, GL.CULL_FACE, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.CULL_FACE_MODE, GL.BACK), _defineProperty(_GL_PARAMETER_DEFAULT, GL.DEPTH_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.DEPTH_CLEAR_VALUE, 1), _defineProperty(_GL_PARAMETER_DEFAULT, GL.DEPTH_FUNC, GL.LESS), _defineProperty(_GL_PARAMETER_DEFAULT, GL.DEPTH_RANGE, new Float32Array([0, 1])), _defineProperty(_GL_PARAMETER_DEFAULT, GL.DEPTH_WRITEMASK, true), _defineProperty(_GL_PARAMETER_DEFAULT, GL.DITHER, true), _defineProperty(_GL_PARAMETER_DEFAULT, GL.FRAMEBUFFER_BINDING, null), _defineProperty(_GL_PARAMETER_DEFAULT, GL.FRONT_FACE, GL.CCW), _defineProperty(_GL_PARAMETER_DEFAULT, GL.GENERATE_MIPMAP_HINT, GL.DONT_CARE), _defineProperty(_GL_PARAMETER_DEFAULT, GL.LINE_WIDTH, 1), _defineProperty(_GL_PARAMETER_DEFAULT, GL.POLYGON_OFFSET_FILL, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.POLYGON_OFFSET_FACTOR, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.POLYGON_OFFSET_UNITS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.SAMPLE_COVERAGE_VALUE, 1.0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.SAMPLE_COVERAGE_INVERT, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.SCISSOR_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.SCISSOR_BOX, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_CLEAR_VALUE, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_WRITEMASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_WRITEMASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_FUNC, GL.ALWAYS), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_REF, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_VALUE_MASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_FUNC, GL.ALWAYS), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_REF, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_VALUE_MASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_FAIL, GL.KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_PASS_DEPTH_FAIL, GL.KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_PASS_DEPTH_PASS, GL.KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_FAIL, GL.KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_PASS_DEPTH_FAIL, GL.KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, GL.STENCIL_BACK_PASS_DEPTH_PASS, GL.KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, GL.VIEWPORT, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, GL.PACK_ALIGNMENT, 4), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_ALIGNMENT, 4), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_FLIP_Y_WEBGL, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, GL.BROWSER_DEFAULT_WEBGL), _defineProperty(_GL_PARAMETER_DEFAULT, GL.FRAGMENT_SHADER_DERIVATIVE_HINT, GL.DONT_CARE), _defineProperty(_GL_PARAMETER_DEFAULT, GL.READ_FRAMEBUFFER_BINDING, null), _defineProperty(_GL_PARAMETER_DEFAULT, GL.RASTERIZER_DISCARD, false), _defineProperty(_GL_PARAMETER_DEFAULT, GL.PACK_ROW_LENGTH, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.PACK_SKIP_PIXELS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.PACK_SKIP_ROWS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_ROW_LENGTH, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_IMAGE_HEIGHT, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_SKIP_PIXELS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_SKIP_ROWS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, GL.UNPACK_SKIP_IMAGES, 0), _GL_PARAMETER_DEFAULT); // SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nvar enable = function enable(gl, value, key) {\n  return value ? gl.enable(key) : gl.disable(key);\n};\n\nvar hint = function hint(gl, value, key) {\n  return gl.hint(key, value);\n};\n\nvar pixelStorei = function pixelStorei(gl, value, key) {\n  return gl.pixelStorei(key, value);\n};\n\nvar drawFramebuffer = function drawFramebuffer(gl, value) {\n  var target = isWebGL2(gl) ? GL.DRAW_FRAMEBUFFER : GL.FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value);\n};\n\nvar readFramebuffer = function readFramebuffer(gl, value) {\n  return gl.bindFramebuffer(GL.READ_FRAMEBUFFER, value);\n}; // Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'COMPOSITE_GL_PARAMETER_SETTERS'\n\n\nexport var GL_PARAMETER_SETTERS = (_GL_PARAMETER_SETTERS = {}, _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_COLOR, function (gl, value) {\n  return gl.blendColor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_EQUATION_RGB, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_EQUATION_ALPHA, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_SRC_RGB, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_DST_RGB, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_SRC_ALPHA, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, GL.BLEND_DST_ALPHA, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, GL.COLOR_CLEAR_VALUE, function (gl, value) {\n  return gl.clearColor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.COLOR_WRITEMASK, function (gl, value) {\n  return gl.colorMask.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.CULL_FACE, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.CULL_FACE_MODE, function (gl, value) {\n  return gl.cullFace(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.DEPTH_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.DEPTH_CLEAR_VALUE, function (gl, value) {\n  return gl.clearDepth(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.DEPTH_FUNC, function (gl, value) {\n  return gl.depthFunc(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.DEPTH_RANGE, function (gl, value) {\n  return gl.depthRange.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.DEPTH_WRITEMASK, function (gl, value) {\n  return gl.depthMask(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.DITHER, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.FRAGMENT_SHADER_DERIVATIVE_HINT, hint), _defineProperty(_GL_PARAMETER_SETTERS, GL.FRAMEBUFFER_BINDING, drawFramebuffer), _defineProperty(_GL_PARAMETER_SETTERS, GL.FRONT_FACE, function (gl, value) {\n  return gl.frontFace(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.GENERATE_MIPMAP_HINT, hint), _defineProperty(_GL_PARAMETER_SETTERS, GL.LINE_WIDTH, function (gl, value) {\n  return gl.lineWidth(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.POLYGON_OFFSET_FILL, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.POLYGON_OFFSET_FACTOR, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, GL.POLYGON_OFFSET_UNITS, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, GL.RASTERIZER_DISCARD, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.SAMPLE_COVERAGE_VALUE, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, GL.SAMPLE_COVERAGE_INVERT, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, GL.SCISSOR_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.SCISSOR_BOX, function (gl, value) {\n  return gl.scissor.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_CLEAR_VALUE, function (gl, value) {\n  return gl.clearStencil(value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_WRITEMASK, function (gl, value) {\n  return gl.stencilMaskSeparate(GL.FRONT, value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_WRITEMASK, function (gl, value) {\n  return gl.stencilMaskSeparate(GL.BACK, value);\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_FUNC, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_REF, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_VALUE_MASK, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_FUNC, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_REF, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_VALUE_MASK, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_FAIL, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_PASS_DEPTH_FAIL, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_PASS_DEPTH_PASS, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_FAIL, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_PASS_DEPTH_FAIL, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, GL.STENCIL_BACK_PASS_DEPTH_PASS, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, GL.VIEWPORT, function (gl, value) {\n  return gl.viewport.apply(gl, _toConsumableArray(value));\n}), _defineProperty(_GL_PARAMETER_SETTERS, GL.PACK_ALIGNMENT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_ALIGNMENT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_FLIP_Y_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.PACK_ROW_LENGTH, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.PACK_SKIP_PIXELS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.PACK_SKIP_ROWS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.READ_FRAMEBUFFER_BINDING, readFramebuffer), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_ROW_LENGTH, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_IMAGE_HEIGHT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_SKIP_PIXELS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_SKIP_ROWS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, GL.UNPACK_SKIP_IMAGES, pixelStorei), _GL_PARAMETER_SETTERS); // COMPOSITE_WEBGL_PARAMETER_\n\nvar COMPOSITE_GL_PARAMETER_SETTERS = {\n  blendEquation: function blendEquation(gl, values) {\n    return gl.blendEquationSeparate(values[GL.BLEND_EQUATION_RGB], values[GL.BLEND_EQUATION_ALPHA]);\n  },\n  blendFunc: function blendFunc(gl, values) {\n    return gl.blendFuncSeparate(values[GL.BLEND_SRC_RGB], values[GL.BLEND_DST_RGB], values[GL.BLEND_SRC_ALPHA], values[GL.BLEND_DST_ALPHA]);\n  },\n  polygonOffset: function polygonOffset(gl, values) {\n    return gl.polygonOffset(values[GL.POLYGON_OFFSET_FACTOR], values[GL.POLYGON_OFFSET_UNITS]);\n  },\n  sampleCoverage: function sampleCoverage(gl, values) {\n    return gl.sampleCoverage(values[GL.SAMPLE_COVERAGE_VALUE], values[GL.SAMPLE_COVERAGE_INVERT]);\n  },\n  stencilFuncFront: function stencilFuncFront(gl, values) {\n    return gl.stencilFuncSeparate(GL.FRONT, values[GL.STENCIL_FUNC], values[GL.STENCIL_REF], values[GL.STENCIL_VALUE_MASK]);\n  },\n  stencilFuncBack: function stencilFuncBack(gl, values) {\n    return gl.stencilFuncSeparate(GL.BACK, values[GL.STENCIL_BACK_FUNC], values[GL.STENCIL_BACK_REF], values[GL.STENCIL_BACK_VALUE_MASK]);\n  },\n  stencilOpFront: function stencilOpFront(gl, values) {\n    return gl.stencilOpSeparate(GL.FRONT, values[GL.STENCIL_FAIL], values[GL.STENCIL_PASS_DEPTH_FAIL], values[GL.STENCIL_PASS_DEPTH_PASS]);\n  },\n  stencilOpBack: function stencilOpBack(gl, values) {\n    return gl.stencilOpSeparate(GL.BACK, values[GL.STENCIL_BACK_FAIL], values[GL.STENCIL_BACK_PASS_DEPTH_FAIL], values[GL.STENCIL_BACK_PASS_DEPTH_PASS]);\n  }\n}; // GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nvar isEnabled = function isEnabled(gl, key) {\n  return gl.isEnabled(key);\n}; // Exceptions for any keys that cannot be queried by gl.getParameters\n\n\nexport var GL_PARAMETER_GETTERS = (_GL_PARAMETER_GETTERS = {}, _defineProperty(_GL_PARAMETER_GETTERS, GL.BLEND, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.CULL_FACE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.DEPTH_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.DITHER, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.POLYGON_OFFSET_FILL, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.SAMPLE_ALPHA_TO_COVERAGE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.SAMPLE_COVERAGE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.SCISSOR_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.STENCIL_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, GL.RASTERIZER_DISCARD, isEnabled), _GL_PARAMETER_GETTERS); // HELPER METHODS\n\nvar deepArrayEqual = function deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n\n  var isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  var isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (var i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}; // PUBLIC METHODS\n// Sets any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\n// Returns the previous value\n// Note: limited to parameter values\n\n\nexport function setParameter(gl, key, value) {\n  var getter = GL_PARAMETER_GETTERS[key];\n  var prevValue = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  var setter = GL_PARAMETER_SETTERS[key];\n  assert(typeof setter === 'function');\n  setter(gl, value, Number(key));\n  return prevValue;\n} // Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\n\nexport function setParameters(gl, values) {\n  var compositeSetters = {}; // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (var key in values) {\n    var glConstant = Number(key);\n    var setter = GL_PARAMETER_SETTERS[key];\n\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  } // HANDLE COMPOSITE SETTERS\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n\n\n  var cache = gl.state && gl.state.cache;\n\n  if (cache) {\n    var mergedValues = Object.assign({}, cache, values);\n\n    for (var _key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      var compositeSetter = COMPOSITE_GL_PARAMETER_SETTERS[_key]; // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n\n      compositeSetter(gl, mergedValues);\n    }\n  } // Add a log for the else case?\n\n} // Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\n\nexport function getParameter(gl, key) {\n  var getter = GL_PARAMETER_GETTERS[key];\n  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n} // Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\n\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS; // support both arrays of parameters and objects (keys represent parameters)\n\n  var parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n  var state = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      state[key] = getParameter(gl, key);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return state;\n}\nexport function getDefaultParameters(gl) {\n  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic\n  return Object.assign({}, GL_PARAMETER_DEFAULTS, {// TODO: For viewport and scissor default values are set at the time of\n    // context creation based on canvas size, we can query them here but it will\n    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.\n    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),\n    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)\n  });\n} // Reset all parameters to a pure context state\n\nexport function resetParameters(gl) {\n  setParameters(gl, getDefaultParameters(gl));\n} // Get all parameters that have been modified from a pure context state\n\nexport function getModifiedParameters(gl) {\n  var values = getParameters(GL_PARAMETER_DEFAULTS);\n  var modified = {};\n\n  for (var key in GL_PARAMETER_DEFAULTS) {\n    if (!deepArrayEqual(values[key], GL_PARAMETER_DEFAULTS[key])) {\n      modified[key] = values[key];\n    }\n  }\n\n  return modified;\n}","map":null,"metadata":{},"sourceType":"module"}