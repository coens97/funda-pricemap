{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable no-try-catch */\n\n\nvar EffectManager = function () {\n  function EffectManager(_ref) {\n    var gl = _ref.gl,\n        layerManager = _ref.layerManager;\n\n    _classCallCheck(this, EffectManager);\n\n    this.gl = gl;\n    this.layerManager = layerManager;\n    this._effects = [];\n  }\n  /**\n   * Adds an effect to be managed.  That effect's initialize function will\n   * be called, and the effect's preDraw and draw callbacks will be\n   * called at the appropriate times in the render loop\n   * @param {Effect} effect - the effect to be added\n   */\n\n\n  _createClass(EffectManager, [{\n    key: \"addEffect\",\n    value: function addEffect(effect) {\n      this._effects.push(effect);\n\n      this._sortEffects();\n\n      effect.initialize({\n        gl: this.gl,\n        layerManager: this.layerManager\n      });\n    }\n    /**\n     * Removes an effect that is already being managed.  That effect's\n     * finalize function will be called, and its callbacks will no longer\n     * be envoked in the render loop\n     * @param {Effect} effect - the effect to be removed\n     * @return {bool} - True if the effect was already being managed, and\n     * thus successfully removed; false otherwise\n     */\n\n  }, {\n    key: \"removeEffect\",\n    value: function removeEffect(effect) {\n      var i = this._effects.indexOf(effect);\n\n      if (i >= 0) {\n        effect.finalize({\n          gl: this.gl,\n          layerManager: this.layerManager\n        });\n\n        this._effects.splice(i, 1);\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Envoke the preDraw callback of all managed events, in order of\n     * decreasing priority\n     */\n\n  }, {\n    key: \"preDraw\",\n    value: function preDraw() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._effects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var effect = _step.value;\n\n          if (effect.needsRedraw) {\n            effect.preDraw({\n              gl: this.gl,\n              layerManager: this.layerManager\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    /**\n     * Envoke the draw callback of all managed events, in order of\n     * decreasing priority\n     */\n\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._effects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var effect = _step2.value;\n\n          if (effect.needsRedraw) {\n            effect.draw({\n              gl: this.gl,\n              layerManager: this.layerManager\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_sortEffects\",\n    value: function _sortEffects() {\n      this._effects.sort(function (a, b) {\n        if (a.priority > b.priority) {\n          return -1;\n        } else if (a.priority < b.priority) {\n          return 1;\n        }\n\n        return a.count - b.count;\n      });\n    }\n  }]);\n\n  return EffectManager;\n}();\n\nexport default EffectManager;","map":null,"metadata":{},"sourceType":"module"}