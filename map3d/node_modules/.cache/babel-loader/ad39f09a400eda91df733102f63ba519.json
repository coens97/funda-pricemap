{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { CompositeLayer, experimental } from '@deck.gl/core';\nvar BinSorter = experimental.BinSorter,\n    defaultColorRange = experimental.defaultColorRange,\n    getQuantizeScale = experimental.getQuantizeScale,\n    getLinearScale = experimental.getLinearScale;\nimport GridCellLayer from '../grid-cell-layer/grid-cell-layer';\nimport { pointToDensityGridData } from './grid-aggregator';\n\nfunction nop() {}\n\nvar defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: function getColorValue(points) {\n    return points.length;\n  },\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  onSetColorDomain: nop,\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: function getElevationValue(points) {\n    return points.length;\n  },\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n  // grid\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: function getPosition(x) {\n    return x.position;\n  },\n  extruded: false,\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nvar GridLayer =\n/*#__PURE__*/\nfunction (_CompositeLayer) {\n  _inherits(GridLayer, _CompositeLayer);\n\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridLayer).apply(this, arguments));\n  }\n\n  _createClass(GridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        layerData: [],\n        sortedColorBins: null,\n        sortedElevationBins: null,\n        colorValueDomain: null,\n        elevationValueDomain: null,\n        colorScaleFunc: nop,\n        elevationScaleFunc: nop,\n        dimensionUpdaters: this.getDimensionUpdaters()\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var reprojectNeeded = this.needsReProjectPoints(oldProps, props);\n\n      if (changeFlags.dataChanged || reprojectNeeded) {\n        // project data into hexagons, and get sortedBins\n        this.getLayerData();\n      } else {\n        var dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n        dimensionChanges.forEach(function (f) {\n          return typeof f === 'function' && f.apply(_this);\n        });\n      }\n    }\n  }, {\n    key: \"needsReProjectPoints\",\n    value: function needsReProjectPoints(oldProps, props) {\n      return oldProps.cellSize !== props.cellSize || oldProps.getPosition !== props.getPosition;\n    }\n  }, {\n    key: \"getDimensionUpdaters\",\n    value: function getDimensionUpdaters() {\n      // dimension updaters are sequential,\n      // if the first one needs to be called, the 2nd and 3rd one will automatically\n      // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n      // will automatically be called\n      return {\n        getColor: [{\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        }, {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        }, {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }],\n        getElevation: [{\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        }, {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        }, {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }]\n      };\n    }\n  }, {\n    key: \"getDimensionChanges\",\n    value: function getDimensionChanges(oldProps, props) {\n      var dimensionUpdaters = this.state.dimensionUpdaters;\n      var updaters = []; // get dimension to be updated\n\n      for (var dimensionKey in dimensionUpdaters) {\n        // return the first triggered updater for each dimension\n        var needUpdate = dimensionUpdaters[dimensionKey].find(function (item) {\n          return item.triggers.some(function (t) {\n            return oldProps[t] !== props[t];\n          });\n        });\n\n        if (needUpdate) {\n          updaters.push(needUpdate.updater);\n        }\n      }\n\n      return updaters.length ? updaters : null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      var _this$state = this.state,\n          sortedColorBins = _this$state.sortedColorBins,\n          sortedElevationBins = _this$state.sortedElevationBins;\n      var isPicked = info.picked && info.index > -1;\n      var object = null;\n\n      if (isPicked) {\n        var cell = this.state.layerData[info.index];\n        var colorValue = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n        var elevationValue = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n        object = Object.assign({\n          colorValue: colorValue,\n          elevationValue: elevationValue\n        }, cell);\n      } // add bin colorValue and elevationValue to info\n\n\n      return Object.assign(info, {\n        picked: Boolean(object),\n        // override object with picked cell\n        object: object\n      });\n    }\n  }, {\n    key: \"getUpdateTriggers\",\n    value: function getUpdateTriggers() {\n      var _this2 = this;\n\n      var dimensionUpdaters = this.state.dimensionUpdaters; // merge all dimension triggers\n\n      var updateTriggers = {};\n\n      var _loop = function _loop(dimensionKey) {\n        updateTriggers[dimensionKey] = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = dimensionUpdaters[dimensionKey][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var step = _step.value;\n            step.triggers.forEach(function (prop) {\n              updateTriggers[dimensionKey][prop] = _this2.props[prop];\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      for (var dimensionKey in dimensionUpdaters) {\n        _loop(dimensionKey);\n      }\n\n      return updateTriggers;\n    }\n  }, {\n    key: \"getLayerData\",\n    value: function getLayerData() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          cellSize = _this$props.cellSize,\n          getPosition = _this$props.getPosition;\n\n      var _pointToDensityGridDa = pointToDensityGridData(data, cellSize, getPosition),\n          layerData = _pointToDensityGridDa.layerData;\n\n      this.setState({\n        layerData: layerData\n      });\n      this.getSortedBins();\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      this.getColorValueDomain();\n      this.getElevationValueDomain();\n    }\n  }, {\n    key: \"getSortedBins\",\n    value: function getSortedBins() {\n      this.getSortedColorBins();\n      this.getSortedElevationBins();\n    }\n  }, {\n    key: \"getSortedColorBins\",\n    value: function getSortedColorBins() {\n      var getColorValue = this.props.getColorValue;\n      var sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n      this.setState({\n        sortedColorBins: sortedColorBins\n      });\n      this.getColorValueDomain();\n    }\n  }, {\n    key: \"getSortedElevationBins\",\n    value: function getSortedElevationBins() {\n      var getElevationValue = this.props.getElevationValue;\n      var sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n      this.setState({\n        sortedElevationBins: sortedElevationBins\n      });\n      this.getElevationValueDomain();\n    }\n  }, {\n    key: \"getColorValueDomain\",\n    value: function getColorValueDomain() {\n      var _this$props2 = this.props,\n          lowerPercentile = _this$props2.lowerPercentile,\n          upperPercentile = _this$props2.upperPercentile,\n          onSetColorDomain = _this$props2.onSetColorDomain;\n      this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([lowerPercentile, upperPercentile]);\n\n      if (typeof onSetColorDomain === 'function') {\n        onSetColorDomain(this.state.colorValueDomain);\n      }\n\n      this.getColorScale();\n    }\n  }, {\n    key: \"getElevationValueDomain\",\n    value: function getElevationValueDomain() {\n      var _this$props3 = this.props,\n          elevationLowerPercentile = _this$props3.elevationLowerPercentile,\n          elevationUpperPercentile = _this$props3.elevationUpperPercentile,\n          onSetElevationDomain = _this$props3.onSetElevationDomain;\n      this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([elevationLowerPercentile, elevationUpperPercentile]);\n\n      if (typeof onSetElevationDomain === 'function') {\n        onSetElevationDomain(this.state.elevationValueDomain);\n      }\n\n      this.getElevationScale();\n    }\n  }, {\n    key: \"getColorScale\",\n    value: function getColorScale() {\n      var colorRange = this.props.colorRange;\n      var colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n      this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n    }\n  }, {\n    key: \"getElevationScale\",\n    value: function getElevationScale() {\n      var elevationRange = this.props.elevationRange;\n      var elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n      this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      var _this$state2 = this.state,\n          sortedColorBins = _this$state2.sortedColorBins,\n          colorScaleFunc = _this$state2.colorScaleFunc,\n          colorValueDomain = _this$state2.colorValueDomain;\n      var cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      var colorDomain = this.props.colorDomain || colorValueDomain;\n      var isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1]; // if cell value is outside domain, set alpha to 0\n\n      var color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0]; // add alpha to color if not defined in colorRange\n\n      color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n      return color;\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      var _this$state3 = this.state,\n          sortedElevationBins = _this$state3.sortedElevationBins,\n          elevationScaleFunc = _this$state3.elevationScaleFunc,\n          elevationValueDomain = _this$state3.elevationValueDomain;\n      var ev = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n      var elevationDomain = this.props.elevationDomain || elevationValueDomain;\n      var isElevationValueInDomain = ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1]; // if cell value is outside domain, set elevation to -1\n\n      return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n    } // for subclassing, override this method to return\n    // customized sub layer props\n\n  }, {\n    key: \"getSubLayerProps\",\n    value: function getSubLayerProps() {\n      var _this$props4 = this.props,\n          elevationScale = _this$props4.elevationScale,\n          fp64 = _this$props4.fp64,\n          extruded = _this$props4.extruded,\n          cellSize = _this$props4.cellSize,\n          coverage = _this$props4.coverage,\n          lightSettings = _this$props4.lightSettings,\n          transitions = _this$props4.transitions; // return props to the sublayer constructor\n\n      return _get(_getPrototypeOf(GridLayer.prototype), \"getSubLayerProps\", this).call(this, {\n        id: 'grid-cell',\n        data: this.state.layerData,\n        fp64: fp64,\n        cellSize: cellSize,\n        coverage: coverage,\n        lightSettings: lightSettings,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        },\n        updateTriggers: this.getUpdateTriggers()\n      });\n    } // for subclassing, override this method to return\n    // customized sub layer class\n\n  }, {\n    key: \"getSubLayerClass\",\n    value: function getSubLayerClass() {\n      return GridCellLayer;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var SubLayerClass = this.getSubLayerClass();\n      return new SubLayerClass(this.getSubLayerProps());\n    }\n  }]);\n\n  return GridLayer;\n}(CompositeLayer);\n\nexport { GridLayer as default };\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}