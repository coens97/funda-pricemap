{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = checkDeprecatedProps; // 'new' is optional\n\nvar DEPRECATED_PROPS = [{\n  old: 'onChangeViewport',\n  new: 'onViewportChange'\n}, {\n  old: 'perspectiveEnabled',\n  new: 'dragRotate'\n}, {\n  old: 'onHoverFeatures',\n  new: 'onHover'\n}, {\n  old: 'onClickFeatures',\n  new: 'onClick'\n}];\n\nfunction getDeprecatedText(name) {\n  return 'react-map-gl: `' + name + '` is deprecated and will be removed in a later version.';\n}\n\nfunction getNewText(name) {\n  return 'Use `' + name + '` instead.';\n}\n/**\n * Checks props object for any prop that is deprecated and insert a console\n * warning to the user. This will also print out the recommended new prop/API\n * if one exists.\n */\n\n\nfunction checkDeprecatedProps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  /* eslint-disable no-console, no-undef */\n\n  DEPRECATED_PROPS.forEach(function (depProp) {\n    if (props.hasOwnProperty(depProp.old)) {\n      var warnMessage = getDeprecatedText(depProp.old);\n\n      if (depProp.new) {\n        warnMessage = warnMessage + ' ' + getNewText(depProp.new);\n      }\n\n      console.warn(warnMessage);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}