{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME hexagon-cell-layer-vertex-shader-64\\n\\nattribute vec3 positions;\\nattribute vec3 normals;\\n\\nattribute vec3 instancePositions;\\nattribute vec2 instancePositions64xyLow;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\n// Custom uniforms\\nuniform float opacity;\\nuniform float radius;\\nuniform float angle;\\nuniform float extruded;\\nuniform float coverage;\\nuniform float elevationScale;\\n\\n// Result\\nvarying vec4 vColor;\\n\\n// A magic number to scale elevation so that 1 unit approximate to 1 meter.\\n#define ELEVATION_SCALE 0.8\\n\\nvoid main(void) {\\n\\n  // rotate primitive position and normal\\n  mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\\n\\n  vec2 rPos = rotationMatrix * positions.xz;\\n  vec2 rNorm = rotationMatrix * normals.xz; // the hexagon cells has y axis as the vertical axis\\n\\n  vec3 rotatedPositions = vec3(rPos.x, positions.y, rPos.y);\\n  vec3 rotatedNormals = vec3(rNorm.x, rNorm.y, normals.y);\\n\\n  // calculate elevation, if 3d not enabled set to 0\\n  // cylindar gemoetry height are between -0.5 to 0.5, transform it to between 0, 1\\n  float elevation = 0.0;\\n\\n  if (extruded > 0.5) {\\n    elevation = project_scale(instancePositions.z * (positions.y + 0.5) *\\n      ELEVATION_SCALE * elevationScale);\\n  }\\n\\n  // if alpha == 0.0 or z < 0.0, do not render element\\n  float noRender = float(instanceColors.a == 0.0 || instancePositions.z < 0.0);\\n  float dotRadius = radius * mix(coverage, 0.0, noRender);\\n\\n  // project center of hexagon\\n\\n  vec4 instancePositions64xy = vec4(\\n    instancePositions.x, instancePositions64xyLow.x,\\n    instancePositions.y, instancePositions64xyLow.y);\\n\\n  vec2 projected_coord_xy[2];\\n  project_position_fp64(instancePositions64xy, projected_coord_xy);\\n\\n  vec2 vertex_pos_localspace[4];\\n  vec4_fp64(vec4(rotatedPositions.xz * dotRadius, 0.0, 1.0), vertex_pos_localspace);\\n\\n  vec2 vertex_pos_modelspace[4];\\n  vertex_pos_modelspace[0] = sum_fp64(vertex_pos_localspace[0], projected_coord_xy[0]);\\n  vertex_pos_modelspace[1] = sum_fp64(vertex_pos_localspace[1], projected_coord_xy[1]);\\n  vertex_pos_modelspace[2] = sum_fp64(vertex_pos_localspace[2], vec2(elevation, 0.0));\\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\\n\\n  vec4 position_worldspace = vec4(\\n    vertex_pos_modelspace[0].x, vertex_pos_modelspace[1].x,\\n    vertex_pos_modelspace[2].x, vertex_pos_modelspace[3].x);\\n\\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\\n\\n  // Light calculations\\n  // Worldspace is the linear space after Mercator projection\\n\\n  vec3 normals_worldspace = rotatedNormals;\\n\\n  float lightWeight = 1.0;\\n\\n  if (extruded > 0.5) {\\n    lightWeight = getLightWeight(\\n      position_worldspace.xyz, // the w component is always 1.0\\n      normals_worldspace\\n    );\\n  }\\n\\n  vec3 lightWeightedColor = lightWeight * instanceColors.rgb;\\n\\n  // Color: Either opacity-multiplied instance color, or picking color\\n  vColor = vec4(lightWeightedColor, opacity * instanceColors.a) / 255.0;\\n\\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\\n  picking_setPickingColor(instancePickingColors);\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}