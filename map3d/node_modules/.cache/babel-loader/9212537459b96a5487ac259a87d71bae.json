{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: !0\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var descriptor, i = 0; i < props.length; i++) {\n      descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 'value' in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;\n  };\n}(),\n    _timestamp = require('./utils/timestamp'),\n    _formatters = require('./utils/formatters');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) throw new TypeError('Cannot call a class as a function');\n}\n\nvar Stats = function () {\n  function Stats(_ref) {\n    var id = _ref.id;\n    _classCallCheck(this, Stats), this.id = id, this.time = (0, _timestamp.getTimestamp)(), this.counters = {}, Object.seal(this);\n  }\n\n  var _Mathround = Math.round;\n  return _createClass(Stats, [{\n    key: 'addCounter',\n    value: function addCounter(name) {\n      return this._getCounter(name), this;\n    }\n  }, {\n    key: 'bump',\n    value: function bump(name) {\n      var counter = this._getCounter(name);\n\n      return counter.call++, counter.count++, this;\n    }\n  }, {\n    key: 'increment',\n    value: function increment(name, count) {\n      var counter = this._getCounter(name);\n\n      return counter.call++, counter.count += count, this;\n    }\n  }, {\n    key: 'addTimer',\n    value: function addTimer(name) {\n      var timer = this._getCounter(name);\n\n      return timer.time = 0, this;\n    }\n  }, {\n    key: 'addTime',\n    value: function addTime(name, time) {\n      var timer = this._getCounter(name);\n\n      return timer.time += time, timer.count++, this;\n    }\n  }, {\n    key: 'timeStart',\n    value: function timeStart(name) {\n      var timer = this._getCounter(name);\n\n      timer._startTime = (0, _timestamp.getTimestamp)();\n    }\n  }, {\n    key: 'timeEnd',\n    value: function timeEnd(name) {\n      var timer = this._getCounter(name);\n\n      this.addTime(name, (0, _timestamp.getTimestamp)() - timer._startTime);\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      for (var key in this.time = (0, _timestamp.getTimestamp)(), this.counters) {\n        var counter = this.counters[key];\n        counter.count = 0, counter.time = 0;\n      }\n\n      return this;\n    }\n  }, {\n    key: 'hasTimeElapsed',\n    value: function hasTimeElapsed() {\n      0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1e3;\n      return 1e3 < (0, _timestamp.getTimestamp)() - this.time;\n    }\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var deltaTime = ((0, _timestamp.getTimestamp)() - this.time) / 1e3,\n          stats = {};\n\n      for (var key in this.counters) {\n        var counter = this.counters[key];\n        stats[counter.title] = {\n          total: counter.count,\n          fps: _Mathround(counter.count / deltaTime)\n        }, counter.time && (stats[counter.title].totalTime = (0, _formatters.formatTime)(counter.time), stats[counter.title].avgTime = (0, _formatters.formatTime)(counter.time / counter.count));\n      }\n\n      return stats;\n    }\n  }, {\n    key: 'getStatsTable',\n    value: function getStatsTable() {\n      var stats = this.getStats();\n\n      for (var key in stats) {\n        0 === stats[key].total && delete stats[key];\n      }\n\n      return stats;\n    }\n  }, {\n    key: 'getStatNames',\n    value: function getStatNames() {\n      return Object.keys(this.counters);\n    }\n  }, {\n    key: 'get',\n    value: function get(name) {\n      var counter = this._getCounter(name);\n\n      return counter.count;\n    }\n  }, {\n    key: 'getCount',\n    value: function getCount(name) {\n      var counter = this._getCounter(name);\n\n      return counter.count;\n    }\n  }, {\n    key: 'getFPS',\n    value: function getFPS(name) {\n      var counter = this._getCounter(name),\n          deltaTime = ((0, _timestamp.getTimestamp)() - this.time) / 1e3;\n\n      return _Mathround(counter.count / deltaTime);\n    }\n  }, {\n    key: 'getTimeString',\n    value: function getTimeString() {\n      return this.id + ':' + (0, _formatters.formatTime)(this.time) + '(' + this.count + ')';\n    }\n  }, {\n    key: 'oneSecondPassed',\n    value: function oneSecondPassed() {\n      var deltaTime = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1e3;\n      return this.hasTimeElapsed(deltaTime);\n    }\n  }, {\n    key: '_getCounter',\n    value: function _getCounter(name) {\n      var counter = this.counters[name];\n      return counter || (counter = {\n        title: name,\n        unit: '',\n        timer: !1,\n        count: 0,\n        time: 0,\n        totalTime: 0,\n        averageTime: 0\n      }, this.counters[name] = counter), counter;\n    }\n  }, {\n    key: '_incrementTimer',\n    value: function _incrementTimer(counter, time, count) {\n      counter.count += count, counter.totalTime += time, counter.averageTime = counter.totalTime / count;\n    }\n  }]), Stats;\n}();\n\nexports.default = Stats;","map":null,"metadata":{},"sourceType":"script"}