{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\"; //\n// A pass that renders a given scene directly on screen or into the read buffer\n// for further processing.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport Pass from './pass';\n\nvar RenderPass =\n/*#__PURE__*/\nfunction (_Pass) {\n  _inherits(RenderPass, _Pass);\n\n  function RenderPass(gl) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, RenderPass);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RenderPass).call(this, gl, Object.assign({\n      id: 'render-pass'\n    }, props)));\n  }\n\n  _createClass(RenderPass, [{\n    key: \"_renderPass\",\n    value: function _renderPass(_ref) {\n      var animationProps = _ref.animationProps;\n      var _this$props = this.props,\n          _this$props$models = _this$props.models,\n          models = _this$props$models === void 0 ? [] : _this$props$models,\n          drawParams = _this$props.drawParams;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = models[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var model = _step.value;\n          model.draw(Object.assign({}, drawParams, {\n            animationProps: animationProps\n          }));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return RenderPass;\n}(Pass);\n\nexport { RenderPass as default };","map":null,"metadata":{},"sourceType":"module"}