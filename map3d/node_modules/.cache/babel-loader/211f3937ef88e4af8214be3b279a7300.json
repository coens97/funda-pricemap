{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _react = require('react');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _viewportMercatorProject = require('viewport-mercator-project');\n\nvar _autobind = require('../utils/autobind');\n\nvar _autobind2 = _interopRequireDefault(_autobind);\n\nvar _dynamicPosition = require('../utils/dynamic-position');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar propTypes = {\n  // Longitude of the anchor point\n  longitude: _propTypes2.default.number.isRequired,\n  // Latitude of the anchor point\n  latitude: _propTypes2.default.number.isRequired,\n  // Offset from the left\n  offsetLeft: _propTypes2.default.number,\n  // Offset from the top\n  offsetTop: _propTypes2.default.number,\n  // Size of the tip\n  tipSize: _propTypes2.default.number,\n  // Whether to show close button\n  closeButton: _propTypes2.default.bool,\n  // Whether to close on click\n  closeOnClick: _propTypes2.default.bool,\n  // The popup's location relative to the coordinate\n  anchor: _propTypes2.default.oneOf((0, _keys2.default)(_dynamicPosition.ANCHOR_POSITION)),\n  // Whether the popup anchor should be auto-adjusted to fit within the container\n  dynamicPosition: _propTypes2.default.bool,\n  // Callback when component is closed\n  onClose: _propTypes2.default.func\n}; // Copyright (c) 2015 Uber Technologies, Inc.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar defaultProps = {\n  offsetLeft: 0,\n  offsetTop: 0,\n  tipSize: 10,\n  anchor: 'bottom',\n  dynamicPosition: true,\n  closeButton: true,\n  closeOnClick: true,\n  onClose: function onClose() {}\n};\nvar contextTypes = {\n  viewport: _propTypes2.default.instanceOf(_viewportMercatorProject.PerspectiveMercatorViewport)\n};\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the popup's position when the parent re-renders.\n */\n\nvar Popup = function (_Component) {\n  (0, _inherits3.default)(Popup, _Component);\n\n  function Popup(props) {\n    (0, _classCallCheck3.default)(this, Popup);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Popup.__proto__ || (0, _getPrototypeOf2.default)(Popup)).call(this, props));\n\n    (0, _autobind2.default)(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(Popup, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Container just got a size, re-calculate position\n      this.forceUpdate();\n    }\n  }, {\n    key: '_getPosition',\n    value: function _getPosition(x, y) {\n      var viewport = this.context.viewport;\n      var _props = this.props,\n          anchor = _props.anchor,\n          dynamicPosition = _props.dynamicPosition,\n          tipSize = _props.tipSize;\n\n      if (this._content) {\n        return dynamicPosition ? (0, _dynamicPosition.getDynamicPosition)({\n          x: x,\n          y: y,\n          anchor: anchor,\n          padding: tipSize,\n          width: viewport.width,\n          height: viewport.height,\n          selfWidth: this._content.clientWidth,\n          selfHeight: this._content.clientHeight\n        }) : anchor;\n      }\n\n      return anchor;\n    }\n  }, {\n    key: '_onClose',\n    value: function _onClose() {\n      this.props.onClose();\n    }\n  }, {\n    key: '_contentLoaded',\n    value: function _contentLoaded(ref) {\n      this._content = ref;\n    }\n  }, {\n    key: '_renderTip',\n    value: function _renderTip() {\n      var tipSize = this.props.tipSize;\n      return (0, _react.createElement)('div', {\n        key: 'tip',\n        className: 'mapboxgl-popup-tip',\n        style: {\n          borderWidth: tipSize\n        }\n      });\n    }\n  }, {\n    key: '_renderContent',\n    value: function _renderContent() {\n      var _props2 = this.props,\n          closeButton = _props2.closeButton,\n          children = _props2.children;\n      return (0, _react.createElement)('div', {\n        key: 'content',\n        ref: this._contentLoaded,\n        className: 'mapboxgl-popup-content'\n      }, [closeButton && (0, _react.createElement)('button', {\n        key: 'close-button',\n        className: 'mapboxgl-popup-close-button',\n        type: 'button',\n        onClick: this._onClose\n      }, 'Ã—'), children]);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          longitude = _props3.longitude,\n          latitude = _props3.latitude,\n          offsetLeft = _props3.offsetLeft,\n          offsetTop = _props3.offsetTop,\n          closeOnClick = _props3.closeOnClick;\n\n      var _context$viewport$pro = this.context.viewport.project([longitude, latitude]),\n          _context$viewport$pro2 = (0, _slicedToArray3.default)(_context$viewport$pro, 2),\n          x = _context$viewport$pro2[0],\n          y = _context$viewport$pro2[1];\n\n      var positionType = this._getPosition(x, y);\n\n      var anchorPosition = _dynamicPosition.ANCHOR_POSITION[positionType];\n      var containerStyle = {\n        position: 'absolute',\n        left: x + offsetLeft,\n        top: y + offsetTop,\n        transform: 'translate(' + -anchorPosition.x * 100 + '%, ' + -anchorPosition.y * 100 + '%)'\n      };\n      return (0, _react.createElement)('div', {\n        className: 'mapboxgl-popup mapboxgl-popup-anchor-' + positionType,\n        style: containerStyle,\n        onClick: closeOnClick ? this._onClose : null\n      }, [this._renderTip(), this._renderContent()]);\n    }\n  }]);\n  return Popup;\n}(_react.Component);\n\nexports.default = Popup;\nPopup.displayName = 'Popup';\nPopup.propTypes = propTypes;\nPopup.defaultProps = defaultProps;\nPopup.contextTypes = contextTypes;","map":null,"metadata":{},"sourceType":"script"}