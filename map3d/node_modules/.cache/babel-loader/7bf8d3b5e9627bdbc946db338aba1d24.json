{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Vector3 } from 'math.gl';\nimport { createMat4, transformVector } from './math-utils';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nimport vec2_lerp from 'gl-vec2/lerp';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\nexport function lngLatToWorld(_ref, scale) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      lng = _ref2[0],\n      lat = _ref2[1];\n\n  scale *= TILE_SIZE;\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = scale * (lambda2 + PI) / (2 * PI);\n  var y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref3, scale) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      x = _ref4[0],\n      y = _ref4[1];\n\n  scale *= TILE_SIZE;\n  var lambda2 = x / scale * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(PI - y / scale * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref5) {\n  var latitude = _ref5.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref6) {\n  var latitude = _ref6.latitude,\n      longitude = _ref6.longitude,\n      zoom = _ref6.zoom,\n      scale = _ref6.scale,\n      _ref6$highPrecision = _ref6.highPrecision,\n      highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n  var result = {};\n  var worldSize = TILE_SIZE * scale;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var pixelsPerDegreeX = worldSize / 360;\n  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.pixelsPerMeter = [altPixelsPerMeter, altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, 1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n  result.pixelsPerDegree = [pixelsPerDegreeX, pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, 1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n    result.pixelsPerDegree2 = [0, pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  return result;\n}\nexport function getWorldPosition(_ref7) {\n  var longitude = _ref7.longitude,\n      latitude = _ref7.latitude,\n      zoom = _ref7.zoom,\n      scale = _ref7.scale,\n      meterOffset = _ref7.meterOffset,\n      _ref7$distanceScales = _ref7.distanceScales,\n      distanceScales = _ref7$distanceScales === void 0 ? null : _ref7$distanceScales;\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n  var center2d = lngLatToWorld([longitude, latitude], scale);\n  var center = new Vector3(center2d[0], center2d[1], 0);\n\n  if (meterOffset) {\n    distanceScales = distanceScales || getDistanceScales({\n      latitude: latitude,\n      longitude: longitude,\n      scale: scale\n    });\n    var pixelPosition = new Vector3(meterOffset).scale(distanceScales.pixelsPerMeter).scale([1, -1, 1]);\n    center.add(pixelPosition);\n  }\n\n  return center;\n}\nexport function getViewMatrix(_ref8) {\n  var height = _ref8.height,\n      pitch = _ref8.pitch,\n      bearing = _ref8.bearing,\n      altitude = _ref8.altitude,\n      _ref8$center = _ref8.center,\n      center = _ref8$center === void 0 ? null : _ref8$center,\n      _ref8$flipY = _ref8.flipY,\n      flipY = _ref8$flipY === void 0 ? false : _ref8$flipY;\n  var vm = createMat4();\n  mat4_translate(vm, vm, [0, 0, -altitude]);\n  mat4_scale(vm, vm, [1, 1, 1 / height]);\n  mat4_rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4_rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4_scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4_translate(vm, vm, new Vector3(center).negate());\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(_ref9) {\n  var width = _ref9.width,\n      height = _ref9.height,\n      _ref9$altitude = _ref9.altitude,\n      altitude = _ref9$altitude === void 0 ? DEFAULT_ALTITUDE : _ref9$altitude,\n      _ref9$pitch = _ref9.pitch,\n      pitch = _ref9$pitch === void 0 ? 0 : _ref9$pitch,\n      _ref9$farZMultiplier = _ref9.farZMultiplier,\n      farZMultiplier = _ref9$farZMultiplier === void 0 ? 1 : _ref9$farZMultiplier;\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var halfFov = Math.atan(0.5 / altitude);\n  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n  var farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n  return {\n    fov: 2 * Math.atan(height / 2 / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: 0.1,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref10) {\n  var width = _ref10.width,\n      height = _ref10.height,\n      pitch = _ref10.pitch,\n      altitude = _ref10.altitude,\n      _ref10$farZMultiplier = _ref10.farZMultiplier,\n      farZMultiplier = _ref10$farZMultiplier === void 0 ? 10 : _ref10$farZMultiplier;\n\n  var _getProjectionParamet = getProjectionParameters({\n    width: width,\n    height: height,\n    altitude: altitude,\n    pitch: pitch,\n    farZMultiplier: farZMultiplier\n  }),\n      fov = _getProjectionParamet.fov,\n      aspect = _getProjectionParamet.aspect,\n      near = _getProjectionParamet.near,\n      far = _getProjectionParamet.far;\n\n  var projectionMatrix = mat4_perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      _xyz$ = _xyz[2],\n      z = _xyz$ === void 0 ? 0 : _xyz$;\n\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _xyz2 = _slicedToArray(xyz, 3),\n      x = _xyz2[0],\n      y = _xyz2[1],\n      z = _xyz2[2];\n\n  assert(Number.isFinite(x) && Number.isFinite(y));\n\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2_lerp([], coord0, coord1, t);\n}","map":null,"metadata":{},"sourceType":"module"}