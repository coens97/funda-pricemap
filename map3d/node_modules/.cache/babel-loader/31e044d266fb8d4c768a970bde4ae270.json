{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport PropTypes from 'prop-types';\nimport { EventManager } from 'mjolnir.js';\nimport MapControls from '../controllers/map-controls';\nimport { MAPBOX_LIMITS } from '../controllers/map-state';\nvar PREFIX = '-webkit-';\nvar CURSOR = {\n  GRABBING: PREFIX + 'grabbing',\n  GRAB: PREFIX + 'grab',\n  POINTER: 'pointer'\n};\nvar propTypes = {\n  width: PropTypes.number.isRequired\n  /** The width of the map. */\n  ,\n  height: PropTypes.number.isRequired\n  /** The height of the map. */\n  ,\n  longitude: PropTypes.number.isRequired\n  /** The longitude of the center of the map. */\n  ,\n  latitude: PropTypes.number.isRequired\n  /** The latitude of the center of the map. */\n  ,\n  zoom: PropTypes.number.isRequired\n  /** The tile zoom level of the map. */\n  ,\n  bearing: PropTypes.number\n  /** Specify the bearing of the viewport */\n  ,\n  pitch: PropTypes.number\n  /** Specify the pitch of the viewport */\n  ,\n  // Note: Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n  altitude: PropTypes.number\n  /** Altitude of the viewport camera. Default 1.5 \"screen heights\" */\n  ,\n\n  /** Viewport constraints */\n  maxZoom: PropTypes.number,\n  // Max zoom level\n  minZoom: PropTypes.number,\n  // Min zoom level\n  maxPitch: PropTypes.number,\n  // Max pitch in degrees\n  minPitch: PropTypes.number,\n  // Min pitch in degrees\n\n  /**\n   * `onViewportChange` callback is fired when the user interacted with the\n   * map. The object passed to the callback contains viewport properties\n   * such as `longitude`, `latitude`, `zoom` etc.\n   */\n  onViewportChange: PropTypes.func,\n\n  /** Enables control event handling */\n  scrollZoom: PropTypes.bool,\n  // Scroll to zoom\n  dragPan: PropTypes.bool,\n  // Drag to pan\n  dragRotate: PropTypes.bool,\n  // Drag to rotate\n  doubleClickZoom: PropTypes.bool,\n  // Double click to zoom\n  touchZoomRotate: PropTypes.bool,\n  // Pinch to zoom / rotate\n\n  /** Accessor that returns a cursor style to show interactive state */\n  getCursor: PropTypes.func,\n  // A map control instance to replace the default map controls\n  // The object must expose one property: `events` as an array of subscribed\n  // event names; and two methods: `setState(state)` and `handle(event)`\n  controls: PropTypes.shape({\n    events: PropTypes.arrayOf(PropTypes.string),\n    handleEvent: PropTypes.func\n  })\n};\n\nvar getDefaultCursor = function getDefaultCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? CURSOR.GRABBING : CURSOR.GRAB;\n};\n\nvar defaultProps = Object.assign({}, MAPBOX_LIMITS, {\n  onViewportChange: null,\n  scrollZoom: true,\n  dragPan: true,\n  dragRotate: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  getCursor: getDefaultCursor\n});\n\nvar MapControllerJS = function () {\n  function MapControllerJS(props) {\n    _classCallCheck(this, MapControllerJS);\n\n    props = Object.assign({}, defaultProps, props);\n    this.props = props;\n    this.state = {\n      isDragging: false // Whether the cursor is down\n\n    };\n    this.canvas = props.canvas;\n    var eventManager = new EventManager(this.canvas);\n    this._eventManager = eventManager; // If props.controls is not provided, fallback to default MapControls instance\n    // Cannot use defaultProps here because it needs to be per map instance\n\n    this._controls = this.props.controls || new MapControls();\n\n    this._controls.setOptions(Object.assign({}, this.props, {\n      onStateChange: this._onInteractiveStateChange.bind(this),\n      eventManager: eventManager\n    }));\n  }\n\n  _createClass(MapControllerJS, [{\n    key: 'setProps',\n    value: function setProps(props) {\n      props = Object.assign({}, this.props, props);\n      this.props = props;\n\n      this._controls.setOptions(props);\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      this._eventManager.destroy();\n    }\n  }, {\n    key: '_onInteractiveStateChange',\n    value: function _onInteractiveStateChange(_ref2) {\n      var _ref2$isDragging = _ref2.isDragging,\n          isDragging = _ref2$isDragging === undefined ? false : _ref2$isDragging;\n\n      if (isDragging !== this.state.isDragging) {\n        this.state.isDragging = isDragging;\n        var getCursor = this.props.getCursor;\n        this.canvas.style.cursor = getCursor(this.state);\n      }\n    }\n  }]);\n\n  return MapControllerJS;\n}();\n\nexport default MapControllerJS;\nMapControllerJS.displayName = 'MapController';\nMapControllerJS.propTypes = propTypes;\nMapControllerJS.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}