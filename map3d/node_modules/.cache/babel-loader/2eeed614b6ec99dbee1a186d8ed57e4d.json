{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from '../experimental/lib/effect-manager';\nimport Effect from '../experimental/lib/effect';\nimport log from '../utils/log';\nimport GL from 'luma.gl/constants';\nimport { AnimationLoop, createGLContext, trackContextState, setParameters } from 'luma.gl';\nimport { Stats } from 'probe.gl';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport VENDOR_PREFIX from '../utils/css-vendor-prefix';\n/* global document */\n\nfunction noop() {}\n\nvar PREFIX = VENDOR_PREFIX === '-webkit-' ? VENDOR_PREFIX : '';\nvar CURSOR = {\n  GRABBING: \"\".concat(PREFIX, \"grabbing\"),\n  GRAB: \"\".concat(PREFIX, \"grab\"),\n  POINTER: 'pointer'\n};\n\nvar getCursor = function getCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? CURSOR.GRABBING : CURSOR.GRAB;\n};\n\nfunction getPropTypes(PropTypes) {\n  // Note: Arrays (layers, views, ) can contain falsy values\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    // layer/view/controller settings\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n    // GL settings\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.bool,\n    // Callbacks\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLayerClick: PropTypes.func,\n    onLayerHover: PropTypes.func,\n    onLoad: PropTypes.func,\n    // Debug settings\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n    // Experimental props\n    // Forces a redraw every animation frame\n    _animate: PropTypes.bool\n  };\n}\n\nvar defaultProps = {\n  id: 'deckgl-overlay',\n  width: '100%',\n  height: '100%',\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  _animate: false,\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLayerClick: null,\n  onLayerHover: null,\n  onLoad: noop,\n  getCursor: getCursor,\n  debug: false,\n  drawPickingColors: false\n};\n\nvar Deck =\n/*#__PURE__*/\nfunction () {\n  function Deck(props) {\n    _classCallCheck(this, Deck);\n\n    props = Object.assign({}, defaultProps, props);\n    this.width = 0; // \"read-only\", auto-updated from canvas\n\n    this.height = 0; // \"read-only\", auto-updated from canvas\n    // Maps view descriptors to vieports, rebuilds when width/height/viewState/views change\n\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this._needsRedraw = true;\n    this.viewState = props.initialViewState || null; // Internal view state if no callback is supplied\n\n    this.interactiveState = {\n      isDragging: false // Whether the cursor is down\n\n    }; // Bind methods\n\n    this._onClick = this._onClick.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n    this._onRendererInitialized = this._onRendererInitialized.bind(this);\n    this._onRenderFrame = this._onRenderFrame.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._onInteractiveStateChange = this._onInteractiveStateChange.bind(this);\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n\n    this.animationLoop = this._createAnimationLoop(props);\n    this.setProps(props);\n    this.animationLoop.start();\n  }\n\n  _createClass(Deck, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.animationLoop.stop();\n      this.animationLoop = null;\n\n      if (this.layerManager) {\n        this.layerManager.finalize();\n        this.layerManager = null;\n      }\n\n      if (this.viewManager) {\n        this.viewManager.finalize();\n        this.viewManager = null;\n      }\n\n      if (this.eventManager) {\n        this.eventManager.destroy();\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.stats.timeStart('deck.setProps');\n      props = Object.assign({}, this.props, props);\n      this.props = props; // Update CSS size of canvas\n\n      this._setCanvasSize(props); // We need to overwrite CSS style width and height with actual, numeric values\n\n\n      var newProps = Object.assign({}, props, {\n        views: this._getViews(props),\n        width: this.width,\n        height: this.height\n      });\n\n      var viewState = this._getViewState(props);\n\n      if (viewState) {\n        newProps.viewState = viewState;\n      } // Update view manager props\n\n\n      if (this.viewManager) {\n        this.viewManager.setProps(newProps);\n      } // Update layer manager props (but not size)\n\n\n      if (this.layerManager) {\n        this.layerManager.setProps(newProps);\n      } // Update animation loop\n\n\n      if (this.animationLoop) {\n        this.animationLoop.setProps(newProps);\n      }\n\n      this.stats.timeEnd('deck.setProps');\n    } // Public API\n    // Check if a redraw is needed\n    // Returns `false` or a string summarizing the redraw reason\n\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$clearRedrawFlag = _ref2.clearRedrawFlags,\n          clearRedrawFlags = _ref2$clearRedrawFlag === void 0 ? true : _ref2$clearRedrawFlag;\n\n      if (this.props._animate) {\n        return 'Deck._animate';\n      }\n\n      var redraw = this._needsRedraw;\n\n      if (clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      var viewManagerNeedsRedraw = this.viewManager.needsRedraw({\n        clearRedrawFlags: clearRedrawFlags\n      });\n      var layerManagerNeedsRedraw = this.layerManager.needsRedraw({\n        clearRedrawFlags: clearRedrawFlags\n      });\n      redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      return this.viewManager.views;\n    } // Get a set of viewports for a given width and height\n\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      return this.viewManager.getViewports(rect);\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          _ref3$radius = _ref3.radius,\n          radius = _ref3$radius === void 0 ? 0 : _ref3$radius,\n          _ref3$layerIds = _ref3.layerIds,\n          layerIds = _ref3$layerIds === void 0 ? null : _ref3$layerIds;\n      this.stats.timeStart('deck.pickObject');\n      var selectedInfos = this.layerManager.pickObject({\n        x: x,\n        y: y,\n        radius: radius,\n        layerIds: layerIds,\n        viewports: this.getViewports({\n          x: x,\n          y: y\n        }),\n        mode: 'query',\n        depth: 1\n      });\n      this.stats.timeEnd('deck.pickObject');\n      return selectedInfos.length ? selectedInfos[0] : null;\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y,\n          _ref4$radius = _ref4.radius,\n          radius = _ref4$radius === void 0 ? 0 : _ref4$radius,\n          _ref4$layerIds = _ref4.layerIds,\n          layerIds = _ref4$layerIds === void 0 ? null : _ref4$layerIds,\n          _ref4$depth = _ref4.depth,\n          depth = _ref4$depth === void 0 ? 10 : _ref4$depth;\n      this.stats.timeStart('deck.pickMultipleObjects');\n      var selectedInfos = this.layerManager.pickObject({\n        x: x,\n        y: y,\n        radius: radius,\n        layerIds: layerIds,\n        viewports: this.getViewports({\n          x: x,\n          y: y\n        }),\n        mode: 'query',\n        depth: depth\n      });\n      this.stats.timeEnd('deck.pickMultipleObjects');\n      return selectedInfos;\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(_ref5) {\n      var x = _ref5.x,\n          y = _ref5.y,\n          _ref5$width = _ref5.width,\n          width = _ref5$width === void 0 ? 1 : _ref5$width,\n          _ref5$height = _ref5.height,\n          height = _ref5$height === void 0 ? 1 : _ref5$height,\n          _ref5$layerIds = _ref5.layerIds,\n          layerIds = _ref5$layerIds === void 0 ? null : _ref5$layerIds;\n      this.stats.timeStart('deck.pickObjects');\n      var infos = this.layerManager.pickObjects({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        layerIds: layerIds,\n        viewports: this.getViewports({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        })\n      });\n      this.stats.timeEnd('deck.pickObjects');\n      return infos;\n    } // Private Methods\n    // canvas, either string, canvas or `null`\n\n  }, {\n    key: \"_createCanvas\",\n    value: function _createCanvas(props) {\n      var canvas = props.canvas; // TODO EventManager should accept element id\n\n      if (typeof canvas === 'string') {\n        /* global document */\n        canvas = document.getElementById(canvas);\n        assert(canvas);\n      }\n\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        var parent = props.parent || document.body;\n        parent.appendChild(canvas);\n      }\n\n      var id = props.id,\n          style = props.style;\n      canvas.id = id;\n      Object.assign(canvas.style, style);\n      return canvas;\n    } // Updates canvas width and/or height, if provided as props\n\n  }, {\n    key: \"_setCanvasSize\",\n    value: function _setCanvasSize(props) {\n      if (!this.canvas) {\n        return;\n      }\n\n      var width = props.width,\n          height = props.height; // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n\n      if (width || width === 0) {\n        width = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n        this.canvas.style.width = width;\n      }\n\n      if (height || height === 0) {\n        height = Number.isFinite(height) ? \"\".concat(height, \"px\") : height; // Note: position==='absolute' required for height 100% to work\n\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = height;\n      }\n    } // If canvas size has changed, updates\n\n  }, {\n    key: \"_updateCanvasSize\",\n    value: function _updateCanvasSize() {\n      if (this._checkForCanvasSizeChange()) {\n        var width = this.width,\n            height = this.height;\n        this.viewManager.setProps({\n          width: width,\n          height: height\n        });\n        this.props.onResize({\n          width: this.width,\n          height: this.height\n        });\n      }\n    } // If canvas size has changed, reads out the new size and returns true\n\n  }, {\n    key: \"_checkForCanvasSizeChange\",\n    value: function _checkForCanvasSizeChange() {\n      var canvas = this.canvas;\n\n      if (canvas && (this.width !== canvas.clientWidth || this.height !== canvas.clientHeight)) {\n        this.width = canvas.clientWidth;\n        this.height = canvas.clientHeight;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_createAnimationLoop\",\n    value: function _createAnimationLoop(props) {\n      var _this = this;\n\n      var width = props.width,\n          height = props.height,\n          gl = props.gl,\n          glOptions = props.glOptions,\n          debug = props.debug,\n          useDevicePixels = props.useDevicePixels,\n          autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n      return new AnimationLoop({\n        width: width,\n        height: height,\n        useDevicePixels: useDevicePixels,\n        autoResizeDrawingBuffer: autoResizeDrawingBuffer,\n        onCreateContext: function onCreateContext(opts) {\n          return gl || createGLContext(Object.assign({}, glOptions, opts, {\n            canvas: _this.canvas,\n            debug: debug\n          }));\n        },\n        onInitialize: this._onRendererInitialized,\n        onRender: this._onRenderFrame,\n        onBeforeRender: props.onBeforeRender,\n        onAfterRender: props.onAfterRender\n      });\n    } // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n    // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n\n  }, {\n    key: \"_getViewState\",\n    value: function _getViewState(props) {\n      return props.viewState || this.viewState;\n    } // Get the view descriptor list\n\n  }, {\n    key: \"_getViews\",\n    value: function _getViews(props) {\n      // Default to a full screen map view port\n      var views = props.views || [new MapView({\n        id: 'default-view'\n      })];\n      views = Array.isArray(views) ? views : [views];\n\n      if (views.length && props.controller) {\n        // Backward compatibility: support controller prop\n        views[0].props.controller = props.controller;\n      }\n\n      return views;\n    }\n  }, {\n    key: \"_pickAndCallback\",\n    value: function _pickAndCallback(options) {\n      var pos = options.event.offsetCenter; // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n\n      if (!pos) {\n        return;\n      }\n\n      var radius = this.props.pickingRadius;\n      var selectedInfos = this.layerManager.pickObject({\n        x: pos.x,\n        y: pos.y,\n        radius: radius,\n        viewports: this.getViewports(pos),\n        mode: options.mode,\n        depth: 1\n      });\n\n      if (options.callback && selectedInfos) {\n        var firstInfo = selectedInfos.find(function (info) {\n          return info.index >= 0;\n        }) || null; // As per documentation, send null value when no valid object is picked.\n\n        options.callback(firstInfo, selectedInfos, options.event.srcEvent);\n      }\n    }\n  }, {\n    key: \"_updateCursor\",\n    value: function _updateCursor() {\n      if (this.canvas) {\n        this.canvas.style.cursor = this.props.getCursor(this.interactiveState);\n      }\n    } // Updates animation props on the layer context\n\n  }, {\n    key: \"_updateAnimationProps\",\n    value: function _updateAnimationProps(animationProps) {\n      this.layerManager.context.animationProps = animationProps;\n    } // Deep integration (Mapbox styles)\n\n  }, {\n    key: \"_setGLContext\",\n    value: function _setGLContext(gl) {\n      if (this.layerManager) {\n        return;\n      } // if external context...\n\n\n      if (!this.canvas) {\n        this.canvas = gl.canvas;\n        trackContextState(gl, {\n          enable: true,\n          copyState: true\n        });\n      }\n\n      setParameters(gl, {\n        blend: true,\n        blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n        polygonOffsetFill: true,\n        depthTest: true,\n        depthFunc: GL.LEQUAL\n      });\n      this.props.onWebGLInitialized(gl);\n\n      if (!this.props._customRender) {\n        this.eventManager = new EventManager(gl.canvas, {\n          events: {\n            click: this._onClick,\n            pointermove: this._onPointerMove,\n            pointerleave: this._onPointerLeave\n          }\n        });\n      }\n\n      this.viewManager = new ViewManager({\n        eventManager: this.eventManager,\n        onViewStateChange: this._onViewStateChange,\n        onInteractiveStateChange: this._onInteractiveStateChange\n      }); // Note: avoid React setState due GL animation loop / setState timing issue\n\n      this.layerManager = new LayerManager(gl, {\n        stats: this.stats\n      });\n      this.effectManager = new EffectManager({\n        gl: gl,\n        layerManager: this.layerManager\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.props.effects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var effect = _step.value;\n          this.effectManager.addEffect(effect);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.setProps(this.props);\n\n      this._updateCanvasSize();\n\n      this.props.onLoad();\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(redrawReason) {\n      var gl = this.layerManager.context.gl;\n      setParameters(gl, this.props.parameters);\n      this.props.onBeforeRender({\n        gl: gl\n      });\n      this.layerManager.drawLayers({\n        pass: 'screen',\n        viewports: this.viewManager.getViewports(),\n        views: this.viewManager.getViews(),\n        redrawReason: redrawReason,\n        drawPickingColors: this.props.drawPickingColors,\n        // Debug picking, helps in framebuffered layers\n        customRender: Boolean(this.props._customRender)\n      });\n      this.props.onAfterRender({\n        gl: gl\n      });\n    } // Callbacks\n\n  }, {\n    key: \"_onRendererInitialized\",\n    value: function _onRendererInitialized(_ref6) {\n      var gl = _ref6.gl;\n\n      this._setGLContext(gl);\n    }\n  }, {\n    key: \"_onRenderFrame\",\n    value: function _onRenderFrame(animationProps) {\n      // Log perf stats every second\n      if (this.stats.oneSecondPassed()) {\n        var table = this.stats.getStatsTable();\n        this.stats.reset();\n        log.table(3, table)();\n      }\n\n      this._updateCanvasSize();\n\n      this._updateCursor(); // Update layers if needed (e.g. some async prop has loaded)\n      // Note: This can trigger a redraw\n\n\n      this.layerManager.updateLayers();\n      this.stats.bump('fps'); // Needs to be done before drawing\n\n      this._updateAnimationProps(animationProps); // Check if we need to redraw\n\n\n      var redrawReason = this.needsRedraw({\n        clearRedrawFlags: true\n      });\n\n      if (!redrawReason) {\n        return;\n      }\n\n      this.stats.bump('render-fps');\n\n      if (this.props._customRender) {\n        this.props._customRender();\n      } else {\n        this._drawLayers(redrawReason);\n      }\n    } // Callbacks\n\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(params) {\n      // Let app know that view state is changing, and give it a chance to change it\n      var viewState = this.props.onViewStateChange(params) || params.viewState; // If initialViewState was set on creation, auto track position\n\n      if (this.viewState) {\n        this.viewState[params.viewId] = viewState;\n        this.viewManager.setProps({\n          viewState: viewState\n        });\n      }\n    }\n  }, {\n    key: \"_onInteractiveStateChange\",\n    value: function _onInteractiveStateChange(_ref7) {\n      var _ref7$isDragging = _ref7.isDragging,\n          isDragging = _ref7$isDragging === void 0 ? false : _ref7$isDragging;\n\n      if (isDragging !== this.interactiveState.isDragging) {\n        this.interactiveState.isDragging = isDragging;\n      }\n    } // Route move events to layers. call the `onHover` prop of any picked layer,\n    // and `onLayerHover` is called directly from here with any picking info generated by `pickLayer`.\n    // @param {Object} event  A mjolnir.js event\n\n  }, {\n    key: \"_onClick\",\n    value: function _onClick(event) {\n      this._pickAndCallback({\n        callback: this.props.onLayerClick,\n        event: event,\n        mode: 'click'\n      });\n    }\n  }, {\n    key: \"_onPointerMove\",\n    value: function _onPointerMove(event) {\n      if (event.leftButton || event.rightButton) {\n        // Do not trigger onHover callbacks if mouse button is down.\n        return;\n      }\n\n      this._pickAndCallback({\n        callback: this.props.onLayerHover,\n        event: event,\n        mode: 'hover'\n      });\n    }\n  }, {\n    key: \"_onPointerLeave\",\n    value: function _onPointerLeave(event) {\n      this.layerManager.pickObject({\n        x: -1,\n        y: -1,\n        viewports: [],\n        radius: 1,\n        mode: 'hover'\n      });\n\n      if (this.props.onLayerHover) {\n        this.props.onLayerHover(null, [], event.srcEvent);\n      }\n    }\n  }]);\n\n  return Deck;\n}();\n\nexport { Deck as default };\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}