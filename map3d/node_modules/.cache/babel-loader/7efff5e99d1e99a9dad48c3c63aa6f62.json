{"ast":null,"code":"import { mod } from '../utils/math-utils';\nvar VIEWPORT_PROPS = ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'];\nvar WRAPPED_ANGULAR_PROPS = {\n  longitude: 1,\n  bearing: 1\n};\nexport function lerp(start, end, step) {\n  if (Array.isArray(start)) {\n    return start.map(function (element, index) {\n      return lerp(element, end[index], step);\n    });\n  }\n\n  return step * end + (1 - step) * start;\n}\nexport function isValid(prop) {\n  return Number.isFinite(prop) || Array.isArray(prop);\n}\n\nfunction isWrappedAngularProp(propName) {\n  return WRAPPED_ANGULAR_PROPS[propName];\n}\n\nexport function getEndValueByShortestPath(propName, startValue, endValue) {\n  if (isWrappedAngularProp(propName) && Math.abs(endValue - startValue) > 180) {\n    endValue = endValue < 0 ? endValue + 360 : endValue - 360;\n  }\n\n  return endValue;\n} // TODO/xiaoji: This should be merged with the controller's prop constraint system\n\nexport function extractViewportFrom(props) {\n  var viewport = {};\n  VIEWPORT_PROPS.forEach(function (key) {\n    var value = props[key];\n\n    if (isValid(value)) {\n      viewport[key] = value; // Normalize longitude and bearing into [-180, 180) range\n      // This gurantees the props are in same range when they are interpolated.\n\n      if (isWrappedAngularProp(key)) {\n        viewport[key] = mod(value + 180, 360) - 180;\n      }\n    }\n  });\n  return viewport;\n}","map":null,"metadata":{},"sourceType":"module"}