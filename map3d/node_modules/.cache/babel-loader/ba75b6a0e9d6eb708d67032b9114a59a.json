{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { uid } from '../utils';\nimport assert from '../utils/assert'; // Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\n\nexport var DRAW_MODE = {\n  POINTS: 0x0000,\n  // draw single points.\n  LINES: 0x0001,\n  // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002,\n  // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003,\n  // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004,\n  // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005,\n  // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n\n}; // Helper function to handle string draw modes - when using this library without WebGL constants\n\nexport function getDrawMode(drawMode) {\n  var mode = typeof drawMode === 'string' ? DRAW_MODE[drawMode] || DRAW_MODE.TRIANGLES : drawMode;\n  assert(mode >= 0 && mode <= DRAW_MODE.TRIANGLE_FAN, 'Illegal drawMode');\n  return mode;\n}\n\nvar Geometry =\n/*#__PURE__*/\nfunction () {\n  function Geometry() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Geometry);\n\n    var id = opts.id,\n        _opts$drawMode = opts.drawMode,\n        drawMode = _opts$drawMode === void 0 ? DRAW_MODE.TRIANGLES : _opts$drawMode,\n        _opts$vertexCount = opts.vertexCount,\n        vertexCount = _opts$vertexCount === void 0 ? undefined : _opts$vertexCount,\n        attributes = opts.attributes;\n    this.id = id || uid(this.constructor.name);\n    this.drawMode = getDrawMode(drawMode);\n    this.vertexCount = vertexCount;\n    this.attributes = {};\n    this.needsRedraw = true;\n    this.userData = {};\n    Object.seal(this);\n\n    if (attributes) {\n      this.setAttributes(attributes);\n    }\n  }\n\n  _createClass(Geometry, [{\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.needsRedraw = redraw;\n      return this;\n    }\n  }, {\n    key: \"getNeedsRedraw\",\n    value: function getNeedsRedraw() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$clearRedrawFlags = _ref.clearRedrawFlags,\n          clearRedrawFlags = _ref$clearRedrawFlags === void 0 ? false : _ref$clearRedrawFlags;\n\n      var redraw = false;\n      redraw = redraw || this.needsRedraw;\n      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n      return redraw;\n    }\n  }, {\n    key: \"setVertexCount\",\n    value: function setVertexCount(vertexCount) {\n      this.vertexCount = vertexCount;\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount() {\n      if (this.vertexCount !== undefined) {\n        return this.vertexCount;\n      } else if (this.attributes.indices) {\n        return this.attributes.indices.value.length;\n      } else if (this.attributes.vertices) {\n        return this.attributes.vertices.value.length / 3;\n      } else if (this.attributes.positions) {\n        return this.attributes.positions.value.length / 3;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(attributeName) {\n      return Boolean(this.attributes[attributeName]);\n    }\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attributeName) {\n      var attribute = this.attributes[attributeName];\n      assert(attribute);\n      return attribute.value;\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray(attributeName) {\n      var attribute = this.attributes[attributeName];\n      assert(attribute);\n      return attribute.value;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.attributes;\n    } // Attribute\n    // value: typed array\n    // type: indices, vertices, uvs\n    // size: elements per vertex\n    // target: WebGL buffer type (string or constant)\n\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(attributes) {\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName]; // Wrap \"unwrapped\" arrays and try to autodetect their type\n\n        attribute = ArrayBuffer.isView(attribute) ? {\n          value: attribute\n        } : attribute;\n        assert(ArrayBuffer.isView(attribute.value), \"\".concat(this._print(attributeName), \": must be typed array or object with value as typed array\"));\n\n        this._autoDetectAttribute(attributeName, attribute);\n\n        this.attributes[attributeName] = attribute;\n      }\n\n      this.setNeedsRedraw();\n      return this;\n    } // Check for well known attribute names\n\n    /* eslint-disable default-case, complexity */\n\n  }, {\n    key: \"_autoDetectAttribute\",\n    value: function _autoDetectAttribute(attributeName, attribute) {\n      var category;\n\n      switch (attributeName) {\n        case 'indices':\n          category = category || 'indices';\n          break;\n\n        case 'texCoords':\n        case 'texCoord1':\n        case 'texCoord2':\n        case 'texCoord3':\n          category = 'uvs';\n          break;\n\n        case 'vertices':\n        case 'positions':\n        case 'normals':\n        case 'pickingColors':\n          category = 'vectors';\n          break;\n      } // Check for categorys\n\n\n      switch (category) {\n        case 'vectors':\n          attribute.size = attribute.size || 3;\n          break;\n\n        case 'uvs':\n          attribute.size = attribute.size || 2;\n          break;\n\n        case 'indices':\n          attribute.size = attribute.size || 1;\n          attribute.isIndexed = attribute.isIndexed === undefined ? true : attribute.isIndexed;\n          assert(attribute.value instanceof Uint16Array || attribute.value instanceof Uint32Array, 'attribute array for \"indices\" must be of integer type');\n          break;\n      }\n\n      assert(attribute.size, \"attribute \".concat(attributeName, \" needs size\"));\n    }\n    /* eslint-enable default-case, complexity */\n\n  }, {\n    key: \"_print\",\n    value: function _print(attributeName) {\n      return \"Geometry \".concat(this.id, \" attribute \").concat(attributeName);\n    }\n  }]);\n\n  return Geometry;\n}();\n\nexport { Geometry as default };","map":null,"metadata":{},"sourceType":"module"}