{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable no-console */\n\n/* global console */\n\n\nimport assert from 'assert';\nvar cache = {};\n\nfunction log(priority, arg) {\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  assert(Number.isFinite(priority), 'log priority must be a number');\n\n  if (priority <= log.priority) {\n    // Node doesn't have console.debug, but using it looks better in browser consoles\n    args = formatArgs.apply(undefined, [arg].concat(_toConsumableArray(args)));\n\n    if (console.debug) {\n      var _console;\n\n      (_console = console).debug.apply(_console, _toConsumableArray(args));\n    } else {\n      var _console2;\n\n      (_console2 = console).info.apply(_console2, _toConsumableArray(args));\n    }\n  }\n}\n\nfunction once(priority, arg) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  if (!cache[arg] && priority <= log.priority) {\n    var _console3;\n\n    args = checkForAssertionErrors(args);\n\n    (_console3 = console).error.apply(_console3, _toConsumableArray(formatArgs.apply(undefined, [arg].concat(_toConsumableArray(args)))));\n\n    cache[arg] = true;\n  }\n}\n\nfunction warn(arg) {\n  if (!cache[arg]) {\n    var _console4;\n\n    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    (_console4 = console).warn.apply(_console4, ['deck.gl: ' + arg].concat(args));\n\n    cache[arg] = true;\n  }\n}\n\nfunction error(arg) {\n  var _console5;\n\n  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  (_console5 = console).error.apply(_console5, ['deck.gl: ' + arg].concat(args));\n}\n\nfunction deprecated(oldUsage, newUsage) {\n  log.warn('`' + oldUsage + '` is deprecated and will be removed in a later version. Use `' + newUsage + '` instead');\n}\n\nfunction removed(oldUsage, newUsage) {\n  log.error('`' + oldUsage + '` is no longer supported. Use `' + newUsage + '` instead, check our upgrade-guide.md for more details');\n} // Logs a message with a time\n\n\nfunction time(priority, label) {\n  assert(Number.isFinite(priority), 'log priority must be a number');\n\n  if (priority <= log.priority) {\n    // In case the platform doesn't have console.time\n    if (console.time) {\n      console.time(label);\n    } else {\n      console.info(label);\n    }\n  }\n}\n\nfunction timeEnd(priority, label) {\n  assert(Number.isFinite(priority), 'log priority must be a number');\n\n  if (priority <= log.priority) {\n    // In case the platform doesn't have console.timeEnd\n    if (console.timeEnd) {\n      console.timeEnd(label);\n    } else {\n      console.info(label);\n    }\n  }\n}\n\nfunction group(priority, arg) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$collapsed = _ref.collapsed,\n      collapsed = _ref$collapsed === undefined ? false : _ref$collapsed;\n\n  if (priority <= log.priority) {\n    if (collapsed) {\n      console.groupCollapsed('luma.gl: ' + arg);\n    } else {\n      console.group('luma.gl: ' + arg);\n    }\n  }\n}\n\nfunction groupEnd(priority, arg) {\n  if (priority <= log.priority) {\n    console.groupEnd('luma.gl: ' + arg);\n  }\n} // Helper functions\n\n\nfunction formatArgs(firstArg) {\n  if (typeof firstArg === 'function') {\n    firstArg = firstArg();\n  }\n\n  for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  if (typeof firstArg === 'string') {\n    args.unshift('deck.gl ' + firstArg);\n  } else {\n    args.unshift(firstArg);\n    args.unshift('deck.gl');\n  }\n\n  return args;\n} // Assertions don't generate standard exceptions and don't print nicely\n\n\nfunction checkForAssertionErrors(args) {\n  var isAssertion = args && args.length > 0 && _typeof(args[0]) === 'object' && args[0] !== null && args[0].name === 'AssertionError';\n\n  if (isAssertion) {\n    args = Array.prototype.slice.call(args);\n    args.unshift('assert(' + args[0].message + ')');\n  }\n\n  return args;\n}\n\nlog.priority = 0;\nlog.log = log;\nlog.once = once;\nlog.time = time;\nlog.timeEnd = timeEnd;\nlog.warn = warn;\nlog.error = error;\nlog.deprecated = deprecated;\nlog.removed = removed;\nlog.group = group;\nlog.groupEnd = groupEnd;\nexport default log;","map":null,"metadata":{},"sourceType":"module"}