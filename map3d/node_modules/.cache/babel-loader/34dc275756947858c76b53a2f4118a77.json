{"ast":null,"code":"import assert from 'assert';\n/**\n * Wraps the argument in an array if it is not one.\n * @param {object} a - The object to wrap.\n * @return {Array} array\n **/\n\nexport function splat(a) {\n  return a ? Array.isArray(a) ? a : [a] : [];\n}\n/**\n* Provides a standard noop function.\n**/\n\nexport function noop() {}\nvar uidCounters = {};\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\n\nexport function uid() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  uidCounters[id] = uidCounters[id] || 1;\n  var count = uidCounters[id]++;\n  return id + '-' + count;\n}\n/**\n * Merge multiple objects into one.\n * @param {...object} objects - The objects to merge.\n * @return {object} object\n **/\n\nexport function merge(objects) {\n  var mix = {};\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    var object = arguments[i];\n\n    if (!object || object.constructor.name !== 'Object') {\n      /* eslint-disable no-continue */\n      continue;\n    }\n\n    for (var key in object) {\n      var op = object[key];\n      var mp = mix[key];\n\n      if (mp && op.constructor.name === 'Object' && mp.constructor.name === 'Object') {\n        mix[key] = merge(mp, op);\n      } else {\n        mix[key] = detach(op);\n      }\n    }\n  }\n\n  return mix;\n}\n/**\n * Internal function for duplicating an object.\n * @param {object} elem - The object to recursively duplicate.\n * @return {object} object\n **/\n\nfunction detach(elem) {\n  var t = elem.constructor.name;\n  var ans = void 0;\n\n  if (t === 'Object') {\n    ans = {};\n\n    for (var p in elem) {\n      ans[p] = detach(elem[p]);\n    }\n  } else if (t === 'Array') {\n    ans = [];\n\n    for (var i = 0, l = elem.length; i < l; i++) {\n      ans[i] = detach(elem[i]);\n    }\n  } else {\n    ans = elem;\n  }\n\n  return ans;\n}\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\n\n\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & n - 1) === 0;\n}","map":null,"metadata":{},"sourceType":"module"}