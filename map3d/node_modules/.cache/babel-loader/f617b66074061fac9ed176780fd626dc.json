{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\n/* eslint-disable no-inline-comments */\n\nimport { isWebGL2, assertWebGL2Context } from '../webgl-utils';\nimport Resource from './resource';\n\nvar Sampler =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(Sampler, _Resource);\n\n  _createClass(Sampler, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }]);\n\n  function Sampler(gl, opts) {\n    var _this;\n\n    _classCallCheck(this, Sampler);\n\n    assertWebGL2Context(gl);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sampler).call(this, gl, opts));\n    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Bind to the same texture unit as a texture to control sampling for that texture\n  // @param {GLuint} unit - texture unit index\n\n\n  _createClass(Sampler, [{\n    key: \"bind\",\n    value: function bind(unit) {\n      this.gl.bindSampler(unit, this.handle);\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind(unit) {\n      this.gl.bindSampler(unit, null);\n      return this;\n    } // RESOURCE METHODS\n\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createSampler();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteSampler(this.handle);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      return this.gl.getSamplerParameter(this.handle, pname);\n    }\n  }, {\n    key: \"_setParameter\",\n    value: function _setParameter(pname, param) {\n      // Apparently there are some conversion integer/float rules that made\n      // the WebGL committe expose two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      switch (pname) {\n        case 33082:\n        case 33083:\n          this.gl.samplerParameterf(this.handle, pname, param);\n          break;\n\n        default:\n          this.gl.samplerParameteri(this.handle, pname, param);\n          break;\n      }\n\n      return this;\n    }\n  }]);\n\n  return Sampler;\n}(Resource);\n\nexport { Sampler as default };","map":null,"metadata":{},"sourceType":"module"}