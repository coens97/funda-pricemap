{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME path-layer-vertex-shader-64\\n\\nattribute vec3 positions;\\n\\nattribute vec3 instanceStartPositions;\\nattribute vec3 instanceEndPositions;\\nattribute vec3 instanceLeftDeltas;\\nattribute vec3 instanceRightDeltas;\\nattribute float instanceStrokeWidths;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\nuniform float widthScale;\\nuniform float widthMinPixels;\\nuniform float widthMaxPixels;\\nuniform float jointType;\\nuniform float miterLimit;\\n\\nuniform float opacity;\\nuniform float renderPickingBuffer;\\n\\nvarying vec4 vColor;\\nvarying vec2 vCornerOffset;\\nvarying float vMiterLength;\\n\\nconst float EPSILON = 0.001;\\n\\nfloat flipIfTrue(bool flag) {\\n  return -(float(flag) * 2. - 1.);\\n}\\n\\n// calculate line join positions\\nvec3 lineJoin(vec3 prevPoint, vec3 currPoint, vec3 nextPoint) {\\n\\n  float width = clamp(project_scale(instanceStrokeWidths * widthScale),\\n    widthMinPixels, widthMaxPixels) / 2.0;\\n\\n  vec2 deltaA = currPoint.xy - prevPoint.xy;\\n  vec2 deltaB = nextPoint.xy - currPoint.xy;\\n\\n  vec2 offsetVec;\\n  float offsetScale;\\n  float offsetDirection;\\n\\n  float lenA = length(deltaA);\\n  float lenB = length(deltaB);\\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(1.0, 0.0);\\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(1.0, 0.0);\\n  vec2 perpA = vec2(-dirA.y, dirA.x);\\n  vec2 perpB = vec2(-dirB.y, dirB.x);\\n\\n  // tangent of the corner\\n  vec2 tangent = vec2(dirA + dirB);\\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\\n  // direction of the corner\\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\\n  // width offset from current position\\n  vec2 perp = mix(perpB, perpA, positions.x);\\n  float L = mix(lenB, lenA, positions.x);\\n\\n  // cap super sharp angles\\n  float sinHalfA = abs(dot(miterVec, perp));\\n  float cosHalfA = abs(dot(dirA, miterVec));\\n  bool turnsRight = dirA.x * dirB.y > dirA.y * dirB.x;\\n\\n  // relative position to the corner:\\n  // -1: inside (smaller side of the angle)\\n  // 0: center\\n  // 1: outside (bigger side of the angle)\\n  float cornerPosition = mix(\\n    flipIfTrue(turnsRight == (positions.y > 0.0)),\\n    0.0,\\n    positions.z\\n  );\\n\\n  offsetScale = 1.0 / max(sinHalfA, EPSILON);\\n\\n  // do not bevel if line segment is too short\\n  cornerPosition *= float(cornerPosition <= 0.0 || sinHalfA < min(lenA, lenB) / width * cosHalfA);\\n  // trim if inside corner extends further than the line segment\\n  offsetScale = mix(\\n    offsetScale,\\n    min(offsetScale, L / width / max(cosHalfA, EPSILON)),\\n    float(cornerPosition < 0.0)\\n  );\\n\\n  vMiterLength = mix(\\n    offsetScale * cornerPosition,\\n    mix(offsetScale, 0.0, cornerPosition),\\n    step(0.0, cornerPosition)\\n  ) - sinHalfA * jointType;\\n  offsetDirection = mix(\\n    positions.y,\\n    mix(\\n      flipIfTrue(turnsRight),\\n      positions.y * flipIfTrue(turnsRight == (positions.x == 1.)),\\n      cornerPosition\\n    ),\\n    step(0.0, cornerPosition)\\n  );\\n  offsetVec = mix(miterVec, -tangent, step(0.5, cornerPosition));\\n  offsetScale = mix(offsetScale, 1.0 / max(cosHalfA, 0.001), step(0.5, cornerPosition));\\n\\n  // special treatment for start cap and end cap\\n  float isStartCap = step(0.0, -lenA);\\n  float isEndCap = step(0.0, -lenB);\\n  float isCap = max(isStartCap, isEndCap);\\n\\n  // 0: center, 1: side\\n  cornerPosition = isCap * (1.0 - positions.z);\\n\\n  // start of path: use next - curr\\n  offsetVec = mix(offsetVec, mix(dirB, perpB, cornerPosition), isStartCap);\\n  // end of path: use curr - prev\\n  offsetVec = mix(offsetVec, mix(dirA, perpA, cornerPosition), isEndCap);\\n\\n  // extend out a triangle to envelope the round cap\\n  offsetScale = mix(\\n    offsetScale,\\n    mix(4.0 * jointType, 1.0, cornerPosition),\\n    isCap\\n  );\\n  vMiterLength = mix(vMiterLength, 1.0 - cornerPosition, isCap);\\n\\n  offsetDirection = mix(\\n    offsetDirection,\\n    mix(flipIfTrue(isStartCap > 0.), positions.y, cornerPosition),\\n    isCap\\n  );\\n\\n  vCornerOffset = offsetVec * offsetDirection * offsetScale;\\n\\n  return currPoint + vec3(vCornerOffset * width, 0.0);\\n}\\n\\nvoid main() {\\n  vec4 color = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\\n  vec4 pickingColor = vec4(instancePickingColors, 255.) / 255.;\\n  vColor = mix(color, pickingColor, renderPickingBuffer);\\n\\n  float isEnd = positions.x;\\n\\n  vec3 prevPosition = mix(-instanceLeftDeltas, vec3(0.0), isEnd) + instanceStartPositions;\\n  prevPosition = project_position(prevPosition);\\n\\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\\n  currPosition = project_position(currPosition);\\n\\n  vec3 nextPosition = mix(vec3(0.0), instanceRightDeltas, isEnd) + instanceEndPositions;\\n  nextPosition = project_position(nextPosition);\\n\\n  vec3 pos;\\n\\n  pos = lineJoin(prevPosition, currPosition, nextPosition);\\n\\n  gl_Position = project_to_clipspace(vec4(pos, 1.0));\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}