{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport Viewport from '../viewports/viewport'; // import log from '../utils/log';\n\nimport { createMat4, transformVector } from '../utils/math-utils';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateY from 'gl-mat4/rotateY';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n/*\n * A deck.gl Viewport class used by OrbitController\n * Adds zoom and pixel translation on top of the PerspectiveViewport\n */\n\nvar OrbitViewport =\n/*#__PURE__*/\nfunction (_Viewport) {\n  _inherits(OrbitViewport, _Viewport);\n\n  function OrbitViewport(_ref) {\n    var _this;\n\n    var _ref$id = _ref.id,\n        id = _ref$id === void 0 ? 'orbit-viewport' : _ref$id,\n        width = _ref.width,\n        height = _ref.height,\n        distance = _ref.distance,\n        _ref$rotationX = _ref.rotationX,\n        rotationX = _ref$rotationX === void 0 ? 0 : _ref$rotationX,\n        _ref$rotationOrbit = _ref.rotationOrbit,\n        rotationOrbit = _ref$rotationOrbit === void 0 ? 0 : _ref$rotationOrbit,\n        _ref$orbitAxis = _ref.orbitAxis,\n        orbitAxis = _ref$orbitAxis === void 0 ? 'Z' : _ref$orbitAxis,\n        _ref$lookAt = _ref.lookAt,\n        lookAt = _ref$lookAt === void 0 ? [0, 0, 0] : _ref$lookAt,\n        _ref$up = _ref.up,\n        up = _ref$up === void 0 ? [0, 1, 0] : _ref$up,\n        _ref$fov = _ref.fov,\n        fov = _ref$fov === void 0 ? 75 : _ref$fov,\n        _ref$near = _ref.near,\n        near = _ref$near === void 0 ? 1 : _ref$near,\n        _ref$far = _ref.far,\n        far = _ref$far === void 0 ? 100 : _ref$far,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? 1 : _ref$zoom;\n\n    _classCallCheck(this, OrbitViewport); // TODO - Once OrbitViewport is aligned with the View system, deprecated it\n    // log.deprecated('OrbitViewport', 'OrbitView')();\n\n\n    var rotationMatrix = mat4_rotateX([], createMat4(), -rotationX / 180 * Math.PI);\n\n    if (orbitAxis === 'Z') {\n      mat4_rotateZ(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);\n    } else {\n      mat4_rotateY(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);\n    }\n\n    var translateMatrix = createMat4();\n    mat4_scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);\n    mat4_translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);\n    var viewMatrix = mat4_lookAt([], [0, 0, distance], [0, 0, 0], up);\n    var fovRadians = fov * DEGREES_TO_RADIANS;\n    var aspect = width / height;\n    var perspectiveMatrix = mat4_perspective([], fovRadians, aspect, near, far);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrbitViewport).call(this, {\n      id: id,\n      viewMatrix: mat4_multiply(viewMatrix, viewMatrix, mat4_multiply(rotationMatrix, rotationMatrix, translateMatrix)),\n      projectionMatrix: perspectiveMatrix,\n      width: width,\n      height: height\n    }));\n    _this.width = width;\n    _this.height = height;\n    _this.distance = distance;\n    _this.rotationX = rotationX;\n    _this.rotationOrbit = rotationOrbit;\n    _this.orbitAxis = orbitAxis;\n    _this.lookAt = lookAt;\n    _this.up = up;\n    _this.fov = fov;\n    _this.near = near;\n    _this.far = far;\n    _this.zoom = zoom;\n    return _this;\n  }\n\n  _createClass(OrbitViewport, [{\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? false : _ref2$topLeft;\n\n      var v = transformVector(this.pixelProjectionMatrix, _toConsumableArray(xyz).concat([1]));\n\n      var _v = _slicedToArray(v, 3),\n          x = _v[0],\n          y = _v[1],\n          z = _v[2];\n\n      var y2 = topLeft ? this.height - y : y;\n      return [x, y2, z];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$topLeft = _ref3.topLeft,\n          topLeft = _ref3$topLeft === void 0 ? false : _ref3$topLeft;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? this.height - y : y;\n      return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);\n    }\n    /** Get camera `distance` to make view fit a box centered at lookat position in the viewport.\n     * @param {Array} sizes - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n     * @returns {Nunber} the new distance parameter\n     */\n\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(_ref4) {\n      var boundingBox = _ref4.boundingBox,\n          fov = _ref4.fov;\n      var halfMaxSide = Math.max(boundingBox[0], boundingBox[1], boundingBox[2]) / 2;\n      var distance = halfMaxSide / Math.tan(fov / 180 * Math.PI / 2);\n      return distance;\n    }\n    /** Move camera to make a model bounding box centered at lookat position fit in the viewport.\n     * @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n     * @returns a new OrbitViewport object\n     */\n\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(boundingBox) {\n      var width = this.width,\n          height = this.height,\n          rotationX = this.rotationX,\n          rotationOrbit = this.rotationOrbit,\n          orbitAxis = this.orbitAxis,\n          lookAt = this.lookAt,\n          up = this.up,\n          fov = this.fov,\n          near = this.near,\n          far = this.far,\n          zoom = this.zoom;\n      return new OrbitViewport({\n        width: width,\n        height: height,\n        rotationX: rotationX,\n        rotationOrbit: rotationOrbit,\n        orbitAxis: orbitAxis,\n        up: up,\n        fov: fov,\n        near: near,\n        far: far,\n        zoom: zoom,\n        lookAt: lookAt,\n        distance: this.getDistance({\n          boundingBox: boundingBox,\n          fov: fov\n        })\n      });\n    }\n  }]);\n\n  return OrbitViewport;\n}(Viewport);\n\nexport { OrbitViewport as default };\nOrbitViewport.displayName = 'OrbitViewport';","map":null,"metadata":{},"sourceType":"module"}