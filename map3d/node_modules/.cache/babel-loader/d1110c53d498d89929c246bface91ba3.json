{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Inspired by screen-grid-layer vertex shader in deck.gl\nexport default \"#define SHADER_NAME grid-cell-layer-vertex-shader-64\\n\\nattribute vec3 positions;\\nattribute vec3 normals;\\n\\nattribute vec4 instancePositions;\\nattribute vec2 instancePositions64xyLow;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\n// Picking uniforms\\n// Set to 1.0 if rendering picking buffer, 0.0 if rendering for display\\nuniform float renderPickingBuffer;\\nuniform vec3 selectedPickingColor;\\n\\n// Custom uniforms\\nuniform float extruded;\\nuniform float cellSize;\\nuniform float coverage;\\nuniform float opacity;\\nuniform float elevationScale;\\n\\n// A magic number to scale elevation so that 1 unit approximate to 1 meter\\n#define ELEVATION_SCALE 0.8\\n\\n// Result\\nvarying vec4 vColor;\\n\\nfloat isPicked(vec3 pickingColors, vec3 selectedColor) {\\n return float(pickingColors.x == selectedColor.x\\n && pickingColors.y == selectedColor.y\\n && pickingColors.z == selectedColor.z);\\n}\\n\\n\\nvoid main(void) {\\n  vec4 instancePositions64xy = vec4(\\n    instancePositions.x,\\n    instancePositions64xyLow.x,\\n    instancePositions.y,\\n    instancePositions64xyLow.y);\\n\\n  vec2 projected_coord_xy[2];\\n  project_position_fp64(instancePositions64xy, projected_coord_xy);\\n  \\n  // if ahpha == 0.0 or z < 0.0, do not render element\\n  float noRender = float(instanceColors.a == 0.0 || instancePositions.w < 0.0);\\n  float finalCellSize = cellSize * mix(1.0, 0.0, noRender);\\n  \\n  projected_coord_xy[0] = sum_fp64(projected_coord_xy[0],\\n    vec2((positions.x * coverage + 1.0) * finalCellSize / 2.0, 0.0));\\n  projected_coord_xy[1] = sum_fp64(projected_coord_xy[1],\\n    vec2((positions.y * coverage - 1.0) * finalCellSize / 2.0, 0.0));\\n\\n  float elevation = 0.0;\\n\\n  if (extruded > 0.5) {\\n    elevation = project_scale(instancePositions.w  * (positions.z + 1.0) *\\n      ELEVATION_SCALE * elevationScale) + 1.0;\\n  }\\n\\n  vec2 vertex_pos_modelspace[4];\\n  vertex_pos_modelspace[0] = projected_coord_xy[0];\\n  vertex_pos_modelspace[1] = projected_coord_xy[1];\\n  vertex_pos_modelspace[2] = vec2(elevation, 0.0);\\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\\n\\n  vec4 position_worldspace = vec4(\\n    vertex_pos_modelspace[0].x, vertex_pos_modelspace[1].x,\\n    vertex_pos_modelspace[2].x, vertex_pos_modelspace[3].x);\\n\\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\\n\\n  if (renderPickingBuffer < 0.5) {\\n\\n    // TODO: we should allow the user to specify the color for \\\"selected element\\\"\\n    // check whether a bar is currently picked.\\n    float selected = isPicked(instancePickingColors, selectedPickingColor);\\n\\n    float lightWeight = 1.0;\\n\\n    if (extruded > 0.5) {\\n      lightWeight = getLightWeight(\\n        position_worldspace.xyz, // the w component is always 1.0\\n        normals\\n      );\\n    }\\n\\n    vec3 lightWeightedColor = lightWeight * instanceColors.rgb;\\n    vec4 color = vec4(lightWeightedColor, instanceColors.a * opacity) / 255.0;\\n    vColor = color;\\n\\n  } else {\\n\\n    vec4 pickingColor = vec4(instancePickingColors / 255.0, 1.0);\\n     vColor = pickingColor;\\n\\n  }\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}