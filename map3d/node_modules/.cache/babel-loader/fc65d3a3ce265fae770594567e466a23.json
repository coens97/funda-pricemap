{"ast":null,"code":"import _classCallCheck from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/src/deckgl-overlay.js\";\nimport React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\nvar LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nvar DeckGLOverlay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DeckGLOverlay, _Component);\n\n  function DeckGLOverlay() {\n    _classCallCheck(this, DeckGLOverlay);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeckGLOverlay).apply(this, arguments));\n  }\n\n  _createClass(DeckGLOverlay, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          viewport = _this$props.viewport,\n          data = _this$props.data,\n          colorScale = _this$props.colorScale;\n\n      if (!data) {\n        return null;\n      }\n\n      var layer = new GeoJsonLayer({\n        id: 'geojson',\n        data: data,\n        opacity: 0.8,\n        stroked: false,\n        filled: true,\n        extruded: true,\n        wireframe: true,\n        fp64: true,\n        getElevation: function getElevation(f) {\n          return Math.sqrt(f.properties.valuePerSqm) * 10;\n        },\n        getFillColor: function getFillColor(f) {\n          return colorScale(f.properties.growth);\n        },\n        getLineColor: function getLineColor(f) {\n          return [255, 255, 255];\n        },\n        lightSettings: LIGHT_SETTINGS,\n        pickable: Boolean(this.props.onHover),\n        onHover: this.props.onHover\n      });\n      return React.createElement(DeckGL, Object.assign({}, viewport, {\n        layers: [layer],\n        initWebGLParameters: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"defaultViewport\",\n    get: function get() {\n      return {\n        latitude: 49.254,\n        longitude: -123.13,\n        zoom: 11,\n        maxZoom: 16,\n        pitch: 45,\n        bearing: 0\n      };\n    }\n  }]);\n\n  return DeckGLOverlay;\n}(Component);\n\nexport { DeckGLOverlay as default };","map":{"version":3,"sources":["/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/src/deckgl-overlay.js"],"names":["React","Component","DeckGL","GeoJsonLayer","LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","DeckGLOverlay","props","viewport","data","colorScale","layer","id","opacity","stroked","filled","extruded","wireframe","fp64","getElevation","f","Math","sqrt","properties","valuePerSqm","getFillColor","growth","getLineColor","lightSettings","pickable","Boolean","onHover","latitude","longitude","zoom","maxZoom","pitch","bearing"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,IAAiBC,YAAjB,QAAqC,SAArC;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,cAAc,EAAE,CAAC,CAAC,GAAF,EAAO,IAAP,EAAa,IAAb,EAAmB,CAAC,KAApB,EAA2B,IAA3B,EAAiC,IAAjC,CADK;AAErBC,EAAAA,YAAY,EAAE,GAFO;AAGrBC,EAAAA,YAAY,EAAE,GAHO;AAIrBC,EAAAA,aAAa,EAAE,GAJM;AAKrBC,EAAAA,cAAc,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CALK;AAMrBC,EAAAA,cAAc,EAAE;AANK,CAAvB;;IASqBC,a;;;;;;;;;;;;;6BAaV;AAAA,wBACgC,KAAKC,KADrC;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,IADX,eACWA,IADX;AAAA,UACiBC,UADjB,eACiBA,UADjB;;AAGP,UAAI,CAACD,IAAL,EAAW;AACT,eAAO,IAAP;AACD;;AAED,UAAME,KAAK,GAAG,IAAIb,YAAJ,CAAiB;AAC7Bc,QAAAA,EAAE,EAAE,SADyB;AAE7BH,QAAAA,IAAI,EAAJA,IAF6B;AAG7BI,QAAAA,OAAO,EAAE,GAHoB;AAI7BC,QAAAA,OAAO,EAAE,KAJoB;AAK7BC,QAAAA,MAAM,EAAE,IALqB;AAM7BC,QAAAA,QAAQ,EAAE,IANmB;AAO7BC,QAAAA,SAAS,EAAE,IAPkB;AAQ7BC,QAAAA,IAAI,EAAE,IARuB;AAS7BC,QAAAA,YAAY,EAAE,sBAAAC,CAAC;AAAA,iBAAIC,IAAI,CAACC,IAAL,CAAUF,CAAC,CAACG,UAAF,CAAaC,WAAvB,IAAsC,EAA1C;AAAA,SATc;AAU7BC,QAAAA,YAAY,EAAE,sBAAAL,CAAC;AAAA,iBAAIV,UAAU,CAACU,CAAC,CAACG,UAAF,CAAaG,MAAd,CAAd;AAAA,SAVc;AAW7BC,QAAAA,YAAY,EAAE,sBAAAP,CAAC;AAAA,iBAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAJ;AAAA,SAXc;AAY7BQ,QAAAA,aAAa,EAAE7B,cAZc;AAa7B8B,QAAAA,QAAQ,EAAEC,OAAO,CAAC,KAAKvB,KAAL,CAAWwB,OAAZ,CAbY;AAc7BA,QAAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWwB;AAdS,OAAjB,CAAd;AAiBA,aACE,oBAAC,MAAD,oBAAYvB,QAAZ;AAAsB,QAAA,MAAM,EAAE,CAACG,KAAD,CAA9B;AAAuC,QAAA,mBAAmB,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;;wBAtC4B;AAC3B,aAAO;AACLqB,QAAAA,QAAQ,EAAE,MADL;AAELC,QAAAA,SAAS,EAAE,CAAC,MAFP;AAGLC,QAAAA,IAAI,EAAE,EAHD;AAILC,QAAAA,OAAO,EAAE,EAJJ;AAKLC,QAAAA,KAAK,EAAE,EALF;AAMLC,QAAAA,OAAO,EAAE;AANJ,OAAP;AAQD;;;;EAXwCzC,S;;SAAtBU,a","sourcesContent":["import React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nexport default class DeckGLOverlay extends Component {\n\n  static get defaultViewport() {\n    return {\n      latitude: 49.254,\n      longitude: -123.13,\n      zoom: 11,\n      maxZoom: 16,\n      pitch: 45,\n      bearing: 0\n    };\n  }\n\n  render() {\n    const { viewport, data, colorScale } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const layer = new GeoJsonLayer({\n      id: 'geojson',\n      data,\n      opacity: 0.8,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      fp64: true,\n      getElevation: f => Math.sqrt(f.properties.valuePerSqm) * 10,\n      getFillColor: f => colorScale(f.properties.growth),\n      getLineColor: f => [255, 255, 255],\n      lightSettings: LIGHT_SETTINGS,\n      pickable: Boolean(this.props.onHover),\n      onHover: this.props.onHover\n    });\n\n    return (\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}