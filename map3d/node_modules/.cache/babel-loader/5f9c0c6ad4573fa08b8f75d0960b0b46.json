{"ast":null,"code":"export function diffSources(prevStyle, nextStyle) {\n  var prevSources = prevStyle.get(\"sources\"),\n      nextSources = nextStyle.get(\"sources\"),\n      enter = [],\n      update = [],\n      exit = [],\n      prevIds = prevSources.keySeq().toArray(),\n      nextIds = nextSources.keySeq().toArray(),\n      _iteratorNormalCompletion = !0,\n      _didIteratorError = !1,\n      _iteratorError = void 0;\n\n  try {\n    for (var _step, _iterator = prevIds[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {\n      var id = _step.value,\n          nextSource = nextSources.get(id);\n      nextSource ? !nextSource.equals(prevSources.get(id)) && update.push({\n        id: id,\n        source: nextSources.get(id)\n      }) : exit.push({\n        id: id,\n        source: prevSources.get(id)\n      });\n    }\n  } catch (err) {\n    _didIteratorError = !0, _iteratorError = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion || null == _iterator.return || _iterator.return();\n    } finally {\n      if (_didIteratorError) throw _iteratorError;\n    }\n  }\n\n  var _iteratorNormalCompletion2 = !0,\n      _didIteratorError2 = !1,\n      _iteratorError2 = void 0;\n\n  try {\n    for (var _step2, _iterator2 = nextIds[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {\n      var _id = _step2.value,\n          prevSource = prevSources.get(_id);\n      prevSource || enter.push({\n        id: _id,\n        source: nextSources.get(_id)\n      });\n    }\n  } catch (err) {\n    _didIteratorError2 = !0, _iteratorError2 = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();\n    } finally {\n      if (_didIteratorError2) throw _iteratorError2;\n    }\n  }\n\n  return {\n    enter: enter,\n    update: update,\n    exit: exit\n  };\n}\nexport function diffLayers(prevStyle, nextStyle) {\n  var prevLayers = prevStyle.get(\"layers\"),\n      nextLayers = nextStyle.get(\"layers\"),\n      updates = [],\n      exiting = [],\n      prevMap = {},\n      nextMap = {};\n  nextLayers.forEach(function (layer, index) {\n    var id = layer.get(\"id\"),\n        layerImBehind = nextLayers.get(index + 1);\n    nextMap[id] = {\n      layer: layer,\n      id: id,\n      before: layerImBehind ? layerImBehind.get(\"id\") : null,\n      enter: !0\n    };\n  }), prevLayers.forEach(function (layer, index) {\n    var id = layer.get(\"id\"),\n        layerImBehind = prevLayers.get(index + 1);\n    prevMap[id] = {\n      layer: layer,\n      id: id,\n      before: layerImBehind ? layerImBehind.get(\"id\") : null\n    }, nextMap[id] ? nextMap[id].enter = !1 : exiting.push(prevMap[id]);\n  });\n\n  var _iteratorNormalCompletion3 = !0,\n      _didIteratorError3 = !1,\n      _iteratorError3 = void 0;\n\n  try {\n    for (var _step3, _iterator3 = nextLayers.reverse()[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = !0) {\n      var layer = _step3.value,\n          id = layer.get(\"id\");\n      prevMap[id] && prevMap[id].layer.equals(nextMap[id].layer) && prevMap[id].before === nextMap[id].before || updates.push(nextMap[id]);\n    }\n  } catch (err) {\n    _didIteratorError3 = !0, _iteratorError3 = err;\n  } finally {\n    try {\n      _iteratorNormalCompletion3 || null == _iterator3.return || _iterator3.return();\n    } finally {\n      if (_didIteratorError3) throw _iteratorError3;\n    }\n  }\n\n  return {\n    updates: updates,\n    exiting: exiting\n  };\n}\nexport default function diffStyle(prevStyle, nextStyle) {\n  return {\n    sourcesDiff: diffSources(prevStyle, nextStyle),\n    layersDiff: diffLayers(prevStyle, nextStyle)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}