{"ast":null,"code":"// WebGLRenderingContext related methods\nimport { WebGLRenderingContext, WebGL2RenderingContext, webGLTypesAvailable } from './api';\nimport trackContextState from '../webgl-utils/track-context-state';\nimport { createCanvas, getCanvas, createContext } from '../webgl-utils';\nimport { makeDebugContext } from './context-debug';\nimport { glGetDebugInfo } from './context-limits';\nimport queryManager from './helpers/query-manager';\nimport { log as _log, isBrowser } from '../utils';\nimport luma from '../init';\nimport assert from 'assert'; // Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\n\nvar GL_ARRAY_BUFFER = 0x8892;\nvar GL_TEXTURE_BINDING_3D = 0x806A;\nexport var ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport var ERR_WEBGL = ERR_CONTEXT;\nexport var ERR_WEBGL2 = 'Requires WebGL2';\nvar ERR_WEBGL_MISSING_NODE = 'WebGL API is missing. To run luma.gl under Node.js, please \"npm install gl\"\\nand import \\'luma.gl/headless\\' before importing \\'luma.gl\\'.';\nvar ERR_HEADLESSGL_NOT_AVAILABLE = 'Cannot create headless WebGL context, headlessGL not available';\nvar ERR_HEADLESSGL_FAILED = 'headlessGL failed to create headless WebGL context';\nexport function isWebGL(gl) {\n  return Boolean(gl && (gl instanceof WebGLRenderingContext || gl.ARRAY_BUFFER === GL_ARRAY_BUFFER));\n}\nexport function isWebGL2(gl) {\n  return Boolean(gl && (gl instanceof WebGL2RenderingContext || gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D));\n}\nexport function isWebGLContext(gl) {\n  _log.deprecated('isWebGLContext', 'isWebGL');\n\n  return isWebGL(gl);\n}\nexport function isWebGL2Context(gl) {\n  _log.deprecated('isWebGL2Context', 'isWebGL2');\n\n  return isWebGL2(gl);\n}\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\nvar contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true,\n  // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true,\n  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null,\n  // A canvas element or a canvas string id\n  debug: false,\n  // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800,\n  // width are height are only used by headless gl\n  height: 600 // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n\n};\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\n\nexport function setContextDefaults() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Object.assign(contextDefaults, {\n    width: 1,\n    height: 1\n  }, opts);\n}\n/*\n * Creates a context giving access to the WebGL API\n */\n\n/* eslint-disable complexity, max-statements */\n\nexport function createGLContext() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  opts = Object.assign({}, contextDefaults, opts);\n  var _opts = opts,\n      canvas = _opts.canvas,\n      width = _opts.width,\n      height = _opts.height,\n      throwOnError = _opts.throwOnError,\n      manageState = _opts.manageState,\n      debug = _opts.debug; // Error reporting function, enables exceptions to be disabled\n\n  function onError(message) {\n    if (throwOnError) {\n      throw new Error(message);\n    } // log.log(0, message);\n\n\n    return null;\n  }\n\n  var gl = void 0;\n\n  if (isBrowser) {\n    // Make sure we have a real canvas (\"canvas\" can a string, a canvas or null)\n    var realCanvas = void 0;\n\n    if (!canvas) {\n      realCanvas = createCanvas({\n        id: 'lumagl-canvas',\n        width: width,\n        height: height,\n        onError: onError\n      });\n    } else if (typeof canvas === 'string') {\n      realCanvas = getCanvas({\n        id: canvas\n      });\n    } else {\n      realCanvas = canvas;\n    } // Create a WebGL context in the canvas\n\n\n    gl = createContext({\n      canvas: realCanvas,\n      opts: opts\n    });\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = _createHeadlessContext({\n      width: width,\n      height: height,\n      opts: opts,\n      onError: onError\n    });\n  }\n\n  if (!gl) {\n    return null;\n  } // Install context state tracking\n\n\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: function log() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _log.log.apply(_log, [1].concat(args));\n      }\n    });\n  } // Add debug instrumentation to the context\n\n\n  if (isBrowser && debug) {\n    gl = makeDebugContext(gl, {\n      debug: debug\n    }); // Debug forces log level to at least 1\n\n    _log.priority = Math.max(_log.priority, 1); // Log some debug info about the context\n\n    logInfo(gl);\n  } // Add to seer integration\n\n\n  return gl;\n}\nexport function deleteGLContext(gl) {} // Remove from seer integration\n// POLLING FOR PENDING QUERIES\n// Calling this function checks all pending queries for completion\n\nexport function pollContext(gl) {\n  queryManager.poll(gl);\n}\n\nfunction logInfo(gl) {\n  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  var info = glGetDebugInfo(gl);\n  var driver = info ? '(' + info.vendor + ' ' + info.renderer + ')' : '';\n  var debug = gl.debug ? 'debug' : '';\n\n  _log.log(0, 'luma.gl: Created ' + webGL + ' ' + debug + ' context ' + driver, gl);\n} // Create headless gl context (for running under Node.js)\n\n\nfunction _createHeadlessContext(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      opts = _ref.opts,\n      onError = _ref.onError;\n  var webgl1 = opts.webgl1,\n      webgl2 = opts.webgl2;\n\n  if (webgl2 && !webgl1) {\n    return onError('headless-gl does not support WebGL2');\n  }\n\n  if (!webGLTypesAvailable) {\n    return onError(ERR_WEBGL_MISSING_NODE);\n  }\n\n  if (!luma.globals.headlessGL) {\n    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);\n  }\n\n  var gl = luma.globals.headlessGL(width, height, opts);\n\n  if (!gl) {\n    return onError(ERR_HEADLESSGL_FAILED);\n  }\n\n  return gl;\n}","map":null,"metadata":{},"sourceType":"module"}