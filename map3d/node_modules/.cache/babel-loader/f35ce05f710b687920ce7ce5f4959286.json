{"ast":null,"code":"var _WEBGL_LIMITS;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable no-inline-comments, max-len */\n\n\nimport GL from './gl-constants';\nimport { isWebGL2 } from './context';\nvar WEBGL_LIMITS = (_WEBGL_LIMITS = {}, _defineProperty(_WEBGL_LIMITS, GL.ALIASED_LINE_WIDTH_RANGE, {\n  gl1: new Float32Array([1, 1])\n}), _defineProperty(_WEBGL_LIMITS, GL.ALIASED_POINT_SIZE_RANGE, {\n  gl1: new Float32Array([1, 1])\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_TEXTURE_SIZE, {\n  gl1: 64,\n  gl2: 2048\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_CUBE_MAP_TEXTURE_SIZE, {\n  gl1: 16\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_TEXTURE_IMAGE_UNITS, {\n  gl1: 8\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS, {\n  gl1: 8\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS, {\n  gl1: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_RENDERBUFFER_SIZE, {\n  gl1: 1\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VARYING_VECTORS, {\n  gl1: 8\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VERTEX_ATTRIBS, {\n  gl1: 8\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VERTEX_UNIFORM_VECTORS, {\n  gl1: 128\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_FRAGMENT_UNIFORM_VECTORS, {\n  gl1: 16\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VIEWPORT_DIMS, {\n  gl1: new Int32Array([0, 0])\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_3D_TEXTURE_SIZE, {\n  gl1: 0,\n  gl2: 256\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_ARRAY_TEXTURE_LAYERS, {\n  gl1: 0,\n  gl2: 256\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_COLOR_ATTACHMENTS, {\n  gl1: 0,\n  gl2: 4\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_COMBINED_UNIFORM_BLOCKS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_DRAW_BUFFERS, {\n  gl1: 0,\n  gl2: 4\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_ELEMENT_INDEX, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_ELEMENTS_INDICES, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_ELEMENTS_VERTICES, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_FRAGMENT_INPUT_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_FRAGMENT_UNIFORM_BLOCKS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_FRAGMENT_UNIFORM_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_SAMPLES, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_SERVER_WAIT_TIMEOUT, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_TEXTURE_LOD_BIAS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_UNIFORM_BLOCK_SIZE, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_UNIFORM_BUFFER_BINDINGS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VARYING_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VERTEX_OUTPUT_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VERTEX_UNIFORM_BLOCKS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_VERTEX_UNIFORM_COMPONENTS, {\n  gl1: 0,\n  gl2: 0\n}), _defineProperty(_WEBGL_LIMITS, GL.MIN_PROGRAM_TEXEL_OFFSET, {\n  gl1: 0,\n  gl2: -8,\n  negative: true\n}), _defineProperty(_WEBGL_LIMITS, GL.MAX_PROGRAM_TEXEL_OFFSET, {\n  gl1: 0,\n  gl2: 7\n}), _defineProperty(_WEBGL_LIMITS, GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT, {\n  gl1: 0,\n  gl2: 0 // GLint\n\n}), _WEBGL_LIMITS);\nexport function getContextLimits(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.limits) {\n    gl.luma.limits = {};\n    gl.luma.webgl1MinLimits = {};\n    gl.luma.webgl2MinLimits = {};\n    var isWebgl2 = isWebGL2(gl); // WEBGL limits\n\n    for (var parameter in WEBGL_LIMITS) {\n      var limit = WEBGL_LIMITS[parameter];\n      var webgl1MinLimit = limit.gl1;\n      var webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;\n      var minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit; // Check if we can query for this limit\n\n      var limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);\n      var value = limitNotAvailable ? minLimit : gl.getParameter(parameter);\n      gl.luma.limits[parameter] = value;\n      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;\n      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;\n    }\n  }\n\n  return gl.luma.limits;\n}\nexport function getGLContextInfo(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.info) {\n    var _gl$luma$info;\n\n    var info = gl.getExtension('WEBGL_debug_renderer_info');\n    gl.luma.info = (_gl$luma$info = {}, _defineProperty(_gl$luma$info, GL.VENDOR, gl.getParameter(GL.VENDOR)), _defineProperty(_gl$luma$info, GL.RENDERER, gl.getParameter(GL.RENDERER)), _defineProperty(_gl$luma$info, GL.UNMASKED_VENDOR_WEBGL, gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || GL.VENDOR)), _defineProperty(_gl$luma$info, GL.UNMASKED_RENDERER_WEBGL, gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || GL.RENDERER)), _defineProperty(_gl$luma$info, GL.VERSION, gl.getParameter(GL.VERSION)), _defineProperty(_gl$luma$info, GL.SHADING_LANGUAGE_VERSION, gl.getParameter(GL.SHADING_LANGUAGE_VERSION)), _gl$luma$info);\n  }\n\n  return gl.luma.info;\n}\nvar GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.\n\nvar GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.\n\nexport function getGLContextInfo2(gl) {\n  var vendorMasked = gl.getParameter(GL.VENDOR);\n  var rendererMasked = gl.getParameter(GL.RENDERER);\n  var ext = gl.getExtension('WEBGL_debug_renderer_info');\n  var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  var rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked: vendorMasked,\n    rendererMasked: rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\nexport function getContextInfo(gl) {\n  var limits = getContextLimits(gl);\n  var info = getGLContextInfo(gl);\n  return {\n    // basic information\n    vendor: info[GL_UNMASKED_VENDOR_WEBGL] || info[GL.VENDOR],\n    renderer: info[GL_UNMASKED_RENDERER_WEBGL] || info[GL.RENDERER],\n    version: info[GL.VERSION],\n    shadingLanguageVersion: info[GL.SHADING_LANGUAGE_VERSION],\n    // info, caps and limits\n    info: info,\n    limits: limits,\n    webgl1MinLimits: gl.luma.webgl1MinLimits,\n    webgl2MinLimits: gl.luma.webgl2MinLimits\n  };\n} // DEBUG INFO\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n * @param {WebGLRenderingContext} gl - context\n * @return {Object} - 'vendor' and 'renderer' string fields.\n */\n\nexport function glGetDebugInfo(gl) {\n  return getGLContextInfo2(gl); // const info = gl.getExtension('WEBGL_debug_renderer_info');\n  // // We can't determine if 'WEBGL_debug_renderer_info' is supported by\n  // // checking whether info is null here. Firefox doesn't follow the\n  // // specs by returning null for unsupported extension. Instead,\n  // // it returns an object without GL_UNMASKED_VENDOR_WEBGL and GL_UNMASKED_RENDERER_WEBGL.\n  // return {\n  //   vendor: (info && info.UNMASKED_VENDOR_WEBGL) ?\n  //     gl.getParameter(info.UNMASKED_VENDOR_WEBGL) : 'unknown',\n  //   renderer: (info && info.UNMASKED_RENDERER_WEBGL) ?\n  //     gl.getParameter(info.UNMASKED_RENDERER_WEBGL) : 'unknown'\n  // };\n}\nexport var TEST_EXPORTS = {\n  WEBGL_LIMITS: WEBGL_LIMITS\n};","map":null,"metadata":{},"sourceType":"module"}