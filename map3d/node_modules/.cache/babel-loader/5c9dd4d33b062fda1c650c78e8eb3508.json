{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// TODO - replace with math.gl\n\n\nimport { equals as _equals } from '../math';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_invert from 'gl-mat4/invert';\nimport vec4_multiply from 'gl-vec4/multiply';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\nimport vec2_lerp from 'gl-vec2/lerp';\nimport assert from 'assert';\nvar IDENTITY = createMat4();\nvar DEFAULT_DISTANCE_SCALES = {\n  pixelsPerMeter: [1, 1, 1],\n  metersPerPixel: [1, 1, 1],\n  pixelsPerDegree: [1, 1, 1],\n  degreesPerPixel: [1, 1, 1]\n};\nvar ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nvar Viewport = function () {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  function Viewport() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$width = _ref.width,\n        width = _ref$width === undefined ? 1 : _ref$width,\n        _ref$height = _ref.height,\n        height = _ref$height === undefined ? 1 : _ref$height,\n        _ref$viewMatrix = _ref.viewMatrix,\n        viewMatrix = _ref$viewMatrix === undefined ? IDENTITY : _ref$viewMatrix,\n        _ref$projectionMatrix = _ref.projectionMatrix,\n        projectionMatrix = _ref$projectionMatrix === undefined ? IDENTITY : _ref$projectionMatrix,\n        _ref$distanceScales = _ref.distanceScales,\n        distanceScales = _ref$distanceScales === undefined ? DEFAULT_DISTANCE_SCALES : _ref$distanceScales;\n\n    _classCallCheck(this, Viewport); // Silently allow apps to send in 0,0\n\n\n    this.width = width || 1;\n    this.height = height || 1;\n    this.scale = 1;\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  } // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n\n\n  _createClass(Viewport, [{\n    key: 'equals',\n    value: function equals(viewport) {\n      if (!(viewport instanceof Viewport)) {\n        return false;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && _equals(viewport.projectionMatrix, this.projectionMatrix) && _equals(viewport.viewMatrix, this.viewMatrix); // TODO - check distance scales?\n    }\n    /**\n     * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n     * using viewport projection parameters\n     * - [longitude, latitude] to [x, y]\n     * - [longitude, latitude, Z] => [x, y, z]\n     * Note: By default, returns top-left coordinates for canvas/SVG type render\n     *\n     * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n     * @param {Object} opts - options\n     * @param {Object} opts.topLeft=true - Whether projected coords are top left\n     * @return {Array} - [x, y] or [x, y, z] in top left coords\n     */\n\n  }, {\n    key: 'project',\n    value: function project(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === undefined ? false : _ref2$topLeft;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x0 = _xyz[0],\n          y0 = _xyz[1],\n          _xyz$ = _xyz[2],\n          z0 = _xyz$ === undefined ? 0 : _xyz$;\n\n      assert(Number.isFinite(x0) && Number.isFinite(y0) && Number.isFinite(z0), ERR_ARGUMENT);\n\n      var _projectFlat2 = this.projectFlat([x0, y0]),\n          _projectFlat3 = _slicedToArray(_projectFlat2, 2),\n          X = _projectFlat3[0],\n          Y = _projectFlat3[1];\n\n      var v = this.transformVector(this.pixelProjectionMatrix, [X, Y, z0, 1]);\n\n      var _v = _slicedToArray(v, 2),\n          x = _v[0],\n          y = _v[1];\n\n      var y2 = topLeft ? this.height - y : y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, 0];\n    }\n    /**\n     * Unproject pixel coordinates on screen onto world coordinates,\n     * (possibly [lon, lat]) on map.\n     * - [x, y] => [lng, lat]\n     * - [x, y, z] => [lng, lat, Z]\n     * @param {Array} xyz -\n     * @return {Array} - [lng, lat, Z] or [X, Y, Z]\n     */\n\n  }, {\n    key: 'unproject',\n    value: function unproject(xyz) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$topLeft = _ref3.topLeft,\n          topLeft = _ref3$topLeft === undefined ? false : _ref3$topLeft;\n\n      var _xyz2 = _slicedToArray(xyz, 3),\n          x = _xyz2[0],\n          y = _xyz2[1],\n          _xyz2$ = _xyz2[2],\n          targetZ = _xyz2$ === undefined ? 0 : _xyz2$;\n\n      var y2 = topLeft ? this.height - y : y; // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that line with z=0\n\n      var coord0 = this.transformVector(this.pixelUnprojectionMatrix, [x, y2, 0, 1]);\n      var coord1 = this.transformVector(this.pixelUnprojectionMatrix, [x, y2, 1, 1]);\n      var z0 = coord0[2];\n      var z1 = coord1[2];\n      var t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);\n      var v = vec2_lerp([], coord0, coord1, t);\n      var vUnprojected = this.unprojectFlat(v);\n      return xyz.length === 2 ? vUnprojected : [vUnprojected[0], vUnprojected[1], 0];\n    }\n  }, {\n    key: 'transformVector',\n    value: function transformVector(matrix, vector) {\n      var result = vec4_transformMat4([0, 0, 0, 0], vector, matrix);\n      var scale = 1 / result[3];\n      vec4_multiply(result, result, [scale, scale, scale, scale]);\n      return result;\n    } // NON_LINEAR PROJECTION HOOKS\n    // Used for web meractor projection\n\n    /**\n     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n     * Performs the nonlinear part of the web mercator projection.\n     * Remaining projection is done with 4x4 matrices which also handles\n     * perspective.\n     * @param {Array} lngLat - [lng, lat] coordinates\n     *   Specifies a point on the sphere to project onto the map.\n     * @return {Array} [x,y] coordinates.\n     */\n\n  }, {\n    key: 'projectFlat',\n    value: function projectFlat(_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          x = _ref5[0],\n          y = _ref5[1];\n\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return this._projectFlat.apply(this, arguments);\n    }\n    /**\n     * Unproject world point [x,y] on map onto {lat, lon} on sphere\n     * @param {object|Vector} xy - object with {x,y} members\n     *  representing point on projected map plane\n     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n     *   Has toArray method if you need a GeoJSON Array.\n     *   Per cartographic tradition, lat and lon are specified as degrees.\n     */\n\n  }, {\n    key: 'unprojectFlat',\n    value: function unprojectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return this._unprojectFlat.apply(this, arguments);\n    }\n  }, {\n    key: 'getMatrices',\n    value: function getMatrices() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$modelMatrix = _ref6.modelMatrix,\n          modelMatrix = _ref6$modelMatrix === undefined ? null : _ref6$modelMatrix;\n\n      var modelViewProjectionMatrix = this.viewProjectionMatrix;\n      var pixelProjectionMatrix = this.pixelProjectionMatrix;\n      var pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n      if (modelMatrix) {\n        modelViewProjectionMatrix = mat4_multiply([], this.viewProjectionMatrix, modelMatrix);\n        pixelProjectionMatrix = mat4_multiply([], this.pixelProjectionMatrix, modelMatrix);\n        pixelUnprojectionMatrix = mat4_invert([], pixelProjectionMatrix);\n      }\n\n      var matrices = Object.assign({\n        modelViewProjectionMatrix: modelViewProjectionMatrix,\n        viewProjectionMatrix: this.viewProjectionMatrix,\n        viewMatrix: this.viewMatrix,\n        projectionMatrix: this.projectionMatrix,\n        // project/unproject between pixels and world\n        pixelProjectionMatrix: pixelProjectionMatrix,\n        pixelUnprojectionMatrix: pixelUnprojectionMatrix,\n        width: this.width,\n        height: this.height,\n        scale: this.scale\n      });\n      return matrices;\n    }\n  }, {\n    key: 'getDistanceScales',\n    value: function getDistanceScales() {\n      return this.distanceScales;\n    }\n  }, {\n    key: 'getCameraPosition',\n    value: function getCameraPosition() {\n      return this.cameraPosition;\n    } // INTERNAL METHODS\n\n  }, {\n    key: '_initMatrices',\n    value: function _initMatrices() {\n      // Note: As usual, matrix operations should be applied in \"reverse\" order\n      // since vectors will be multiplied in from the right during transformation\n      var vpm = createMat4();\n      mat4_multiply(vpm, vpm, this.projectionMatrix);\n      mat4_multiply(vpm, vpm, this.viewMatrix);\n      this.viewProjectionMatrix = vpm; // Calculate inverse view matrix\n\n      this.viewMatrixInverse = mat4_invert([], this.viewMatrix) || this.viewMatrix; // Read the translation from the inverse view matrix\n\n      this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];\n      this.cameraDirection = [this.viewMatrix[2], this.viewMatrix[6], this.viewMatrix[10]];\n      this.cameraUp = [this.viewMatrix[1], this.viewMatrix[5], this.viewMatrix[9]];\n      /*\n       * Builds matrices that converts preprojected lngLats to screen pixels\n       * and vice versa.\n       * Note: Currently returns bottom-left coordinates!\n       * Note: Starts with the GL projection matrix and adds steps to the\n       *       scale and translate that matrix onto the window.\n       * Note: WebGL controls clip space to screen projection with gl.viewport\n       *       and does not need this step.\n       */\n      // matrix for conversion from location to screen coordinates\n\n      var m = createMat4();\n      mat4_scale(m, m, [this.width / 2, -this.height / 2, 1]);\n      mat4_translate(m, m, [1, -1, 0]);\n      mat4_multiply(m, m, this.viewProjectionMatrix);\n      this.pixelProjectionMatrix = m;\n      this.pixelUnprojectionMatrix = mat4_invert(createMat4(), this.pixelProjectionMatrix);\n\n      if (!this.pixelUnprojectionMatrix) {\n        throw new Error('Pixel project matrix not invertible');\n      }\n    }\n  }, {\n    key: '_projectFlat',\n    value: function _projectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return xyz;\n    }\n  }, {\n    key: '_unprojectFlat',\n    value: function _unprojectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return xyz;\n    }\n  }]);\n\n  return Viewport;\n}(); // Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\n\n\nexport default Viewport;\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}","map":null,"metadata":{},"sourceType":"module"}