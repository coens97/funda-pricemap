{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Flattens a nested array into a single level array,\n * or a single value into an array with one value\n * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]\n * @example flatten(1) => [1]\n * @param {Array} array The array to flatten.\n * @param {Function} filter= - Optional predicate called on each `value` to\n *   determine if it should be included (pushed onto) the resulting array.\n * @param {Function} map= - Optional transform applied to each array elements.\n * @param {Array} result=[] - Optional array to push value into\n * @return {Array} Returns the new flattened array (new array or `result` if provided)\n */\nexport function flatten(array) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$filter = _ref.filter,\n      filter = _ref$filter === void 0 ? function () {\n    return true;\n  } : _ref$filter,\n      _ref$map = _ref.map,\n      map = _ref$map === void 0 ? function (x) {\n    return x;\n  } : _ref$map,\n      _ref$result = _ref.result,\n      result = _ref$result === void 0 ? [] : _ref$result; // Wrap single object in array\n\n\n  if (!Array.isArray(array)) {\n    return filter(array) ? [map(array)] : [];\n  } // Deep flatten and filter the array\n\n\n  return flattenArray(array, filter, map, result);\n} // Deep flattens an array. Helper to `flatten`, see its parameters\n\nfunction flattenArray(array, filter, map, result) {\n  var index = -1;\n\n  while (++index < array.length) {\n    var value = array[index];\n\n    if (Array.isArray(value)) {\n      flattenArray(value, filter, map, result);\n    } else if (filter(value)) {\n      result.push(map(value));\n    }\n  }\n\n  return result;\n}\n\nexport function countVertices(nestedArray) {\n  var count = 0;\n  var index = -1;\n\n  while (++index < nestedArray.length) {\n    var value = nestedArray[index];\n\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      count += countVertices(value);\n    } else {\n      count++;\n    }\n  }\n\n  return count;\n} // Flattens nested array of vertices, padding third coordinate as needed\n\nexport function flattenVertices(nestedArray) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$result = _ref2.result,\n      result = _ref2$result === void 0 ? [] : _ref2$result,\n      _ref2$dimensions = _ref2.dimensions,\n      dimensions = _ref2$dimensions === void 0 ? 3 : _ref2$dimensions;\n\n  var index = -1;\n  var vertexLength = 0;\n\n  while (++index < nestedArray.length) {\n    var value = nestedArray[index];\n\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      flattenVertices(value, {\n        result: result,\n        dimensions: dimensions\n      });\n    } else {\n      // eslint-disable-next-line\n      if (vertexLength < dimensions) {\n        result.push(value);\n        vertexLength++;\n      }\n    }\n  } // Add a third coordinate if needed\n\n\n  if (vertexLength > 0 && vertexLength < dimensions) {\n    result.push(0);\n  }\n\n  return result;\n} // Uses copyWithin to significantly speed up typed array value filling\n\nexport function fillArray(_ref3) {\n  var target = _ref3.target,\n      source = _ref3.source,\n      _ref3$start = _ref3.start,\n      start = _ref3$start === void 0 ? 0 : _ref3$start,\n      _ref3$count = _ref3.count,\n      count = _ref3$count === void 0 ? 1 : _ref3$count;\n  var length = source.length;\n  var total = count * length;\n  var copied = 0;\n\n  for (var i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n} // Flattens nested array of vertices, padding third coordinate as needed\n\n/*\nexport function flattenTypedVertices(nestedArray, {\n  result = [],\n  Type = Float32Array,\n  start = 0,\n  dimensions = 3\n} = {}) {\n  let index = -1;\n  let vertexLength = 0;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      start = flattenTypedVertices(value, {result, start, dimensions});\n    } else {\n      if (vertexLength < dimensions) { // eslint-disable-line\n        result[start++] = value;\n        vertexLength++;\n      }\n    }\n  }\n  // Add a third coordinate if needed\n  if (vertexLength > 0 && vertexLength < dimensions) {\n    result[start++] = 0;\n  }\n  return start;\n}\n*/","map":null,"metadata":{},"sourceType":"module"}