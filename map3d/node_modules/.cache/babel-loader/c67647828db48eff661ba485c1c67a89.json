{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport MathArray from './math-array';\nimport { checkNumber } from './common';\nimport Vector2, { validateVector2 } from './vector2';\nimport Vector3, { validateVector3 } from './vector3';\nimport Vector4, { validateVector4 } from './vector4';\nimport assert from 'assert'; // gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n\n/* eslint-disable camelcase */\n\nimport mat4_determinant from 'gl-mat4/determinant';\nimport mat4_fromQuat from 'gl-mat4/fromQuat';\nimport mat4_frustum from 'gl-mat4/frustum';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_ortho from 'gl-mat4/ortho';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_transpose from 'gl-mat4/transpose';\nimport mat4_invert from 'gl-mat4/invert';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateY from 'gl-mat4/rotateY';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nimport mat4_rotate from 'gl-mat4/rotateZ';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport vec2_transformMat4 from 'gl-vec2/transformMat4';\nimport vec3_transformMat4 from 'gl-vec3/transformMat4';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nexport function validateMatrix4(m) {\n  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);\n}\n\nvar Matrix4 = function (_MathArray) {\n  _inherits(Matrix4, _MathArray);\n\n  function Matrix4() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, Matrix4);\n\n    var _this = _possibleConstructorReturn(this, (Matrix4.__proto__ || Object.getPrototypeOf(Matrix4)).call(this));\n\n    if (Array.isArray(args[0]) && arguments.length === 1) {\n      _this.copy(args[0]);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: 'setRowMajor',\n\n    /* eslint-disable max-params */\n    value: function setRowMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m30 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m01 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      var m21 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m31 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m02 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var m12 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n      var m32 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n      var m03 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;\n      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n      var m23 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;\n      return this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    }\n  }, {\n    key: 'setColumnMajor',\n    value: function setColumnMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n      var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n      var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;\n      var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n      var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;\n      return this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    }\n  }, {\n    key: 'set',\n    value: function set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m01;\n      this[2] = m02;\n      this[3] = m03;\n      this[4] = m10;\n      this[5] = m11;\n      this[6] = m12;\n      this[7] = m13;\n      this[8] = m20;\n      this[9] = m21;\n      this[10] = m22;\n      this[11] = m23;\n      this[12] = m30;\n      this[13] = m31;\n      this[14] = m32;\n      this[15] = m33;\n      this.check();\n      return this;\n    }\n    /* eslint-enable max-params */\n    // toString() {\n    //   if (config.printRowMajor) {\n    //     mat4_str(this);\n    //   } else {\n    //     mat4_str(this);\n    //   }\n    // }\n    // Row major setters and getters\n\n    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  }, {\n    key: 'determinant',\n\n    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n    // Accessors\n    value: function determinant() {\n      return mat4_determinant(this);\n    } // Constructors\n\n  }, {\n    key: 'identity',\n    value: function identity() {\n      for (var i = 0; i < IDENTITY.length; ++i) {\n        this[i] = IDENTITY[i];\n      }\n\n      this.check();\n      return this;\n    } // Calculates a 4x4 matrix from the given quaternion\n    // q quat  Quaternion to create matrix from\n\n  }, {\n    key: 'fromQuaternion',\n    value: function fromQuaternion(q) {\n      mat4_fromQuat(this, q);\n      this.check();\n      return this;\n    } // Generates a frustum matrix with the given bounds\n    // left  Number  Left bound of the frustum\n    // right Number  Right bound of the frustum\n    // bottom  Number  Bottom bound of the frustum\n    // top Number  Top bound of the frustum\n    // near  Number  Near bound of the frustum\n    // far Number  Far bound of the frustum\n\n  }, {\n    key: 'frustum',\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n      mat4_frustum(this, left, right, bottom, top, near, far);\n      this.check();\n      return this;\n    } // Generates a look-at matrix with the given eye position, focal point,\n    // and up axis\n    // eye vec3  Position of the viewer\n    // center  vec3  Point the viewer is looking at\n    // up  vec3  vec3 pointing up\n\n  }, {\n    key: 'lookAt',\n    value: function lookAt() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          eye = _ref2.eye,\n          _ref2$center = _ref2.center,\n          center = _ref2$center === undefined ? [0, 0, 0] : _ref2$center,\n          _ref2$up = _ref2.up,\n          up = _ref2$up === undefined ? [0, 1, 0] : _ref2$up;\n\n      mat4_lookAt(this, eye, center, up);\n      this.check();\n      return this;\n    } // Generates a orthogonal projection matrix with the given bounds\n    // left  number  Left bound of the frustum\n    // right number  Right bound of the frustum\n    // bottom  number  Bottom bound of the frustum\n    // top number  Top bound of the frustum\n    // near  number  Near bound of the frustum\n    // far number  Far bound of the frustum\n\n  }, {\n    key: 'ortho',\n    value: function ortho(_ref3) {\n      var left = _ref3.left,\n          right = _ref3.right,\n          bottom = _ref3.bottom,\n          top = _ref3.top,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === undefined ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === undefined ? 500 : _ref3$far;\n      mat4_ortho(this, left, right, bottom, top, near, far);\n      this.check();\n      return this;\n    } // Generates a perspective projection matrix with the given bounds\n    // fovy  number  Vertical field of view in radians\n    // aspect  number  Aspect ratio. typically viewport width/height\n    // near  number  Near bound of the frustum\n    // far number  Far bound of the frustum\n\n  }, {\n    key: 'perspective',\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === undefined ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === undefined ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === undefined ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === undefined ? 500 : _ref4$far;\n\n      if (fov > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4_perspective(this, fov, aspect, near, far);\n      this.check();\n      return this;\n    } // Modifiers\n\n  }, {\n    key: 'transpose',\n    value: function transpose() {\n      mat4_transpose(this, this);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'invert',\n    value: function invert() {\n      mat4_invert(this, this);\n      this.check();\n      return this;\n    } // Operations\n\n  }, {\n    key: 'multiplyLeft',\n    value: function multiplyLeft(a) {\n      mat4_multiply(this, a, this);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'multiplyRight',\n    value: function multiplyRight(a) {\n      mat4_multiply(this, this, a);\n      this.check();\n      return this;\n    } // Rotates a matrix by the given angle around the X axis\n\n  }, {\n    key: 'rotateX',\n    value: function rotateX(radians) {\n      mat4_rotateX(this, this, radians);\n      this.check();\n      return this;\n    } // Rotates a matrix by the given angle around the Y axis.\n\n  }, {\n    key: 'rotateY',\n    value: function rotateY(radians) {\n      mat4_rotateY(this, this, radians);\n      this.check();\n      return this;\n    } // Rotates a matrix by the given angle around the Z axis.\n\n  }, {\n    key: 'rotateZ',\n    value: function rotateZ(radians) {\n      mat4_rotateZ(this, this, radians);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'rotateXYZ',\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: 'rotateAxis',\n    value: function rotateAxis(radians, axis) {\n      mat4_rotate(this, this, radians, axis);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'scale',\n    value: function scale(vec) {\n      mat4_scale(this, this, vec);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'translate',\n    value: function translate(vec) {\n      mat4_translate(this, this, vec);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'transformVector2',\n    value: function transformVector2(vector, out) {\n      out = out || new Vector2();\n      vec2_transformMat4(out, vector, this);\n      assert(validateVector2(out));\n      return out;\n    }\n  }, {\n    key: 'transformVector3',\n    value: function transformVector3(vector) {\n      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      out = out || new Vector3();\n      vec3_transformMat4(out, vector, this);\n      assert(validateVector3(out));\n      return out;\n    }\n  }, {\n    key: 'transformVector4',\n    value: function transformVector4(vector) {\n      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector4();\n      out = out || new Vector4();\n      vec4_transformMat4(out, vector, this);\n      assert(validateVector4(out));\n      return out;\n    } // Transforms any 2, 3 or 4 element vector\n    // returns a newly minted Vector2, Vector3 or Vector4\n\n  }, {\n    key: 'transformVector',\n    value: function transformVector(vector, out) {\n      switch (vector.length) {\n        case 2:\n          return this.transformVector2(vector, out);\n\n        case 3:\n          return this.transformVector3(vector, out);\n\n        case 4:\n          return this.transformVector4(vector, out);\n\n        default:\n          throw new Error('Illegal vector');\n      }\n    }\n  }, {\n    key: 'ELEMENTS',\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: 'm00',\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: 'm01',\n    get: function get() {\n      return this[4];\n    },\n    set: function set(value) {\n      return this[4] = checkNumber(value);\n    }\n  }, {\n    key: 'm02',\n    get: function get() {\n      return this[8];\n    },\n    set: function set(value) {\n      return this[8] = checkNumber(value);\n    }\n  }, {\n    key: 'm03',\n    get: function get() {\n      return this[12];\n    },\n    set: function set(value) {\n      return this[12] = checkNumber(value);\n    }\n  }, {\n    key: 'm10',\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }, {\n    key: 'm11',\n    get: function get() {\n      return this[5];\n    },\n    set: function set(value) {\n      return this[5] = checkNumber(value);\n    }\n  }, {\n    key: 'm12',\n    get: function get() {\n      return this[9];\n    },\n    set: function set(value) {\n      return this[9] = checkNumber(value);\n    }\n  }, {\n    key: 'm13',\n    get: function get() {\n      return this[13];\n    },\n    set: function set(value) {\n      return this[13] = checkNumber(value);\n    }\n  }, {\n    key: 'm20',\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: 'm21',\n    get: function get() {\n      return this[6];\n    },\n    set: function set(value) {\n      return this[6] = checkNumber(value);\n    }\n  }, {\n    key: 'm22',\n    get: function get() {\n      return this[10];\n    },\n    set: function set(value) {\n      return this[10] = checkNumber(value);\n    }\n  }, {\n    key: 'm23',\n    get: function get() {\n      return this[14];\n    },\n    set: function set(value) {\n      return this[14] = checkNumber(value);\n    }\n  }, {\n    key: 'm30',\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }, {\n    key: 'm31',\n    get: function get() {\n      return this[7];\n    },\n    set: function set(value) {\n      return this[7] = checkNumber(value);\n    }\n  }, {\n    key: 'm32',\n    get: function get() {\n      return this[11];\n    },\n    set: function set(value) {\n      return this[11] = checkNumber(value);\n    }\n  }, {\n    key: 'm33',\n    get: function get() {\n      return this[15];\n    },\n    set: function set(value) {\n      return this[15] = checkNumber(value);\n    }\n  }]);\n\n  return Matrix4;\n}(MathArray);\n\nexport default Matrix4;","map":null,"metadata":{},"sourceType":"module"}