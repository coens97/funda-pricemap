{"ast":null,"code":"function _instanceof(left, right) {\n  return null != right && \"undefined\" != typeof Symbol && right[Symbol.hasInstance] ? right[Symbol.hasInstance](left) : left instanceof right;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _defineProperties(target, props) {\n  for (var descriptor, i = 0; i < props.length; i++) {\n    descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, \"value\" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;\n}\n\nimport PropTypes from \"prop-types\";\n\nfunction noop() {}\n\nvar propTypes = {\n  container: PropTypes.object,\n  mapboxApiAccessToken: PropTypes.string,\n  attributionControl: PropTypes.bool,\n  preserveDrawingBuffer: PropTypes.bool,\n  onLoad: PropTypes.func,\n  onError: PropTypes.func,\n  reuseMaps: PropTypes.bool,\n  reuseMap: PropTypes.bool,\n  transformRequest: PropTypes.func,\n  mapStyle: PropTypes.string,\n  visible: PropTypes.bool,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  viewState: PropTypes.object,\n  longitude: PropTypes.number,\n  latitude: PropTypes.number,\n  zoom: PropTypes.number,\n  bearing: PropTypes.number,\n  pitch: PropTypes.number,\n  altitude: PropTypes.number,\n  mapOptions: PropTypes.object\n},\n    defaultProps = {\n  mapboxApiAccessToken: getAccessToken(),\n  preserveDrawingBuffer: !1,\n  attributionControl: !0,\n  preventStyleDiffing: !1,\n  onLoad: noop,\n  onError: noop,\n  reuseMaps: !1,\n  reuseMap: !1,\n  transformRequest: null,\n  mapStyle: \"mapbox://styles/mapbox/light-v8\",\n  visible: !0,\n  bearing: 0,\n  pitch: 0,\n  altitude: 1.5,\n  width: 0,\n  height: 0,\n  mapOptions: {}\n};\nexport function getAccessToken() {\n  var accessToken = null;\n\n  if (\"undefined\" != typeof window && window.location) {\n    var match = window.location.search.match(/access_token=([^&\\/]*)/);\n    accessToken = match && match[1];\n  }\n\n  return accessToken || \"undefined\" == typeof process || (accessToken = accessToken || process.env.MapboxAccessToken), accessToken || null;\n}\n\nfunction checkPropTypes(props) {\n  var component = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : \"component\";\n  props.debug && PropTypes.checkPropTypes(propTypes, props, \"prop\", component);\n}\n\nvar Mapbox = function () {\n  function Mapbox(props) {\n    if (_classCallCheck(this, Mapbox), !props.mapboxgl) throw new Error(\"Mapbox not available\");\n\n    if (!Mapbox.initialized && console.debug) {\n      Mapbox.initialized = !0;\n      \"3.3.7\";\n      console.debug(\"react-map-gl: \".concat(\"3.3.7\", \" using mapbox-gl v\").concat(props.mapboxgl.version)), this._checkStyleSheet(props.mapboxgl.version);\n    }\n\n    this.props = {}, this._initialize(props);\n  }\n\n  return _createClass(Mapbox, [{\n    key: \"finalize\",\n    value: function finalize() {\n      return this._destroy(), this;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      return this._update(this.props, props), this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      return this._map.resize(), this;\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return this._map;\n    }\n  }, {\n    key: \"_create\",\n    value: function _create(props) {\n      if ((props.reuseMaps || props.reuseMap) && Mapbox.savedMap) {\n        this._map = this.map = Mapbox.savedMap;\n\n        var oldContainer = this._map.getContainer(),\n            newContainer = props.container;\n\n        for (newContainer.classList.add(\"mapboxgl-map\"); 0 < oldContainer.childNodes.length;) {\n          newContainer.appendChild(oldContainer.childNodes[0]);\n        }\n\n        this._map._container = newContainer, Mapbox.savedMap = null, props.mapStyle && this._map.setStyle(props.mapStyle), props.onLoad();\n      } else {\n        var mapOptions = {\n          container: props.container || document.body,\n          center: [0, 0],\n          zoom: 8,\n          pitch: 0,\n          bearing: 0,\n          style: props.mapStyle,\n          interactive: !1,\n          attributionControl: props.attributionControl,\n          preserveDrawingBuffer: props.preserveDrawingBuffer\n        };\n        props.transformRequest && (mapOptions.transformRequest = props.transformRequest), this._map = this.map = new props.mapboxgl.Map(Object.assign({}, mapOptions, props.mapOptions)), this.map.once(\"load\", props.onLoad), this.map.on(\"error\", props.onError);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      this._map && (Mapbox.savedMap ? this._map.remove() : Mapbox.savedMap = this._map, this._map = null);\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(props) {\n      props = Object.assign({}, defaultProps, props), checkPropTypes(props, \"Mapbox\"), this.accessToken = props.mapboxApiAccessToken || defaultProps.mapboxApiAccessToken, props.mapboxgl && (this.accessToken ? props.mapboxgl.accessToken = this.accessToken : props.mapboxgl.accessToken = \"no-token\"), this._create(props);\n      var canvas = this.map.getCanvas();\n      canvas && (canvas.style.outline = \"none\"), this._updateMapViewport({}, props), this._updateMapSize({}, props), this.props = props;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(oldProps, newProps) {\n      this._map && (newProps = Object.assign({}, this.props, newProps), checkPropTypes(newProps, \"Mapbox\"), this._updateMapViewport(oldProps, newProps), this._updateMapSize(oldProps, newProps), this.props = newProps);\n    }\n  }, {\n    key: \"_updateMapSize\",\n    value: function _updateMapSize(oldProps, newProps) {\n      var sizeChanged = oldProps.width !== newProps.width || oldProps.height !== newProps.height;\n      sizeChanged && this._map.resize();\n    }\n  }, {\n    key: \"_updateMapViewport\",\n    value: function _updateMapViewport(oldProps, newProps) {\n      var oldViewState = this._getViewState(oldProps),\n          newViewState = this._getViewState(newProps),\n          viewportChanged = newViewState.latitude !== oldViewState.latitude || newViewState.longitude !== oldViewState.longitude || newViewState.zoom !== oldViewState.zoom || newViewState.pitch !== oldViewState.pitch || newViewState.bearing !== oldViewState.bearing || newViewState.altitude !== oldViewState.altitude;\n\n      viewportChanged && (this._map.jumpTo(this._getMapboxViewStateProps(newProps)), newViewState.altitude !== oldViewState.altitude && (this._map.transform.altitude = newViewState.altitude));\n    }\n  }, {\n    key: \"_getViewState\",\n    value: function _getViewState(props) {\n      var _ref = props.viewState || props,\n          longitude = _ref.longitude,\n          latitude = _ref.latitude,\n          zoom = _ref.zoom,\n          _ref$pitch = _ref.pitch,\n          pitch = void 0 === _ref$pitch ? 0 : _ref$pitch,\n          _ref$bearing = _ref.bearing,\n          bearing = void 0 === _ref$bearing ? 0 : _ref$bearing,\n          _ref$altitude = _ref.altitude,\n          altitude = void 0 === _ref$altitude ? 1.5 : _ref$altitude;\n\n      return {\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom,\n        pitch: pitch,\n        bearing: bearing,\n        altitude: altitude\n      };\n    }\n  }, {\n    key: \"_checkStyleSheet\",\n    value: function _checkStyleSheet() {\n      var mapboxVersion = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : \"0.47.0\";\n      if (\"undefined\" != typeof document) try {\n        var testElement = document.createElement(\"div\");\n        testElement.className = \"mapboxgl-map\", testElement.style.display = \"none\", document.body.append(testElement);\n        var isCssLoaded = \"static\" !== window.getComputedStyle(testElement).position;\n\n        if (!isCssLoaded) {\n          var link = document.createElement(\"link\");\n          link.setAttribute(\"rel\", \"stylesheet\"), link.setAttribute(\"type\", \"text/css\"), link.setAttribute(\"href\", \"https://api.tiles.mapbox.com/mapbox-gl-js/v\".concat(mapboxVersion, \"/mapbox-gl.css\")), document.head.append(link);\n        }\n      } catch (error) {}\n    }\n  }, {\n    key: \"_getMapboxViewStateProps\",\n    value: function _getMapboxViewStateProps(props) {\n      var viewState = this._getViewState(props);\n\n      return {\n        center: [viewState.longitude, viewState.latitude],\n        zoom: viewState.zoom,\n        bearing: viewState.bearing,\n        pitch: viewState.pitch,\n        width: props.width,\n        height: props.height\n      };\n    }\n  }]), Mapbox;\n}();\n\nexport { Mapbox as default };\nMapbox.propTypes = propTypes, Mapbox.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}