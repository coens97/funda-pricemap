{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Stats = function () {\n  function Stats(_ref) {\n    var id = _ref.id;\n\n    _classCallCheck(this, Stats);\n\n    this.id = id;\n    this.time = 0;\n    this.total = 0;\n    this.average = 0;\n    this.count = 0;\n    this._time = 0;\n  }\n\n  _createClass(Stats, [{\n    key: \"timeStart\",\n    value: function timeStart() {\n      this._time = this.timestampMs();\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd() {\n      this.time = this.timestampMs() - this._time;\n      this.total += this.time;\n      this.count++;\n      this.average = this.total / this.count;\n    }\n  }, {\n    key: \"timestampMs\",\n    value: function timestampMs() {\n      /* global window */\n      return (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefined && window.performance ? window.performance.now() : Date.now();\n    }\n  }, {\n    key: \"getTimeString\",\n    value: function getTimeString() {\n      return this.id + \":\" + formatTime(this.time) + \"(\" + this.count + \")\";\n    }\n  }]);\n\n  return Stats;\n}(); // TODO: Currently unused, keeping in case we want it later for log formatting\n\n\nexport default Stats;\nexport function formatTime(ms) {\n  var formatted = void 0;\n\n  if (ms < 10) {\n    formatted = ms.toFixed(2) + \"ms\";\n  } else if (ms < 100) {\n    formatted = ms.toFixed(1) + \"ms\";\n  } else if (ms < 1000) {\n    formatted = ms.toFixed(0) + \"ms\";\n  } else {\n    formatted = (ms / 1000).toFixed(2) + \"s\";\n  }\n\n  return formatted;\n}\nexport function leftPad(string) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n\n  while (string.length < length) {\n    string = \" \" + string;\n  }\n\n  return string;\n}","map":null,"metadata":{},"sourceType":"module"}