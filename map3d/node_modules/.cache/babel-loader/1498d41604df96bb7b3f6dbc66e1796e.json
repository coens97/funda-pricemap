{"ast":null,"code":"function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nimport Resource from './resource';\nimport { isWebGL2, assertWebGL2Context } from '../webgl-utils';\nimport assert from '../utils/assert';\nvar GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\nvar GL_TRANSFORM_FEEDBACK = 0x8E22;\n\nvar TranformFeedback =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(TranformFeedback, _Resource);\n\n  _createClass(TranformFeedback, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }, {\n    key: \"isHandle\",\n    value: function isHandle(handle) {\n      return this.gl.isTransformFeedback(this.handle);\n    }\n    /**\n     * @class\n     * @param {WebGL2RenderingContext} gl - context\n     * @param {Object} opts - options\n     */\n\n  }]);\n\n  function TranformFeedback(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TranformFeedback);\n\n    assertWebGL2Context(gl);\n    _this = _possibleConstructorReturn(this, (TranformFeedback.__proto__ || Object.getPrototypeOf(TranformFeedback)).call(this, gl, opts));\n    _this.buffers = {};\n    Object.seal(_assertThisInitialized(_this));\n\n    _this.initialize(opts);\n\n    return _this;\n  }\n\n  _createClass(TranformFeedback, [{\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var _ref$buffers = _ref.buffers,\n          buffers = _ref$buffers === void 0 ? {} : _ref$buffers,\n          _ref$varyingMap = _ref.varyingMap,\n          varyingMap = _ref$varyingMap === void 0 ? {} : _ref$varyingMap;\n      this.bindBuffers(buffers, {\n        clear: true,\n        varyingMap: varyingMap\n      });\n    }\n  }, {\n    key: \"bindBuffers\",\n    value: function bindBuffers() {\n      var buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$clear = _ref2.clear,\n          clear = _ref2$clear === void 0 ? false : _ref2$clear,\n          _ref2$varyingMap = _ref2.varyingMap,\n          varyingMap = _ref2$varyingMap === void 0 ? {} : _ref2$varyingMap;\n\n      if (clear) {\n        this._unbindBuffers();\n\n        this.buffers = {};\n      }\n\n      for (var bufferName in buffers) {\n        var buffer = buffers[bufferName];\n        var index = Number.isFinite(Number(bufferName)) ? Number(bufferName) : varyingMap[bufferName];\n        assert(Number.isFinite(index));\n        this.buffers[index] = buffer;\n      }\n    } // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate\n    // program.use, should we move these methods (begin/pause/resume/end) to the Program?\n\n  }, {\n    key: \"begin\",\n    value: function begin(primitiveMode) {\n      this._bindBuffers();\n\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.beginTransformFeedback(primitiveMode);\n      return this;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.pauseTransformFeedback();\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n\n      this._unbindBuffers();\n\n      return this;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this._bindBuffers();\n\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.resumeTransformFeedback();\n      return this;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.endTransformFeedback();\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n\n      this._unbindBuffers();\n\n      return this;\n    }\n  }, {\n    key: \"bindBuffer\",\n    value: function bindBuffer(_ref3) {\n      var index = _ref3.index,\n          buffer = _ref3.buffer,\n          _ref3$offset = _ref3.offset,\n          offset = _ref3$offset === void 0 ? 0 : _ref3$offset,\n          size = _ref3.size; // Need to avoid chrome bug where buffer that is already bound to a different target\n      // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n\n      buffer.unbind();\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n\n      if (size === undefined) {\n        this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);\n      } else {\n        this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unbindBuffer\",\n    value: function unbindBuffer(_ref4) {\n      var index = _ref4.index;\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);\n      return this;\n    } // PRIVATE METHODS\n    // See https://github.com/KhronosGroup/WebGL/issues/2346\n    // If it was true that having a buffer on an unused TF was a problem\n    // it would make the entire concept of transform feedback objects pointless.\n    // The whole point of them is like VertexArrayObjects.\n    // You set them up with all in outputs at init time and\n    // then in one call you can setup all the outputs just before drawing.\n    // Since the point of transform feedback is to generate data that will\n    // then be used as inputs to attributes it makes zero sense you'd\n    // have to unbind them from every unused transform feedback object\n    // before you could use them in an attribute. If that was the case\n    // there would be no reason to setup transform feedback objects ever.\n    // You'd always use the default because you'd always have to bind and\n    // unbind all the buffers.\n\n  }, {\n    key: \"_bindBuffers\",\n    value: function _bindBuffers() {\n      for (var bufferIndex in this.buffers) {\n        this.bindBuffer({\n          buffer: this.buffers[bufferIndex],\n          index: Number(bufferIndex)\n        });\n      }\n    }\n  }, {\n    key: \"_unbindBuffers\",\n    value: function _unbindBuffers() {\n      for (var bufferIndex in this.buffers) {\n        this.unbindBuffer({\n          buffer: this.buffers[bufferIndex],\n          index: Number(bufferIndex)\n        });\n      }\n    } // RESOURCE METHODS\n\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createTransformFeedback();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteTransformFeedback(this.handle);\n    }\n  }]);\n\n  return TranformFeedback;\n}(Resource);\n\nexport { TranformFeedback as default };","map":null,"metadata":{},"sourceType":"module"}