{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable no-inline-comments */\n\n\nimport GL from './api';\nimport { assertWebGL2Context, isWebGL2 } from './context';\nimport VertexArray from './vertex-array';\nimport Resource from './resource';\nimport Texture from './texture';\nimport { getTransformFeedbackMode } from './transform-feedback';\nimport { parseUniformName, getUniformSetter } from './uniforms';\nimport { VertexShader, FragmentShader } from './shader';\nimport { log, uid } from '../utils';\nimport assert from 'assert'; // const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\n// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,\n// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,\n// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,\n// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,\n// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,\n// INTERLEAVED_ATTRIBS: 0x8C8C,\n// SEPARATE_ATTRIBS : 0x8C8D,\n\nvar Program =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(Program, _Resource);\n  /*\n   * @classdesc\n   * Handles creation of programs, mapping of attributes and uniforms\n   *\n   * @class\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {Object} opts - options\n   * @param {String} opts.vs - Vertex shader source\n   * @param {String} opts.fs - Fragment shader source\n   * @param {String} opts.id= - Id\n   */\n\n\n  function Program(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Program);\n\n    var _this = _possibleConstructorReturn(this, (Program.__proto__ || Object.getPrototypeOf(Program)).call(this, gl, opts));\n\n    _this.initialize(opts);\n\n    _this.vertexAttributes = VertexArray.getDefaultArray(gl);\n    Object.seal(_this); // If program is not named, name it after shader names\n\n    if (!opts.id) {\n      var programName = _this.vs.getName() || _this.fs.getName();\n\n      programName = programName.replace(/shader/i, '');\n      programName = programName ? programName + '-program' : 'program'; // TODO - this.id will already have been initialized\n\n      _this.id = uid(programName);\n    }\n\n    return _this;\n  }\n\n  _createClass(Program, [{\n    key: 'initialize',\n    value: function initialize() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          vs = _ref.vs,\n          fs = _ref.fs,\n          defaultUniforms = _ref.defaultUniforms,\n          varyings = _ref.varyings,\n          _ref$bufferMode = _ref.bufferMode,\n          bufferMode = _ref$bufferMode === undefined ? GL.SEPARATE_ATTRIBS : _ref$bufferMode; // Create shaders if needed\n\n\n      this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n      this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n      assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n      assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n      this.defaultUniforms = defaultUniforms; // Setup varyings if supplied\n\n      if (varyings) {\n        assertWebGL2Context(this.gl);\n        this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n        this.varyings = getVaryingMap(varyings, bufferMode);\n      }\n\n      this._compileAndLink(); // determine attribute locations (i.e. indices)\n\n\n      this._attributeLocations = this._getAttributeLocations();\n      this._attributeCount = this.getAttributeCount();\n      this._warn = [];\n      this._filledLocations = {}; // prepare uniform setters\n\n      this._uniformSetters = this._getUniformSetters();\n      this._uniformCount = this.getUniformCount();\n      this._textureIndexCounter = 0;\n      return this;\n    }\n  }, {\n    key: 'use',\n    value: function use() {\n      this.gl.useProgram(this.handle);\n      return this;\n    } // A good thing about webGL is that there are so many ways to draw things,\n    // e.g. depending on whether data is indexed and/or isInstanced.\n    // This function unifies those into a single call with simple parameters\n    // that have sane defaults.\n\n  }, {\n    key: 'draw',\n    value: function draw(_ref2) {\n      var _this2 = this;\n\n      var _ref2$drawMode = _ref2.drawMode,\n          drawMode = _ref2$drawMode === undefined ? GL.TRIANGLES : _ref2$drawMode,\n          vertexCount = _ref2.vertexCount,\n          _ref2$offset = _ref2.offset,\n          offset = _ref2$offset === undefined ? 0 : _ref2$offset,\n          start = _ref2.start,\n          end = _ref2.end,\n          _ref2$isIndexed = _ref2.isIndexed,\n          isIndexed = _ref2$isIndexed === undefined ? false : _ref2$isIndexed,\n          _ref2$indexType = _ref2.indexType,\n          indexType = _ref2$indexType === undefined ? GL.UNSIGNED_SHORT : _ref2$indexType,\n          _ref2$isInstanced = _ref2.isInstanced,\n          isInstanced = _ref2$isInstanced === undefined ? false : _ref2$isInstanced,\n          _ref2$instanceCount = _ref2.instanceCount,\n          instanceCount = _ref2$instanceCount === undefined ? 0 : _ref2$instanceCount,\n          _ref2$vertexArray = _ref2.vertexArray,\n          vertexArray = _ref2$vertexArray === undefined ? null : _ref2$vertexArray,\n          _ref2$transformFeedba = _ref2.transformFeedback,\n          transformFeedback = _ref2$transformFeedba === undefined ? null : _ref2$transformFeedba,\n          _ref2$uniforms = _ref2.uniforms,\n          uniforms = _ref2$uniforms === undefined ? {} : _ref2$uniforms,\n          _ref2$samplers = _ref2.samplers,\n          samplers = _ref2$samplers === undefined ? {} : _ref2$samplers,\n          _ref2$parameters = _ref2.parameters,\n          parameters = _ref2$parameters === undefined ? {} : _ref2$parameters,\n          settings = _ref2.settings;\n\n      if (settings) {\n        log.deprecated('settings', 'parameters');\n        parameters = settings;\n      }\n\n      vertexArray = vertexArray || VertexArray.getDefaultArray(this.gl);\n      vertexArray.bind(function () {\n        _this2.gl.useProgram(_this2.handle);\n\n        if (transformFeedback) {\n          if (parameters[GL.RASTERIZER_DISCARD]) {\n            // bypass fragment shader\n            _this2.gl.enable(GL.RASTERIZER_DISCARD);\n          }\n\n          var primitiveMode = getTransformFeedbackMode({\n            drawMode: drawMode\n          });\n          transformFeedback.begin(primitiveMode);\n        }\n\n        _this2.setUniforms(uniforms, samplers); // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n\n\n        if (isIndexed && isInstanced) {\n          _this2.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(_this2.gl) && !isNaN(start) && !isNaN(end)) {\n          _this2.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          _this2.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          _this2.gl.drawArrays(drawMode, offset, vertexCount);\n        } // this.gl.useProgram(null);\n\n\n        if (transformFeedback) {\n          transformFeedback.end();\n\n          if (parameters[GL.RASTERIZER_DISCARD]) {\n            // resume fragment shader\n            _this2.gl.disable(GL.RASTERIZER_DISCARD);\n          }\n        }\n      });\n      return this;\n    }\n    /**\n     * Attach a map of Buffers values to a program\n     * Only attributes with names actually present in the linked program\n     * will be updated. Other supplied buffers will be ignored.\n     *\n     * @param {Object} buffers - An object map with attribute names being keys\n     *  and values are expected to be instances of Buffer.\n     * @returns {Program} Returns itself for chaining.\n     */\n\n    /* eslint-disable max-statements */\n\n  }, {\n    key: 'setBuffers',\n    value: function setBuffers(buffers) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$clear = _ref3.clear,\n          clear = _ref3$clear === undefined ? true : _ref3$clear,\n          _ref3$check = _ref3.check,\n          check = _ref3$check === undefined ? true : _ref3$check,\n          _ref3$drawParams = _ref3.drawParams,\n          drawParams = _ref3$drawParams === undefined ? {} : _ref3$drawParams;\n\n      if (clear) {\n        this._filledLocations = {};\n      } // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n\n\n      drawParams.isInstanced = false;\n      drawParams.isIndexed = false;\n      drawParams.indexType = null;\n\n      var _sortBuffersByLocatio = this._sortBuffersByLocation(buffers),\n          locations = _sortBuffersByLocatio.locations,\n          elements = _sortBuffersByLocatio.elements; // Process locations in order\n\n\n      for (var location = 0; location < locations.length; ++location) {\n        var bufferName = locations[location];\n        var buffer = buffers[bufferName]; // DISABLE MISSING ATTRIBUTE\n\n        if (!buffer) {\n          this.vertexAttributes.disable(location);\n        } else {\n          var divisor = buffer.layout.instanced ? 1 : 0;\n          this.vertexAttributes.enable(location);\n          this.vertexAttributes.setBuffer({\n            location: location,\n            buffer: buffer\n          });\n          this.vertexAttributes.setDivisor(location, divisor);\n          drawParams.isInstanced = buffer.layout.instanced > 0;\n          this._filledLocations[bufferName] = true;\n        }\n      } // SET ELEMENTS ARRAY BUFFER\n\n\n      if (elements) {\n        var _buffer = buffers[elements];\n\n        _buffer.bind();\n\n        drawParams.isIndexed = true;\n        drawParams.indexType = _buffer.layout.type;\n      }\n\n      if (check) {\n        this._checkBuffers();\n      }\n\n      return this;\n    }\n    /* eslint-enable max-statements */\n\n    /*\n     * @returns {Program} Returns itself for chaining.\n     */\n\n  }, {\n    key: 'unsetBuffers',\n    value: function unsetBuffers() {\n      var length = this._attributeCount;\n\n      for (var i = 1; i < length; ++i) {\n        // this.vertexAttributes.setDivisor(i, 0);\n        this.vertexAttributes.disable(i);\n      } // Clear elements buffer\n\n\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\n      return this;\n    }\n    /**\n     * Apply a set of uniform values to a program\n     * Only uniforms with names actually present in the linked program\n     * will be updated.\n     * other uniforms will be ignored\n     *\n     * @param {Object} uniformMap - An object with names being keys\n     * @returns {Program} - returns itself for chaining.\n     */\n\n    /* eslint-disable max-depth */\n\n  }, {\n    key: 'setUniforms',\n    value: function setUniforms(uniforms) {\n      var samplers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      for (var uniformName in uniforms) {\n        var uniform = uniforms[uniformName];\n        var uniformSetter = this._uniformSetters[uniformName];\n        var sampler = samplers[uniformName];\n\n        if (uniformSetter) {\n          if (uniform instanceof Texture) {\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            } // Bind texture to index\n\n\n            var texture = uniform;\n            var textureIndex = uniformSetter.textureIndex;\n            texture.bind(textureIndex); // Bind a sampler (if supplied) to index\n\n            if (sampler) {\n              sampler.bind(textureIndex);\n            } // Set the uniform sampler to the texture index\n\n\n            uniformSetter(textureIndex);\n          } else {\n            // Just set the value\n            uniformSetter(uniform);\n          }\n        }\n      }\n\n      return this;\n    }\n    /* eslint-enable max-depth */\n    // setTransformFeedbackBuffers(buffers) {\n    //   for (const buffer of buffers) {\n    //     buffer.bindBase()\n    //   }\n    // }\n\n    /**\n     * ATTRIBUTES API\n     * (Locations are numeric indices)\n     * @return {Number} count\n     */\n\n  }, {\n    key: 'getAttributeCount',\n    value: function getAttributeCount() {\n      return this._getParameter(GL.ACTIVE_ATTRIBUTES);\n    }\n    /**\n     * Returns location (index) of a name\n     * @param {String} attributeName - name of an attribute\n     *   (matches name in a linked shader)\n     * @returns {Number} - // array of actual attribute names from shader linking\n     */\n\n  }, {\n    key: 'getAttributeLocation',\n    value: function getAttributeLocation(attributeName) {\n      return this.gl.getAttribLocation(this.handle, attributeName);\n    }\n    /**\n     * Returns an object with info about attribute at index \"location\"/\n     * @param {int} location - index of an attribute\n     * @returns {WebGLActiveInfo} - info about an active attribute\n     *   fields: {name, size, type}\n     */\n\n  }, {\n    key: 'getAttributeInfo',\n    value: function getAttributeInfo(location) {\n      return this.gl.getActiveAttrib(this.handle, location);\n    }\n    /**\n     * UNIFORMS API\n     * (Locations are numeric indices)\n     * @return {Number} count\n     */\n\n  }, {\n    key: 'getUniformCount',\n    value: function getUniformCount() {\n      return this._getParameter(GL.ACTIVE_UNIFORMS);\n    }\n    /*\n     * @returns {WebGLActiveInfo} - object with {name, size, type}\n     */\n\n  }, {\n    key: 'getUniformInfo',\n    value: function getUniformInfo(index) {\n      return this.gl.getActiveUniform(this.handle, index);\n    }\n    /*\n     * @returns {WebGLUniformLocation} - opaque object representing location\n     * of uniform, used by setter methods\n     */\n\n  }, {\n    key: 'getUniformLocation',\n    value: function getUniformLocation(name) {\n      return this.gl.getUniformLocation(this.handle, name);\n    }\n  }, {\n    key: 'getUniformValue',\n    value: function getUniformValue(location) {\n      return this.gl.getUniform(this.handle, location);\n    } // WebGL2\n\n    /**\n     * @param {GLuint} index\n     * @return {WebGLActiveInfo} - object with {name, size, type}\n     */\n\n  }, {\n    key: 'getVarying',\n    value: function getVarying(program, index) {\n      var result = this.gl.getTransformFeedbackVarying(program, index);\n      return result;\n    } // Retrieves the assigned color number binding for the user-defined varying\n    // out variable name for program. program must have previously been linked.\n\n  }, {\n    key: 'getFragDataLocation',\n    value: function getFragDataLocation(varyingName) {\n      assertWebGL2Context(this.gl);\n      return this.gl.getFragDataLocation(this.handle, varyingName);\n    } // @returns {WebGLShader[]} - array of attached WebGLShader objects\n\n  }, {\n    key: 'getAttachedShaders',\n    value: function getAttachedShaders() {\n      return this.gl.getAttachedShaders(this.handle);\n    } // PRIVATE METHODS\n\n  }, {\n    key: '_compileAndLink',\n    value: function _compileAndLink() {\n      var gl = this.gl;\n      gl.attachShader(this.handle, this.vs.handle);\n      gl.attachShader(this.handle, this.fs.handle);\n      gl.linkProgram(this.handle); // Avoid checking program linking error in production\n\n      if (gl.debug || log.priority > 0) {\n        gl.validateProgram(this.handle);\n        var linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n\n        if (!linked) {\n          throw new Error('Error linking ' + gl.getProgramInfoLog(this.handle));\n        }\n      }\n    }\n  }, {\n    key: '_checkBuffers',\n    value: function _checkBuffers() {\n      for (var attributeName in this._attributeLocations) {\n        if (!this._filledLocations[attributeName] && !this._warn[attributeName]) {\n          var location = this._attributeLocations[attributeName]; // throw new Error(`Program ${this.id}: ` +\n          //   `Attribute ${location}:${attributeName} not supplied`);\n\n          log.warn(0, 'Program ' + this.id + ': Attribute ' + location + ':' + attributeName + ' not supplied');\n          this._warn[attributeName] = true;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: '_sortBuffersByLocation',\n    value: function _sortBuffersByLocation(buffers) {\n      var elements = null;\n      var locations = new Array(this._attributeCount);\n\n      for (var bufferName in buffers) {\n        var buffer = buffers[bufferName];\n        var location = this._attributeLocations[bufferName];\n\n        if (location === undefined) {\n          if (buffer.target === GL.ELEMENT_ARRAY_BUFFER && elements) {\n            throw new Error(this._print(bufferName) + ' duplicate GL.ELEMENT_ARRAY_BUFFER');\n          } else if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n            elements = bufferName;\n          } else if (!this._warn[bufferName]) {\n            log.warn(2, this._print(bufferName) + ' not used');\n            this._warn[bufferName] = true;\n          }\n        } else {\n          if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n            throw new Error(this._print(bufferName) + ':' + location + ' ' + 'has both location and type gl.ELEMENT_ARRAY_BUFFER');\n          }\n\n          locations[location] = bufferName;\n        }\n      }\n\n      return {\n        locations: locations,\n        elements: elements\n      };\n    } // Check that all active attributes are enabled\n\n  }, {\n    key: '_areAllAttributesEnabled',\n    value: function _areAllAttributesEnabled() {\n      var length = this._attributeCount;\n\n      for (var i = 0; i < length; ++i) {\n        if (!this.vertexAttributes.isEnabled(i)) {\n          return false;\n        }\n      }\n\n      return true;\n    } // determine attribute locations (maps attribute name to index)\n\n  }, {\n    key: '_getAttributeLocations',\n    value: function _getAttributeLocations() {\n      var attributeLocations = {};\n      var length = this.getAttributeCount();\n\n      for (var location = 0; location < length; location++) {\n        var name = this.getAttributeInfo(location).name;\n        attributeLocations[name] = this.getAttributeLocation(name);\n      }\n\n      return attributeLocations;\n    } // create uniform setters\n    // Map of uniform names to setter functions\n\n  }, {\n    key: '_getUniformSetters',\n    value: function _getUniformSetters() {\n      var gl = this.gl;\n      var uniformSetters = {};\n      var length = this.getUniformCount();\n\n      for (var i = 0; i < length; i++) {\n        var info = this.getUniformInfo(i);\n        var parsedName = parseUniformName(info.name);\n        var location = this.getUniformLocation(parsedName.name);\n        uniformSetters[parsedName.name] = getUniformSetter(gl, location, info, parsedName.isArray);\n      }\n\n      return uniformSetters;\n    }\n  }, {\n    key: '_print',\n    value: function _print(bufferName) {\n      return 'Program ' + this.id + ': Attribute ' + bufferName;\n    }\n  }, {\n    key: '_createHandle',\n    value: function _createHandle() {\n      return this.gl.createProgram();\n    }\n  }, {\n    key: '_deleteHandle',\n    value: function _deleteHandle() {\n      this.gl.deleteProgram(this.handle);\n    }\n  }, {\n    key: '_getOptionsFromHandle',\n    value: function _getOptionsFromHandle(handle) {\n      var shaderHandles = this.gl.getAttachedShaders(handle);\n      var opts = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = shaderHandles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var shaderHandle = _step.value;\n          var type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n\n          switch (type) {\n            case GL.VERTEX_SHADER:\n              opts.vs = new VertexShader({\n                handle: shaderHandle\n              });\n              break;\n\n            case GL.FRAGMENT_SHADER:\n              opts.fs = new FragmentShader({\n                handle: shaderHandle\n              });\n              break;\n\n            default:\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return opts;\n    }\n  }, {\n    key: '_getParameter',\n    value: function _getParameter(pname) {\n      return this.gl.getProgramParameter(this.handle, pname);\n    }\n  }]);\n\n  return Program;\n}(Resource); // create uniform setters\n// Map of uniform names to setter functions\n\n\nexport default Program;\nexport function getUniformDescriptors(gl, program) {\n  var uniformDescriptors = {};\n  var length = program.getUniformCount();\n\n  for (var i = 0; i < length; i++) {\n    var info = program.getUniformInfo(i);\n    var location = program.getUniformLocation(info.name);\n    var descriptor = getUniformSetter(gl, location, info);\n    uniformDescriptors[descriptor.name] = descriptor;\n  }\n\n  return uniformDescriptors;\n} // Get a map of buffer indices\n\nexport function getVaryingMap(varyings, bufferMode) {\n  var varyingMap = {};\n  var index = 0;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = varyings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var varying = _step2.value;\n\n      if (bufferMode === GL.SEPARATE_ATTRIBS) {\n        varyingMap[varyings] = {\n          index: index\n        };\n        index++;\n      } else if (varying === 'gl_NextBuffer') {\n        index++;\n      } else {\n        // Add a \"safe\" offset as fallback unless app specifies it\n        // Could query\n        varyingMap[varyings] = {\n          index: index,\n          offset: 16\n        };\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return varyingMap;\n}","map":null,"metadata":{},"sourceType":"module"}