{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Supports loading (requesting) assets with XHR (XmlHttpRequest)\n\n/* eslint-disable guard-for-in, complexity, no-try-catch */\n\n/* global XMLHttpRequest */\n\nfunction noop() {}\n\nvar XHR_STATES = {\n  UNINITIALIZED: 0,\n  LOADING: 1,\n  LOADED: 2,\n  INTERACTIVE: 3,\n  COMPLETED: 4\n};\n\nvar XHR =\n/*#__PURE__*/\nfunction () {\n  function XHR(_ref) {\n    var url = _ref.url,\n        _ref$path = _ref.path,\n        path = _ref$path === void 0 ? null : _ref$path,\n        _ref$method = _ref.method,\n        method = _ref$method === void 0 ? 'GET' : _ref$method,\n        _ref$asynchronous = _ref.asynchronous,\n        asynchronous = _ref$asynchronous === void 0 ? true : _ref$asynchronous,\n        _ref$noCache = _ref.noCache,\n        noCache = _ref$noCache === void 0 ? false : _ref$noCache,\n        _ref$sendAsBinary = _ref.sendAsBinary,\n        sendAsBinary = _ref$sendAsBinary === void 0 ? false : _ref$sendAsBinary,\n        _ref$responseType = _ref.responseType,\n        responseType = _ref$responseType === void 0 ? false : _ref$responseType,\n        _ref$onProgress = _ref.onProgress,\n        onProgress = _ref$onProgress === void 0 ? noop : _ref$onProgress,\n        _ref$onError = _ref.onError,\n        onError = _ref$onError === void 0 ? noop : _ref$onError,\n        _ref$onAbort = _ref.onAbort,\n        onAbort = _ref$onAbort === void 0 ? noop : _ref$onAbort,\n        _ref$onComplete = _ref.onComplete,\n        onComplete = _ref$onComplete === void 0 ? noop : _ref$onComplete;\n\n    _classCallCheck(this, XHR);\n\n    this.url = path ? path.join(path, url) : url;\n    this.method = method;\n    this.async = asynchronous;\n    this.noCache = noCache;\n    this.sendAsBinary = sendAsBinary;\n    this.responseType = responseType;\n    this.req = new XMLHttpRequest();\n\n    this.req.onload = function (e) {\n      return onComplete(e);\n    };\n\n    this.req.onerror = function (e) {\n      return onError(e);\n    };\n\n    this.req.onabort = function (e) {\n      return onAbort(e);\n    };\n\n    this.req.onprogress = function (e) {\n      if (e.lengthComputable) {\n        onProgress(e, Math.round(e.loaded / e.total * 100));\n      } else {\n        onProgress(e, -1);\n      }\n    };\n  }\n\n  _createClass(XHR, [{\n    key: \"setRequestHeader\",\n    value: function setRequestHeader(header, value) {\n      this.req.setRequestHeader(header, value);\n      return this;\n    } // /* eslint-disable max-statements */\n\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync() {\n      var _this = this;\n\n      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.body || null;\n      return new Promise(function (resolve, reject) {\n        try {\n          var req = _this.req,\n              method = _this.method,\n              noCache = _this.noCache,\n              sendAsBinary = _this.sendAsBinary,\n              responseType = _this.responseType;\n          var url = noCache ? _this.url + (_this.url.indexOf('?') >= 0 ? '&' : '?') + Date.now() : _this.url;\n          req.open(method, url, _this.async);\n\n          if (responseType) {\n            req.responseType = responseType;\n          }\n\n          if (_this.async) {\n            req.onreadystatechange = function (e) {\n              if (req.readyState === XHR_STATES.COMPLETED) {\n                if (req.status === 200) {\n                  resolve(req.responseType ? req.response : req.responseText);\n                } else {\n                  reject(new Error(\"\".concat(req.status, \": \").concat(url)));\n                }\n              }\n            };\n          }\n\n          if (sendAsBinary) {\n            req.sendAsBinary(body);\n          } else {\n            req.send(body);\n          }\n\n          if (!_this.async) {\n            if (req.status === 200) {\n              resolve(req.responseType ? req.response : req.responseText);\n            } else {\n              reject(new Error(\"\".concat(req.status, \": \").concat(url)));\n            }\n          }\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n    /* eslint-enable max-statements */\n\n  }]);\n\n  return XHR;\n}();\n\nexport function requestFile(opts) {\n  var xhr = new XHR(opts);\n  return xhr.sendAsync();\n}","map":null,"metadata":{},"sourceType":"module"}