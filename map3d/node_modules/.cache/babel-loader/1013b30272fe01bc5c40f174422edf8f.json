{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/* eslint-disable guard-for-in, complexity, no-try-catch */\n\n\nexports.loadTexture = loadTexture;\nexports.loadFiles = loadFiles;\nexports.loadImages = loadImages;\nexports.loadTextures = loadTextures;\nexports.loadProgram = loadProgram;\nexports.loadModel = loadModel;\nexports.parseModel = parseModel;\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _browserLoad = require('./browser-load');\n\nvar _webgl = require('../webgl');\n\nvar _core = require('../core');\n\nvar _geometry = require('../geometry');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction noop() {}\n\nfunction loadTexture(gl, url) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var urls = opts.urls,\n      _opts$onProgress = opts.onProgress,\n      onProgress = _opts$onProgress === undefined ? noop : _opts$onProgress;\n  (0, _assert2.default)(typeof url === 'string', 'loadTexture: url must be string');\n  return loadImages(Object.assign({\n    urls: urls,\n    onProgress: onProgress\n  }, opts)).then(function (images) {\n    return images.map(function (img, i) {\n      return new _webgl.Texture2D(gl, Object.assign({\n        id: urls[i]\n      }, opts, {\n        data: img\n      }));\n    });\n  });\n}\n/*\n * Loads (Requests) multiple files asynchronously\n */\n\n\nfunction loadFiles() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var urls = opts.urls,\n      _opts$onProgress2 = opts.onProgress,\n      onProgress = _opts$onProgress2 === undefined ? noop : _opts$onProgress2;\n  (0, _assert2.default)(urls.every(function (url) {\n    return typeof url === 'string';\n  }), 'loadImages: {urls} must be array of strings');\n  var count = 0;\n  return Promise.all(urls.map(function (url) {\n    var promise = (0, _browserLoad.loadFile)(Object.assign({\n      url: url\n    }, opts));\n    promise.then(function (file) {\n      return onProgress({\n        progress: ++count / urls.length,\n        count: count,\n        total: urls.length,\n        url: url\n      });\n    });\n    return promise;\n  }));\n}\n/*\n * Loads (requests) multiple images asynchronously\n */\n\n\nfunction loadImages() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var urls = opts.urls,\n      _opts$onProgress3 = opts.onProgress,\n      onProgress = _opts$onProgress3 === undefined ? noop : _opts$onProgress3;\n  (0, _assert2.default)(urls.every(function (url) {\n    return typeof url === 'string';\n  }), 'loadImages: {urls} must be array of strings');\n  var count = 0;\n  return Promise.all(urls.map(function (url) {\n    var promise = (0, _browserLoad.loadImage)(url, opts);\n    promise.then(function (file) {\n      return onProgress({\n        progress: ++count / urls.length,\n        count: count,\n        total: urls.length,\n        url: url\n      });\n    });\n    return promise;\n  }));\n}\n\nfunction loadTextures(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var urls = opts.urls,\n      _opts$onProgress4 = opts.onProgress,\n      onProgress = _opts$onProgress4 === undefined ? noop : _opts$onProgress4;\n  (0, _assert2.default)(urls.every(function (url) {\n    return typeof url === 'string';\n  }), 'loadTextures: {urls} must be array of strings');\n  return loadImages(Object.assign({\n    urls: urls,\n    onProgress: onProgress\n  }, opts)).then(function (images) {\n    return images.map(function (img, i) {\n      var params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;\n      params = params === undefined ? {} : params;\n      return new _webgl.Texture2D(gl, Object.assign({\n        id: urls[i]\n      }, params, {\n        data: img\n      }));\n    });\n  });\n}\n\nfunction loadProgram(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var vs = opts.vs,\n      fs = opts.fs,\n      _opts$onProgress5 = opts.onProgress,\n      onProgress = _opts$onProgress5 === undefined ? noop : _opts$onProgress5;\n  return loadFiles(Object.assign({\n    urls: [vs, fs],\n    onProgress: onProgress\n  }, opts)).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        vsText = _ref2[0],\n        fsText = _ref2[1];\n\n    return new _webgl.Program(gl, Object.assign({\n      vs: vsText,\n      fs: fsText\n    }, opts));\n  });\n} // Loads a simple JSON format\n\n\nfunction loadModel(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var url = opts.url,\n      _opts$onProgress6 = opts.onProgress,\n      onProgress = _opts$onProgress6 === undefined ? noop : _opts$onProgress6;\n  return loadFiles(Object.assign({\n    urls: [url],\n    onProgress: onProgress\n  }, opts)).then(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        file = _ref4[0];\n\n    return parseModel(gl, Object.assign({\n      file: file\n    }, opts));\n  });\n}\n\nfunction parseModel(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var file = opts.file,\n      _opts$program = opts.program,\n      program = _opts$program === undefined ? new _webgl.Program(gl) : _opts$program;\n  var json = typeof file === 'string' ? parseJSON(file) : file; // Remove any attributes so that we can create a geometry\n  // TODO - change format to put these in geometry sub object?\n\n  var attributes = {};\n  var modelOptions = {};\n\n  for (var key in json) {\n    var value = json[key];\n\n    if (Array.isArray(value)) {\n      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);\n    } else {\n      modelOptions[key] = value;\n    }\n  }\n\n  return new _core.Model(gl, Object.assign({\n    program: program,\n    geometry: new _geometry.Geometry({\n      attributes: attributes\n    })\n  }, modelOptions, opts));\n}\n\nfunction parseJSON(file) {\n  try {\n    return JSON.parse(file);\n  } catch (error) {\n    throw new Error('Failed to parse JSON: ' + error);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}