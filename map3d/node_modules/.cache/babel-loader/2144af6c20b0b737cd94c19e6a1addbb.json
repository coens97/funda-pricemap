{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport Buffer from './buffer';\nimport { clear as _clear, clearBuffer } from './clear';\nimport { withParameters } from '../webgl-context';\nimport { getFeatures } from '../webgl-context/context-features';\nimport { getTypedArrayFromGLType, getGLTypeFromTypedArray } from '../webgl-utils/typed-array-utils';\nimport { glFormatToComponents, glTypeToBytes } from '../webgl-utils/format-utils';\nimport { isWebGL2, assertWebGL2Context } from '../webgl-utils';\nimport { flipRows, scalePixels } from '../webgl-utils';\nimport { glKey } from '../webgl-utils/constants-to-keys';\nimport { log as _log } from '../utils';\nimport assert from '../utils/assert';\nvar ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nvar Framebuffer =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(Framebuffer, _Resource);\n\n  _createClass(Framebuffer, [{\n    key: \"MAX_COLOR_ATTACHMENTS\",\n    get: function get() {\n      return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n    }\n  }, {\n    key: \"MAX_DRAW_BUFFERS\",\n    get: function get() {\n      return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          colorBufferFloat = _ref.colorBufferFloat,\n          colorBufferHalfFloat = _ref.colorBufferHalfFloat;\n\n      var supported = true;\n      supported = colorBufferFloat && gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n      supported = colorBufferHalfFloat && gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n      return supported;\n    } // Create a Framebuffer wrapper for the default framebuffer (target === null)\n\n  }, {\n    key: \"getDefaultFramebuffer\",\n    value: function getDefaultFramebuffer(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      }); // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n\n      return gl.luma.defaultFramebuffer;\n    }\n  }]);\n\n  function Framebuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Framebuffer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Framebuffer).call(this, gl, opts)); // Public members\n\n    _this.width = null;\n    _this.height = null;\n    _this.attachments = {};\n    _this.readBuffer = 36064;\n    _this.drawBuffers = [36064];\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Framebuffer, [{\n    key: \"initialize\",\n    value: function initialize(_ref2) {\n      var _ref2$width = _ref2.width,\n          width = _ref2$width === void 0 ? 1 : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === void 0 ? 1 : _ref2$height,\n          _ref2$attachments = _ref2.attachments,\n          attachments = _ref2$attachments === void 0 ? null : _ref2$attachments,\n          _ref2$color = _ref2.color,\n          color = _ref2$color === void 0 ? true : _ref2$color,\n          _ref2$depth = _ref2.depth,\n          depth = _ref2$depth === void 0 ? true : _ref2$depth,\n          _ref2$stencil = _ref2.stencil,\n          stencil = _ref2$stencil === void 0 ? false : _ref2$stencil,\n          _ref2$check = _ref2.check,\n          check = _ref2$check === void 0 ? true : _ref2$check,\n          readBuffer = _ref2.readBuffer,\n          drawBuffers = _ref2.drawBuffers;\n      assert(width >= 0 && height >= 0, 'Width and height need to be integers'); // Store actual width and height for diffing\n\n      this.width = width;\n      this.height = height; // Resize any provided attachments - note that resize only resizes if needed\n      // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n\n      if (attachments) {\n        for (var attachment in attachments) {\n          var target = attachments[attachment];\n          var object = Array.isArray(target) ? target[0] : target;\n          object.resize({\n            width: width,\n            height: height\n          });\n        }\n      } else {\n        // Create any requested default attachments\n        attachments = this._createDefaultAttachments({\n          color: color,\n          depth: depth,\n          stencil: stencil,\n          width: width,\n          height: height\n        });\n      }\n\n      this.update({\n        clearAttachments: true,\n        attachments: attachments,\n        readBuffer: readBuffer,\n        drawBuffers: drawBuffers\n      }); // Checks that framebuffer was properly set up, if not, throws an explanatory error\n\n      if (attachments && check) {\n        this.checkStatus();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref3) {\n      var _ref3$attachments = _ref3.attachments,\n          attachments = _ref3$attachments === void 0 ? {} : _ref3$attachments,\n          readBuffer = _ref3.readBuffer,\n          drawBuffers = _ref3.drawBuffers,\n          _ref3$clearAttachment = _ref3.clearAttachments,\n          clearAttachments = _ref3$clearAttachment === void 0 ? false : _ref3$clearAttachment;\n      this.attach(attachments, {\n        clearAttachments: clearAttachments\n      });\n      var gl = this.gl; // Multiple render target support, set read buffer and draw buffers\n\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n\n      if (readBuffer) {\n        this._setReadBuffer(readBuffer);\n      }\n\n      if (drawBuffers) {\n        this._setDrawBuffers(drawBuffers);\n      }\n\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    } // Attachment resize is expected to be a noop if size is same\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          width = _ref4.width,\n          height = _ref4.height; // for default framebuffer, just update the stored size\n\n\n      if (this.handle === null) {\n        assert(width === undefined && height === undefined);\n        this.width = this.gl.drawingBufferWidth;\n        this.height = this.gl.drawingBufferHeight;\n        return this;\n      }\n\n      if (width === undefined) {\n        width = this.gl.drawingBufferWidth;\n      }\n\n      if (height === undefined) {\n        height = this.gl.drawingBufferHeight;\n      }\n\n      if (width !== this.width && height !== this.height) {\n        _log.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height));\n      }\n\n      for (var attachmentPoint in this.attachments) {\n        this.attachments[attachmentPoint].resize({\n          width: width,\n          height: height\n        });\n      }\n\n      this.width = width;\n      this.height = height;\n      return this;\n    } // Attach from a map of attachments\n\n  }, {\n    key: \"attach\",\n    value: function attach(attachments) {\n      var _this2 = this;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$clearAttachment = _ref5.clearAttachments,\n          clearAttachments = _ref5$clearAttachment === void 0 ? false : _ref5$clearAttachment;\n\n      var newAttachments = {}; // Any current attachments need to be removed, add null values to map\n\n      if (clearAttachments) {\n        Object.keys(this.attachments).forEach(function (key) {\n          newAttachments[key] = null;\n        });\n      } // Overlay the new attachments\n\n\n      Object.assign(newAttachments, attachments);\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle); // Walk the attachments\n\n      for (var key in newAttachments) {\n        // Ensure key is not undefined\n        assert(key !== undefined, 'Misspelled framebuffer binding point?');\n        var attachment = Number(key);\n        var descriptor = newAttachments[attachment];\n        var object = descriptor;\n\n        if (!object) {\n          this._unattach({\n            attachment: attachment\n          });\n        } else if (object instanceof Renderbuffer) {\n          this._attachRenderbuffer({\n            attachment: attachment,\n            renderbuffer: object\n          });\n        } else if (Array.isArray(descriptor)) {\n          var _descriptor = _slicedToArray(descriptor, 3),\n              texture = _descriptor[0],\n              _descriptor$ = _descriptor[1],\n              layer = _descriptor$ === void 0 ? 0 : _descriptor$,\n              _descriptor$2 = _descriptor[2],\n              level = _descriptor$2 === void 0 ? 0 : _descriptor$2;\n\n          object = texture;\n\n          this._attachTexture({\n            attachment: attachment,\n            texture: texture,\n            layer: layer,\n            level: level\n          });\n        } else {\n          this._attachTexture({\n            attachment: attachment,\n            texture: object,\n            layer: 0,\n            level: 0\n          });\n        } // Resize objects\n\n\n        if (object) {\n          object.resize({\n            width: this.width,\n            height: this.height\n          });\n        }\n      }\n\n      this.gl.bindFramebuffer(36160, prevHandle || null); // Assign to attachments and remove any nulls to get a clean attachment map\n\n      Object.assign(this.attachments, attachments);\n      Object.keys(this.attachments).filter(function (key) {\n        return !_this2.attachments[key];\n      }).forEach(function (key) {\n        delete _this2.attachments[key];\n      });\n    }\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus() {\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      var status = gl.checkFramebufferStatus(36160);\n      gl.bindFramebuffer(36160, prevHandle || null);\n\n      if (status !== 36053) {\n        throw new Error(_getFrameBufferStatus(status));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          color = _ref6.color,\n          depth = _ref6.depth,\n          stencil = _ref6.stencil,\n          _ref6$drawBuffers = _ref6.drawBuffers,\n          drawBuffers = _ref6$drawBuffers === void 0 ? [] : _ref6$drawBuffers; // Bind framebuffer and delegate to global clear functions\n\n\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      if (color || depth || stencil) {\n        _clear(this.gl, {\n          color: color,\n          depth: depth,\n          stencil: stencil\n        });\n      }\n\n      drawBuffers.forEach(function (value, drawBuffer) {\n        clearBuffer({\n          drawBuffer: drawBuffer,\n          value: value\n        });\n      });\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    } // NOTE: Slow requires roundtrip to GPU\n    // App can provide pixelArray or have it auto allocated by this method\n    // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n    //  newly allocated by this method unless provided by app.\n\n  }, {\n    key: \"readPixels\",\n    value: function readPixels() {\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref7$x = _ref7.x,\n          x = _ref7$x === void 0 ? 0 : _ref7$x,\n          _ref7$y = _ref7.y,\n          y = _ref7$y === void 0 ? 0 : _ref7$y,\n          _ref7$width = _ref7.width,\n          width = _ref7$width === void 0 ? this.width : _ref7$width,\n          _ref7$height = _ref7.height,\n          height = _ref7$height === void 0 ? this.height : _ref7$height,\n          _ref7$format = _ref7.format,\n          format = _ref7$format === void 0 ? 6408 : _ref7$format,\n          type = _ref7.type,\n          _ref7$pixelArray = _ref7.pixelArray,\n          pixelArray = _ref7$pixelArray === void 0 ? null : _ref7$pixelArray,\n          _ref7$attachment = _ref7.attachment,\n          attachment = _ref7$attachment === void 0 ? 36064 : _ref7$attachment;\n\n      var gl = this.gl; // TODO - Set and unset gl.readBuffer\n\n      if (attachment === 36064 && this.handle === null) {\n        attachment = 1028;\n      }\n\n      assert(this.attachments[attachment]); // Deduce the type from color attachment if not provided.\n\n      type = type || this.attachments[attachment].type; // Deduce type and allocated pixelArray if needed\n\n      if (!pixelArray) {\n        // Allocate pixel array if not already available, using supplied type\n        type = type || 5121;\n        var ArrayType = getTypedArrayFromGLType(type, {\n          clamped: false\n        });\n        var components = glFormatToComponents(format); // TODO - check for composite type (components = 1).\n\n        pixelArray = pixelArray || new ArrayType(width * height * components);\n      } // Pixel array available, if necessary, deduce type from it.\n\n\n      type = type || getGLTypeFromTypedArray(pixelArray);\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n      this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      return pixelArray;\n    } // Reads data into provided buffer object asynchronously\n    // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n\n  }, {\n    key: \"readPixelsToBuffer\",\n    value: function readPixelsToBuffer(_ref8) {\n      var _ref8$x = _ref8.x,\n          x = _ref8$x === void 0 ? 0 : _ref8$x,\n          _ref8$y = _ref8.y,\n          y = _ref8$y === void 0 ? 0 : _ref8$y,\n          _ref8$width = _ref8.width,\n          width = _ref8$width === void 0 ? this.width : _ref8$width,\n          _ref8$height = _ref8.height,\n          height = _ref8$height === void 0 ? this.height : _ref8$height,\n          _ref8$format = _ref8.format,\n          format = _ref8$format === void 0 ? 6408 : _ref8$format,\n          type = _ref8.type,\n          _ref8$buffer = _ref8.buffer,\n          buffer = _ref8$buffer === void 0 ? null : _ref8$buffer,\n          _ref8$byteOffset = _ref8.byteOffset,\n          byteOffset = _ref8$byteOffset === void 0 ? 0 : _ref8$byteOffset;\n      var gl = this.gl; // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n\n      assertWebGL2Context(gl); // deduce type if not available.\n\n      type = type || (buffer ? buffer.type : 5121);\n\n      if (!buffer) {\n        // Create new buffer with enough size\n        var components = glFormatToComponents(format);\n        var byteCount = glTypeToBytes(type);\n        var bytes = byteOffset + width * height * components * byteCount;\n        buffer = new Buffer(gl, {\n          bytes: bytes,\n          type: type,\n          size: components\n        });\n      }\n\n      buffer.bind({\n        target: 35051\n      });\n      withParameters(gl, {\n        framebuffer: this\n      }, function () {\n        gl.readPixels(x, y, width, height, format, type, byteOffset);\n      });\n      buffer.unbind({\n        target: 35051\n      });\n      return buffer;\n    } // Reads pixels as a dataUrl\n\n  }, {\n    key: \"copyToDataUrl\",\n    value: function copyToDataUrl() {\n      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref9$attachment = _ref9.attachment,\n          attachment = _ref9$attachment === void 0 ? 36064 : _ref9$attachment,\n          _ref9$maxHeight = _ref9.maxHeight,\n          maxHeight = _ref9$maxHeight === void 0 ? Number.MAX_SAFE_INTEGER : _ref9$maxHeight;\n\n      var data = this.readPixels({\n        attachment: attachment\n      }); // Scale down\n\n      var width = this.width,\n          height = this.height;\n\n      while (height > maxHeight) {\n        var _scalePixels = scalePixels({\n          data: data,\n          width: width,\n          height: height\n        });\n\n        data = _scalePixels.data;\n        width = _scalePixels.width;\n        height = _scalePixels.height;\n      } // Flip to top down coordinate system\n\n\n      flipRows({\n        data: data,\n        width: width,\n        height: height\n      });\n      /* global document */\n\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var context = canvas.getContext('2d'); // Copy the pixels to a 2D canvas\n\n      var imageData = context.createImageData(width, height);\n      imageData.data.set(data);\n      context.putImageData(imageData, 0, 0);\n      return canvas.toDataURL();\n    } // Reads pixels into an HTML Image\n\n  }, {\n    key: \"copyToImage\",\n    value: function copyToImage() {\n      var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref10$image = _ref10.image,\n          image = _ref10$image === void 0 ? null : _ref10$image,\n          _ref10$attachment = _ref10.attachment,\n          attachment = _ref10$attachment === void 0 ? 36064 : _ref10$attachment,\n          _ref10$maxHeight = _ref10.maxHeight,\n          maxHeight = _ref10$maxHeight === void 0 ? Number.MAX_SAFE_INTEGER : _ref10$maxHeight;\n      /* global Image */\n\n\n      var dataUrl = this.readDataUrl({\n        attachment: attachment\n      });\n      image = image || new Image();\n      image.src = dataUrl;\n      return image;\n    } // copyToFramebuffer({width, height}) {\n    //   const scaleX = width / this.width;\n    //   const scaleY = height / this.height;\n    //   const scale = Math.min(scaleX, scaleY);\n    //   width = width * scale;\n    //   height = height * scale;\n    //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n    //   this.blit();\n    // }\n    // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n\n  }, {\n    key: \"copyToTexture\",\n    value: function copyToTexture(_ref11) {\n      var texture = _ref11.texture,\n          target = _ref11.target,\n          _ref11$xoffset = _ref11.xoffset,\n          xoffset = _ref11$xoffset === void 0 ? 0 : _ref11$xoffset,\n          _ref11$yoffset = _ref11.yoffset,\n          yoffset = _ref11$yoffset === void 0 ? 0 : _ref11$yoffset,\n          _ref11$zoffset = _ref11.zoffset,\n          zoffset = _ref11$zoffset === void 0 ? 0 : _ref11$zoffset,\n          _ref11$mipmapLevel = _ref11.mipmapLevel,\n          mipmapLevel = _ref11$mipmapLevel === void 0 ? 0 : _ref11$mipmapLevel,\n          _ref11$attachment = _ref11.attachment,\n          attachment = _ref11$attachment === void 0 ? 36064 : _ref11$attachment,\n          _ref11$x = _ref11.x,\n          x = _ref11$x === void 0 ? 0 : _ref11$x,\n          _ref11$y = _ref11.y,\n          y = _ref11$y === void 0 ? 0 : _ref11$y,\n          width = _ref11.width,\n          height = _ref11.height;\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      var prevBuffer = gl.readBuffer(attachment);\n      width = Number.isFinite(width) ? width : texture.width;\n      height = Number.isFinite(height) ? height : texture.height; // target\n\n      switch (texture.target) {\n        case 3553:\n        case 34067:\n          gl.copyTexSubImage2D(target || texture.target, mipmapLevel, xoffset, yoffset, x, y, width, height);\n          break;\n\n        case 35866:\n        case 32879:\n          gl.copyTexSubImage3D(target || texture.target, mipmapLevel, xoffset, yoffset, zoffset, x, y, width, height);\n          break;\n\n        default:\n      }\n\n      gl.readBuffer(prevBuffer);\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return texture;\n    } // WEBGL2 INTERFACE\n    // Copies a rectangle of pixels between framebuffers\n    // eslint-disable-next-line complexity\n\n  }, {\n    key: \"blit\",\n    value: function blit(_ref12) {\n      var srcFramebuffer = _ref12.srcFramebuffer,\n          _ref12$attachment = _ref12.attachment,\n          attachment = _ref12$attachment === void 0 ? 36064 : _ref12$attachment,\n          _ref12$srcX = _ref12.srcX0,\n          srcX0 = _ref12$srcX === void 0 ? 0 : _ref12$srcX,\n          _ref12$srcY = _ref12.srcY0,\n          srcY0 = _ref12$srcY === void 0 ? 0 : _ref12$srcY,\n          srcX1 = _ref12.srcX1,\n          srcY1 = _ref12.srcY1,\n          _ref12$dstX = _ref12.dstX0,\n          dstX0 = _ref12$dstX === void 0 ? 0 : _ref12$dstX,\n          _ref12$dstY = _ref12.dstY0,\n          dstY0 = _ref12$dstY === void 0 ? 0 : _ref12$dstY,\n          dstX1 = _ref12.dstX1,\n          dstY1 = _ref12.dstY1,\n          _ref12$color = _ref12.color,\n          color = _ref12$color === void 0 ? true : _ref12$color,\n          _ref12$depth = _ref12.depth,\n          depth = _ref12$depth === void 0 ? false : _ref12$depth,\n          _ref12$stencil = _ref12.stencil,\n          stencil = _ref12$stencil === void 0 ? false : _ref12$stencil,\n          _ref12$mask = _ref12.mask,\n          mask = _ref12$mask === void 0 ? 0 : _ref12$mask,\n          _ref12$filter = _ref12.filter,\n          filter = _ref12$filter === void 0 ? 9728 : _ref12$filter;\n      var gl = this.gl;\n      assertWebGL2Context(gl);\n\n      if (!srcFramebuffer.handle && attachment === 36064) {\n        attachment = 1028;\n      }\n\n      if (color) {\n        mask |= 16384;\n      }\n\n      if (depth) {\n        mask |= 256;\n      }\n\n      if (stencil) {\n        mask |= 1024;\n      }\n\n      assert(mask);\n      srcX1 = srcX1 === undefined ? srcFramebuffer.width : srcX1;\n      srcY1 = srcY1 === undefined ? srcFramebuffer.height : srcY1;\n      dstX1 = dstX1 === undefined ? this.width : dstX1;\n      dstY1 = dstY1 === undefined ? this.height : dstY1;\n      var prevDrawHandle = gl.bindFramebuffer(36009, this.handle);\n      var prevReadHandle = gl.bindFramebuffer(36008, srcFramebuffer.handle);\n      gl.readBuffer(attachment);\n      gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n      gl.readBuffer(this.readBuffer);\n      gl.bindFramebuffer(36008, prevReadHandle || null);\n      gl.bindFramebuffer(36009, prevDrawHandle || null);\n      return this;\n    } // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(_ref13) {\n      var _ref13$attachments = _ref13.attachments,\n          attachments = _ref13$attachments === void 0 ? [] : _ref13$attachments,\n          _ref13$x = _ref13.x,\n          x = _ref13$x === void 0 ? 0 : _ref13$x,\n          _ref13$y = _ref13.y,\n          y = _ref13$y === void 0 ? 0 : _ref13$y,\n          width = _ref13.width,\n          height = _ref13.height;\n      var gl = this.gl;\n      assertWebGL2Context(gl);\n      var prevHandle = gl.bindFramebuffer(36008, this.handle);\n      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n\n      if (invalidateAll) {\n        gl.invalidateFramebuffer(36008, attachments);\n      } else {\n        gl.invalidateFramebuffer(36008, attachments, x, y, width, height);\n      }\n\n      gl.bindFramebuffer(36008, prevHandle);\n      return this;\n    } // Return the value for `pname` of the specified attachment.\n    // The type returned is the type of the requested pname\n\n  }, {\n    key: \"getAttachmentParameter\",\n    value: function getAttachmentParameter(attachment, pname, keys) {\n      var value = this._getAttachmentParameterFallback(pname);\n\n      if (value === null) {\n        this.gl.bindFramebuffer(36160, this.handle);\n        value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n        this.gl.bindFramebuffer(36160, null);\n      }\n\n      if (keys && value > 1000) {\n        value = glKey(this.gl, value);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"getAttachmentParameters\",\n    value: function getAttachmentParameters() {\n      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n      var keys = arguments.length > 1 ? arguments[1] : undefined;\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n      var values = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = parameters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pname = _step.value;\n          var key = keys ? glKey(this.gl, pname) : pname;\n          values[key] = this.getAttachmentParameter(attachment, pname, keys);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var attachments = Object.keys(this.attachments); // if (this === this.gl.luma.defaultFramebuffer) {\n      //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n      // }\n\n      var parameters = {};\n\n      for (var _i = 0; _i < attachments.length; _i++) {\n        var attachmentName = attachments[_i];\n        var attachment = Number(attachmentName);\n        var key = keys ? glKey(this.gl, attachment) : attachment;\n        parameters[key] = this.getAttachmentParameters(attachment, keys);\n      }\n\n      return parameters;\n    } // DEBUG\n    // Note: Will only work when called in an event handler\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      /* global window */\n      if (typeof window !== 'undefined') {\n        window.open(this.copyToDataUrl(), 'luma-debug-texture');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      var priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (priority > _log.priority || typeof window === 'undefined') {\n        return this;\n      }\n\n      message = message || \"Framebuffer \".concat(this.id);\n      var image = this.copyToDataUrl({\n        maxHeight: 100\n      });\n\n      _log.image({\n        priority: priority,\n        message: message,\n        image: image\n      }, message)();\n\n      return this;\n    } // WEBGL INTERFACE\n\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref14$target = _ref14.target,\n          target = _ref14$target === void 0 ? 36160 : _ref14$target;\n\n      this.gl.bindFramebuffer(target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref15$target = _ref15.target,\n          target = _ref15$target === void 0 ? 36160 : _ref15$target;\n\n      this.gl.bindFramebuffer(target, null);\n      return this;\n    } // PRIVATE METHODS\n\n  }, {\n    key: \"_createDefaultAttachments\",\n    value: function _createDefaultAttachments(_ref16) {\n      var color = _ref16.color,\n          depth = _ref16.depth,\n          stencil = _ref16.stencil,\n          width = _ref16.width,\n          height = _ref16.height;\n      var defaultAttachments = null; // Add a color buffer if requested and not supplied\n\n      if (color) {\n        var _parameters;\n\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36064] = new Texture2D(this.gl, {\n          id: \"\".concat(this.id, \"-color0\"),\n          pixels: null,\n          // reserves texture memory, but texels are undefined\n          format: 6408,\n          type: 5121,\n          width: width,\n          height: height,\n          // Note: Mipmapping can be disabled by texture resource when we resize the texture\n          // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n          // behavior we always disable mipmaps.\n          mipmaps: false,\n          // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n          // Set WRAP modes that support NPOT textures too.\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10241, 9728), _defineProperty(_parameters, 10240, 9728), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n        });\n      }\n\n      if (depth && stencil) {\n        // TODO - handle separate stencil\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[33306] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth-stencil\"),\n          format: 35056,\n          width: width,\n          height: 111\n        }); // TODO - optional texture\n        // new Texture2D(this.gl, {\n        //   id: `${this.id}-depth-stencil`,\n        //   format: GL.DEPTH24_STENCIL8,\n        //   dataFormat: GL.DEPTH_STENCIL,\n        //   type: GL.UNSIGNED_INT_24_8,\n        //   width,\n        //   height,\n        //   mipmaps: false\n        // });\n      } else if (depth) {\n        // Add a depth buffer if requested and not supplied\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36096] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth\"),\n          format: 33189,\n          width: width,\n          height: height\n        });\n      } else if (stencil) {\n        // TODO - handle separate stencil\n        assert(false);\n      }\n\n      return defaultAttachments;\n    }\n  }, {\n    key: \"_unattach\",\n    value: function _unattach(_ref17) {\n      var attachment = _ref17.attachment;\n      this.gl.bindRenderbuffer(36161, this.handle);\n      this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n      delete this.attachments[attachment];\n    }\n  }, {\n    key: \"_attachRenderbuffer\",\n    value: function _attachRenderbuffer(_ref18) {\n      var _ref18$attachment = _ref18.attachment,\n          attachment = _ref18$attachment === void 0 ? 36064 : _ref18$attachment,\n          renderbuffer = _ref18.renderbuffer;\n      var gl = this.gl; // TODO - is the bind needed?\n      // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n\n      gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle); // TODO - is the unbind needed?\n      // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n      this.attachments[attachment] = renderbuffer;\n    } // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n    // level = 0 - mipmapLevel (must be 0 in WebGL1)\n\n  }, {\n    key: \"_attachTexture\",\n    value: function _attachTexture(_ref19) {\n      var _ref19$attachment = _ref19.attachment,\n          attachment = _ref19$attachment === void 0 ? 36064 : _ref19$attachment,\n          texture = _ref19.texture,\n          layer = _ref19.layer,\n          level = _ref19.level;\n      var gl = this.gl;\n      gl.bindTexture(texture.target, texture.handle);\n\n      switch (texture.target) {\n        case 35866:\n        case 32879:\n          gl.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n          break;\n\n        case 34067:\n          // layer must be a cubemap face (or if index, converted to cube map face)\n          var face = mapIndexToCubeMapFace(layer);\n          gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n          break;\n\n        case 3553:\n          gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n          break;\n\n        default:\n          assert(false, 'Illegal texture type');\n      }\n\n      gl.bindTexture(texture.target, null);\n      this.attachments[attachment] = texture;\n    } // Expects framebuffer to be bound\n\n  }, {\n    key: \"_setReadBuffer\",\n    value: function _setReadBuffer(gl, readBuffer) {\n      if (isWebGL2(gl)) {\n        gl.readBuffer(readBuffer);\n      } else {\n        // Setting to color attachment 0 is a noop, so allow it in WebGL1\n        assert(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n      }\n\n      this.readBuffer = readBuffer;\n    } // Expects framebuffer to be bound\n\n  }, {\n    key: \"_setDrawBuffers\",\n    value: function _setDrawBuffers(gl, drawBuffers) {\n      if (isWebGL2(gl)) {\n        gl.drawBuffers(drawBuffers);\n      } else {\n        var ext = gl.getExtension('WEBGL.draw_buffers');\n\n        if (ext) {\n          ext.drawBuffersWEBGL(drawBuffers);\n        } else {\n          // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n          assert(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n        }\n      }\n\n      this.drawBuffers = drawBuffers;\n    } // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n    // null means OK to query\n    // TODO - move to webgl1 polyfills\n\n    /* eslint-disable complexity */\n\n  }, {\n    key: \"_getAttachmentParameterFallback\",\n    value: function _getAttachmentParameterFallback(pname) {\n      var caps = getFeatures(this.gl);\n\n      switch (pname) {\n        case 36052:\n          // GLint\n          return !caps.webgl2 ? 0 : null;\n\n        case 33298: // GLint\n\n        case 33299: // GLint\n\n        case 33300: // GLint\n\n        case 33301: // GLint\n\n        case 33302: // GLint\n\n        case 33303:\n          // GLint\n          return !caps.webgl2 ? 8 : null;\n\n        case 33297:\n          // GLenum\n          return !caps.webgl2 ? 5125 : null;\n\n        case 33296:\n          return !caps.webgl2 && !caps.EXT_sRGB ? 9729 : null;\n\n        default:\n          return null;\n      }\n    }\n    /* eslint-enable complexity */\n    // RESOURCE METHODS\n\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createFramebuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteFramebuffer(this.handle);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      return this.gl.bindFramebuffer(36160, handle);\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.attachments[36096] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"stencil\",\n    get: function get() {\n      return this.attachments[36128] || this.attachments[33306] || null;\n    }\n  }]);\n\n  return Framebuffer;\n}(Resource); // PUBLIC METHODS\n// Map an index to a cube map face constant\n\n\nexport { Framebuffer as default };\n\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < 34069 ? layer + 34069 : layer;\n} // Helper METHODS\n// Get a string describing the framebuffer error if installed\n\n\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  var STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\n\nexport var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, // WebGLRenderbuffer or WebGLTexture\n36048, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n// GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n// GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n// EXT_sRGB or WebGL2\n33296, // GL.LINEAR, GL.SRBG\n// WebGL2\n// GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n33298, // GLint\n33299, // GLint\n33300, // GLint\n33301, // GLint\n33302, // GLint\n33303 // GLint\n// GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n// GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;","map":null,"metadata":{},"sourceType":"module"}