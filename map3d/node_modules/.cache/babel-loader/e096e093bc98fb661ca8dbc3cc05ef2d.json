{"ast":null,"code":"import _objectSpread from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/src/index.js\";\n\n/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\nimport { json as requestJson } from 'd3-request'; // Set your mapbox token here\n\nvar MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n// Source data GeoJSON\n\nvar DATA_URL = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/geojson/vancouver-blocks.json'; // eslint-disable-line\n\nvar colorScale = function colorScale(r) {\n  return [r * 255, 140, 200 * (1 - r)];\n};\n\nvar Root =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Root, _Component);\n\n  function Root(props) {\n    var _this;\n\n    _classCallCheck(this, Root);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Root).call(this, props));\n    _this.state = {\n      viewport: _objectSpread({}, DeckGLOverlay.defaultViewport, {\n        width: 500,\n        height: 500\n      }),\n      data: null\n    };\n    requestJson(DATA_URL, function (error, response) {\n      if (!error) {\n        _this.setState({\n          data: response\n        });\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Root, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('resize', this._resize.bind(this));\n\n      this._resize();\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize() {\n      this._onViewportChange({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }\n  }, {\n    key: \"_onViewportChange\",\n    value: function _onViewportChange(viewport) {\n      this.setState({\n        viewport: _objectSpread({}, this.state.viewport, viewport)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          viewport = _this$state.viewport,\n          data = _this$state.data;\n      return React.createElement(MapGL, Object.assign({}, viewport, {\n        onViewportChange: this._onViewportChange.bind(this),\n        mapboxApiAccessToken: MAPBOX_TOKEN,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(DeckGLOverlay, {\n        viewport: viewport,\n        data: data,\n        colorScale: colorScale,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Root;\n}(Component);\n\nrender(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/src/index.js"],"names":["React","Component","render","MapGL","DeckGLOverlay","json","requestJson","MAPBOX_TOKEN","DATA_URL","colorScale","r","Root","props","state","viewport","defaultViewport","width","height","data","error","response","setState","window","addEventListener","_resize","bind","_onViewportChange","innerWidth","innerHeight","document","getElementById"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA,SAASC,IAAI,IAAIC,WAAjB,QAAoC,YAApC,C,CAEA;;AACA,IAAMC,YAAY,GAAG,2FAArB,C,CAAkH;AAElH;;AACA,IAAMC,QAAQ,GAAG,0GAAjB,C,CAA6H;;AAE7H,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,CAAC;AAAA,SAAI,CAACA,CAAC,GAAG,GAAL,EAAU,GAAV,EAAe,OAAO,IAAIA,CAAX,CAAf,CAAJ;AAAA,CAApB;;IAEMC,I;;;;;AAEJ,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,oBACHV,aAAa,CAACW,eADX;AAENC,QAAAA,KAAK,EAAE,GAFD;AAGNC,QAAAA,MAAM,EAAE;AAHF,QADG;AAMXC,MAAAA,IAAI,EAAE;AANK,KAAb;AASAZ,IAAAA,WAAW,CAACE,QAAD,EAAW,UAACW,KAAD,EAAQC,QAAR,EAAqB;AACzC,UAAI,CAACD,KAAL,EAAY;AACV,cAAKE,QAAL,CAAc;AAAEH,UAAAA,IAAI,EAAEE;AAAR,SAAd;AACD;AACF,KAJU,CAAX;AAXiB;AAgBlB;;;;wCAEmB;AAClBE,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAlC;;AACA,WAAKD,OAAL;AACD;;;8BAES;AACR,WAAKE,iBAAL,CAAuB;AACrBV,QAAAA,KAAK,EAAEM,MAAM,CAACK,UADO;AAErBV,QAAAA,MAAM,EAAEK,MAAM,CAACM;AAFM,OAAvB;AAID;;;sCAEiBd,Q,EAAU;AAC1B,WAAKO,QAAL,CAAc;AACZP,QAAAA,QAAQ,oBAAO,KAAKD,KAAL,CAAWC,QAAlB,EAA+BA,QAA/B;AADI,OAAd;AAGD;;;6BAEQ;AAAA,wBACoB,KAAKD,KADzB;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWI,IADX,eACWA,IADX;AAGP,aACE,oBAAC,KAAD,oBACMJ,QADN;AAEE,QAAA,gBAAgB,EAAE,KAAKY,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAFpB;AAGE,QAAA,oBAAoB,EAAElB,YAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIE,oBAAC,aAAD;AAAe,QAAA,QAAQ,EAAEO,QAAzB;AACE,QAAA,IAAI,EAAEI,IADR;AAEE,QAAA,UAAU,EAAET,UAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAUD;;;;EAnDgBR,S;;AAsDnBC,MAAM,CAAC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAAW2B,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAX,CAAN","sourcesContent":["/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\n\nimport { json as requestJson } from 'd3-request';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/geojson/vancouver-blocks.json'; // eslint-disable-line\n\nconst colorScale = r => [r * 255, 140, 200 * (1 - r)];\n\nclass Root extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        ...DeckGLOverlay.defaultViewport,\n        width: 500,\n        height: 500\n      },\n      data: null\n    };\n\n    requestJson(DATA_URL, (error, response) => {\n      if (!error) {\n        this.setState({ data: response });\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize.bind(this));\n    this._resize();\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  render() {\n    const { viewport, data } = this.state;\n\n    return (\n      <MapGL\n        {...viewport}\n        onViewportChange={this._onViewportChange.bind(this)}\n        mapboxApiAccessToken={MAPBOX_TOKEN}>\n        <DeckGLOverlay viewport={viewport}\n          data={data}\n          colorScale={colorScale} />\n      </MapGL>\n    );\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}