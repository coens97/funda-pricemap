{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Vector3, Matrix4, _SphericalCoordinates as SphericalCoordinates } from 'math.gl';\n\nfunction getDirectionFromBearingAndPitch(_ref) {\n  var bearing = _ref.bearing,\n      pitch = _ref.pitch;\n  var spherical = new SphericalCoordinates({\n    bearing: bearing,\n    pitch: pitch\n  });\n  return spherical.toVector3().normalize();\n}\n\nvar ThirdPersonView =\n/*#__PURE__*/\nfunction (_View) {\n  _inherits(ThirdPersonView, _View);\n\n  function ThirdPersonView() {\n    _classCallCheck(this, ThirdPersonView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThirdPersonView).apply(this, arguments));\n  }\n\n  _createClass(ThirdPersonView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(props) {\n      var _props$viewState = props.viewState,\n          bearing = _props$viewState.bearing,\n          pitch = _props$viewState.pitch,\n          position = _props$viewState.position,\n          up = _props$viewState.up,\n          zoom = _props$viewState.zoom;\n      var direction = getDirectionFromBearingAndPitch({\n        bearing: bearing,\n        pitch: pitch\n      });\n      var distance = zoom * 50; // TODO somehow need to flip z to make it work\n      // check if the position offset is done in the base viewport\n\n      var eye = direction.scale(-distance).multiply(new Vector3(1, 1, -1));\n      var viewMatrix = new Matrix4().multiplyRight(new Matrix4().lookAt({\n        eye: eye,\n        center: position,\n        up: up\n      }));\n      return new Viewport(Object.assign({}, props, {\n        id: this.id,\n        zoom: null,\n        // triggers meter level zoom\n        viewMatrix: viewMatrix\n      }));\n    }\n  }]);\n\n  return ThirdPersonView;\n}(View);\n\nexport { ThirdPersonView as default };\nThirdPersonView.displayName = 'ThirdPersonView';","map":null,"metadata":{},"sourceType":"module"}