{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { Layer } from '../../../lib';\nimport { GL, Model, Geometry, Texture2D, loadTextures } from 'luma.gl';\nimport { fp64ify, enable64bitSupport } from '../../../lib/utils/fp64';\nimport { COORDINATE_SYSTEM } from '../../../lib';\nimport vs from './icon-layer-vertex.glsl';\nimport vs64 from './icon-layer-vertex-64.glsl';\nimport fs from './icon-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar DEFAULT_TEXTURE_MIN_FILTER = GL.LINEAR_MIPMAP_LINEAR; // GL.LINEAR is the default value but explicitly set it here\n\nvar DEFAULT_TEXTURE_MAG_FILTER = GL.LINEAR;\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\n\nvar defaultProps = {\n  iconAtlas: null,\n  iconMapping: {},\n  sizeScale: 1,\n  fp64: false,\n  getPosition: function getPosition(x) {\n    return x.position;\n  },\n  getIcon: function getIcon(x) {\n    return x.icon;\n  },\n  getColor: function getColor(x) {\n    return x.color || DEFAULT_COLOR;\n  },\n  getSize: function getSize(x) {\n    return x.size || 1;\n  },\n  getAngle: function getAngle(x) {\n    return x.angle || 0;\n  }\n};\n\nvar IconLayer = function (_Layer) {\n  _inherits(IconLayer, _Layer);\n\n  function IconLayer() {\n    _classCallCheck(this, IconLayer);\n\n    return _possibleConstructorReturn(this, (IconLayer.__proto__ || Object.getPrototypeOf(IconLayer)).apply(this, arguments));\n  }\n\n  _createClass(IconLayer, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return enable64bitSupport(this.props) ? {\n        vs: vs64,\n        fs: fs,\n        modules: ['project64']\n      } : {\n        vs: vs,\n        fs: fs\n      }; // 'project' module added by default.\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var attributeManager = this.state.attributeManager;\n      var gl = this.context.gl;\n      /* eslint-disable max-len */\n\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          accessor: 'getPosition',\n          update: this.calculateInstancePositions\n        },\n        instanceSizes: {\n          size: 1,\n          accessor: 'getSize',\n          update: this.calculateInstanceSizes\n        },\n        instanceOffsets: {\n          size: 2,\n          accessor: 'getIcon',\n          update: this.calculateInstanceOffsets\n        },\n        instanceIconFrames: {\n          size: 4,\n          accessor: 'getIcon',\n          update: this.calculateInstanceIconFrames\n        },\n        instanceColorModes: {\n          size: 1,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getIcon',\n          update: this.calculateInstanceColorMode\n        },\n        instanceColors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getColor',\n          update: this.calculateInstanceColors\n        },\n        instanceAngles: {\n          size: 1,\n          accessor: 'getAngle',\n          update: this.calculateInstanceAngles\n        }\n      });\n      /* eslint-enable max-len */\n\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: 'updateAttribute',\n    value: function updateAttribute(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var attributeManager = this.state.attributeManager;\n        attributeManager.invalidateAll();\n\n        if (props.fp64 && props.projectionMode === COORDINATE_SYSTEM.LNGLAT) {\n          attributeManager.addInstanced({\n            instancePositions64xyLow: {\n              size: 2,\n              accessor: 'getPosition',\n              update: this.calculateInstancePositions64xyLow\n            }\n          });\n        } else {\n          attributeManager.remove(['instancePositions64xyLow']);\n        }\n      }\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref2) {\n      var _this2 = this;\n\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n\n      _get(IconLayer.prototype.__proto__ || Object.getPrototypeOf(IconLayer.prototype), 'updateState', this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var iconAtlas = props.iconAtlas,\n          iconMapping = props.iconMapping;\n\n      if (oldProps.iconMapping !== iconMapping) {\n        var attributeManager = this.state.attributeManager;\n        attributeManager.invalidate('instanceOffsets');\n        attributeManager.invalidate('instanceIconFrames');\n        attributeManager.invalidate('instanceColorModes');\n      }\n\n      if (oldProps.iconAtlas !== iconAtlas) {\n        if (iconAtlas instanceof Texture2D) {\n          var _iconAtlas$setParamet;\n\n          iconAtlas.setParameters((_iconAtlas$setParamet = {}, _defineProperty(_iconAtlas$setParamet, GL.TEXTURE_MIN_FILTER, DEFAULT_TEXTURE_MIN_FILTER), _defineProperty(_iconAtlas$setParamet, GL.TEXTURE_MAG_FILTER, DEFAULT_TEXTURE_MAG_FILTER), _iconAtlas$setParamet));\n          this.setState({\n            iconsTexture: iconAtlas\n          });\n        } else if (typeof iconAtlas === 'string') {\n          loadTextures(this.context.gl, {\n            urls: [iconAtlas]\n          }).then(function (_ref3) {\n            var _texture$setParameter;\n\n            var _ref4 = _slicedToArray(_ref3, 1),\n                texture = _ref4[0];\n\n            texture.setParameters((_texture$setParameter = {}, _defineProperty(_texture$setParameter, GL.TEXTURE_MIN_FILTER, DEFAULT_TEXTURE_MIN_FILTER), _defineProperty(_texture$setParameter, GL.TEXTURE_MAG_FILTER, DEFAULT_TEXTURE_MAG_FILTER), _texture$setParameter));\n\n            _this2.setState({\n              iconsTexture: texture\n            });\n          });\n        }\n      }\n\n      if (props.fp64 !== oldProps.fp64) {\n        var gl = this.context.gl;\n        this.setState({\n          model: this._getModel(gl)\n        });\n      }\n\n      this.updateAttribute({\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref5) {\n      var uniforms = _ref5.uniforms;\n      var sizeScale = this.props.sizeScale;\n      var iconsTexture = this.state.iconsTexture;\n\n      if (iconsTexture) {\n        this.state.model.render(Object.assign({}, uniforms, {\n          iconsTexture: iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale: sizeScale\n        }));\n      }\n    }\n  }, {\n    key: '_getModel',\n    value: function _getModel(gl) {\n      var positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          positions: new Float32Array(positions)\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }, {\n    key: 'calculateInstancePositions',\n    value: function calculateInstancePositions(attribute) {\n      var _props = this.props,\n          data = _props.data,\n          getPosition = _props.getPosition;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          var position = getPosition(object);\n          value[i++] = position[0];\n          value[i++] = position[1];\n          value[i++] = position[2] || 0;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstancePositions64xyLow',\n    value: function calculateInstancePositions64xyLow(attribute) {\n      var _props2 = this.props,\n          data = _props2.data,\n          getPosition = _props2.getPosition;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var point = _step2.value;\n          var position = getPosition(point);\n          value[i++] = fp64ify(position[0])[1];\n          value[i++] = fp64ify(position[1])[1];\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceSizes',\n    value: function calculateInstanceSizes(attribute) {\n      var _props3 = this.props,\n          data = _props3.data,\n          getSize = _props3.getSize;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = data[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var object = _step3.value;\n          value[i++] = getSize(object);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceAngles',\n    value: function calculateInstanceAngles(attribute) {\n      var _props4 = this.props,\n          data = _props4.data,\n          getAngle = _props4.getAngle;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = data[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var object = _step4.value;\n          value[i++] = getAngle(object);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceColors',\n    value: function calculateInstanceColors(attribute) {\n      var _props5 = this.props,\n          data = _props5.data,\n          getColor = _props5.getColor;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = data[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var object = _step5.value;\n          var color = getColor(object);\n          value[i++] = color[0];\n          value[i++] = color[1];\n          value[i++] = color[2];\n          value[i++] = isNaN(color[3]) ? 255 : color[3];\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceOffsets',\n    value: function calculateInstanceOffsets(attribute) {\n      var _props6 = this.props,\n          data = _props6.data,\n          iconMapping = _props6.iconMapping,\n          getIcon = _props6.getIcon;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = data[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var object = _step6.value;\n          var icon = getIcon(object);\n          var rect = iconMapping[icon] || {};\n          value[i++] = rect.width / 2 - rect.anchorX || 0;\n          value[i++] = rect.height / 2 - rect.anchorY || 0;\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceColorMode',\n    value: function calculateInstanceColorMode(attribute) {\n      var _props7 = this.props,\n          data = _props7.data,\n          iconMapping = _props7.iconMapping,\n          getIcon = _props7.getIcon;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = data[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var object = _step7.value;\n          var icon = getIcon(object);\n          var colorMode = iconMapping[icon] && iconMapping[icon].mask;\n          value[i++] = colorMode ? 1 : 0;\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceIconFrames',\n    value: function calculateInstanceIconFrames(attribute) {\n      var _props8 = this.props,\n          data = _props8.data,\n          iconMapping = _props8.iconMapping,\n          getIcon = _props8.getIcon;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = data[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var object = _step8.value;\n          var icon = getIcon(object);\n          var rect = iconMapping[icon] || {};\n          value[i++] = rect.x || 0;\n          value[i++] = rect.y || 0;\n          value[i++] = rect.width || 0;\n          value[i++] = rect.height || 0;\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n  }]);\n\n  return IconLayer;\n}(Layer);\n\nexport default IconLayer;\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}