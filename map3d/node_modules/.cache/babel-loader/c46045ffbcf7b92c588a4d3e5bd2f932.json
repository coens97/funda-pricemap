{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { Layer } from '../../../lib';\nimport { GL, Model, Geometry } from 'luma.gl';\nimport { fp64ify, enable64bitSupport } from '../../../lib/utils/fp64';\nimport { COORDINATE_SYSTEM } from '../../../lib';\nimport vs from './arc-layer-vertex.glsl';\nimport vs64 from './arc-layer-vertex-64.glsl';\nimport fs from './arc-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  strokeWidth: 1,\n  fp64: false,\n  getSourcePosition: function getSourcePosition(x) {\n    return x.sourcePosition;\n  },\n  getTargetPosition: function getTargetPosition(x) {\n    return x.targetPosition;\n  },\n  getSourceColor: function getSourceColor(x) {\n    return x.color || DEFAULT_COLOR;\n  },\n  getTargetColor: function getTargetColor(x) {\n    return x.color || DEFAULT_COLOR;\n  }\n};\n\nvar ArcLayer = function (_Layer) {\n  _inherits(ArcLayer, _Layer);\n\n  function ArcLayer() {\n    _classCallCheck(this, ArcLayer);\n\n    return _possibleConstructorReturn(this, (ArcLayer.__proto__ || Object.getPrototypeOf(ArcLayer)).apply(this, arguments));\n  }\n\n  _createClass(ArcLayer, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return enable64bitSupport(this.props) ? {\n        vs: vs64,\n        fs: fs,\n        modules: ['project64']\n      } : {\n        vs: vs,\n        fs: fs\n      }; // 'project' module added by default.\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var gl = this.context.gl;\n      this.setState({\n        model: this._getModel(gl)\n      });\n      var attributeManager = this.state.attributeManager;\n      /* eslint-disable max-len */\n\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 4,\n          accessor: ['getSourcePosition', 'getTargetPosition'],\n          update: this.calculateInstancePositions\n        },\n        instanceSourceColors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getSourceColor',\n          update: this.calculateInstanceSourceColors\n        },\n        instanceTargetColors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getTargetColor',\n          update: this.calculateInstanceTargetColors\n        }\n      });\n      /* eslint-enable max-len */\n    }\n  }, {\n    key: 'updateAttribute',\n    value: function updateAttribute(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var attributeManager = this.state.attributeManager;\n        attributeManager.invalidateAll();\n\n        if (props.fp64 && props.projectionMode === COORDINATE_SYSTEM.LNGLAT) {\n          attributeManager.addInstanced({\n            instancePositions64Low: {\n              size: 4,\n              accessor: ['getSourcePosition', 'getTargetPosition'],\n              update: this.calculateInstancePositions64Low\n            }\n          });\n        } else {\n          attributeManager.remove(['instancePositions64Low']);\n        }\n      }\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps,\n          changeFlags = _ref2.changeFlags;\n\n      _get(ArcLayer.prototype.__proto__ || Object.getPrototypeOf(ArcLayer.prototype), 'updateState', this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      }); // Re-generate model if geometry changed\n\n\n      if (props.fp64 !== oldProps.fp64) {\n        var gl = this.context.gl;\n        this.setState({\n          model: this._getModel(gl)\n        });\n      }\n\n      this.updateAttribute({\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var strokeWidth = this.props.strokeWidth;\n      this.state.model.render(Object.assign({}, uniforms, {\n        strokeWidth: strokeWidth\n      }));\n    }\n  }, {\n    key: '_getModel',\n    value: function _getModel(gl) {\n      var positions = [];\n      var NUM_SEGMENTS = 50;\n      /*\n       *  (0, -1)-------------_(1, -1)\n       *       |          _,-\"  |\n       *       o      _,-\"      o\n       *       |  _,-\"          |\n       *   (0, 1)\"-------------(1, 1)\n       */\n\n      for (var i = 0; i < NUM_SEGMENTS; i++) {\n        positions = positions.concat([i, -1, 0, i, 1, 0]);\n      }\n\n      var model = new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          positions: new Float32Array(positions)\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n      model.setUniforms({\n        numSegments: NUM_SEGMENTS\n      });\n      return model;\n    }\n  }, {\n    key: 'calculateInstancePositions',\n    value: function calculateInstancePositions(attribute) {\n      var _props = this.props,\n          data = _props.data,\n          getSourcePosition = _props.getSourcePosition,\n          getTargetPosition = _props.getTargetPosition;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          var sourcePosition = getSourcePosition(object);\n          var targetPosition = getTargetPosition(object);\n          value[i + 0] = sourcePosition[0];\n          value[i + 1] = sourcePosition[1];\n          value[i + 2] = targetPosition[0];\n          value[i + 3] = targetPosition[1];\n          i += size;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstancePositions64Low',\n    value: function calculateInstancePositions64Low(attribute) {\n      var _props2 = this.props,\n          data = _props2.data,\n          getSourcePosition = _props2.getSourcePosition,\n          getTargetPosition = _props2.getTargetPosition;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var object = _step2.value;\n          var sourcePosition = getSourcePosition(object);\n          var targetPosition = getTargetPosition(object);\n          value[i + 0] = fp64ify(sourcePosition[0])[1];\n          value[i + 1] = fp64ify(sourcePosition[1])[1];\n          value[i + 2] = fp64ify(targetPosition[0])[1];\n          value[i + 3] = fp64ify(targetPosition[1])[1];\n          i += size;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceSourceColors',\n    value: function calculateInstanceSourceColors(attribute) {\n      var _props3 = this.props,\n          data = _props3.data,\n          getSourceColor = _props3.getSourceColor;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = 0;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = data[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var object = _step3.value;\n          var color = getSourceColor(object);\n          value[i + 0] = color[0];\n          value[i + 1] = color[1];\n          value[i + 2] = color[2];\n          value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n          i += size;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceTargetColors',\n    value: function calculateInstanceTargetColors(attribute) {\n      var _props4 = this.props,\n          data = _props4.data,\n          getTargetColor = _props4.getTargetColor;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = data[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var object = _step4.value;\n          var color = getTargetColor(object);\n          value[i + 0] = color[0];\n          value[i + 1] = color[1];\n          value[i + 2] = color[2];\n          value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n          i += size;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }]);\n\n  return ArcLayer;\n}(Layer);\n\nexport default ArcLayer;\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}