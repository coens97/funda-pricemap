{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* global document */\n\n\nimport { Texture2D } from 'luma.gl';\nvar GL_TEXTURE_WRAP_S = 0x2802;\nvar GL_TEXTURE_WRAP_T = 0x2803;\nvar GL_CLAMP_TO_EDGE = 0x812f;\nvar MAX_CANVAS_WIDTH = 1024;\nvar DEFAULT_FONT_SIZE = 64;\nvar DEFAULT_PADDING = 4;\nvar BASELINE_SCALE = 0.9;\nvar HEIGHT_SCALE = 1.2;\nexport var DEFAULT_CHAR_SET = [];\n\nfor (var i = 32; i < 128; i++) {\n  DEFAULT_CHAR_SET.push(String.fromCharCode(i));\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize) {\n  ctx.font = \"\".concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport function makeFontAtlas(gl, _ref) {\n  var _parameters;\n\n  var fontFamily = _ref.fontFamily,\n      _ref$characterSet = _ref.characterSet,\n      characterSet = _ref$characterSet === void 0 ? DEFAULT_CHAR_SET : _ref$characterSet,\n      _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? DEFAULT_FONT_SIZE : _ref$fontSize,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? DEFAULT_PADDING : _ref$padding;\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d'); // measure texts\n\n  var row = 0;\n  var x = 0; // TODO - use Advanced text metrics when they are adopted:\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n\n  var fontHeight = fontSize * HEIGHT_SCALE;\n  setTextStyle(ctx, fontFamily, fontSize);\n  var mapping = {};\n  Array.from(characterSet).forEach(function (char) {\n    var _ctx$measureText = ctx.measureText(char),\n        width = _ctx$measureText.width;\n\n    if (x + width > MAX_CANVAS_WIDTH) {\n      x = 0;\n      row++;\n    }\n\n    mapping[char] = {\n      x: x,\n      y: row * (fontHeight + padding),\n      width: width,\n      height: fontHeight,\n      mask: true\n    };\n    x += width + padding;\n  });\n  canvas.width = MAX_CANVAS_WIDTH;\n  canvas.height = (row + 1) * (fontHeight + padding);\n  setTextStyle(ctx, fontFamily, fontSize);\n\n  for (var char in mapping) {\n    ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n  }\n\n  return {\n    scale: HEIGHT_SCALE,\n    mapping: mapping,\n    texture: new Texture2D(gl, {\n      pixels: canvas,\n      // padding is added only between the characters but not for borders\n      // enforce CLAMP_TO_EDGE to avoid any artifacts.\n      parameters: (_parameters = {}, _defineProperty(_parameters, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE), _defineProperty(_parameters, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE), _parameters)\n    })\n  };\n}","map":null,"metadata":{},"sourceType":"module"}