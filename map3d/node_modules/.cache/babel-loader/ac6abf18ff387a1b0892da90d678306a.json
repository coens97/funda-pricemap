{"ast":null,"code":"import { getContextInfo } from '../../webgl';\nimport { hasFeature, FEATURES } from '../../webgl/context-features';\nexport function checkRendererVendor(debugInfo, gpuVendor) {\n  var vendor = debugInfo.vendor,\n      renderer = debugInfo.renderer;\n  var result = void 0;\n\n  switch (gpuVendor) {\n    case 'nvidia':\n      result = vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i);\n      break;\n\n    case 'intel':\n      result = vendor.match(/INTEL/i) || renderer.match(/INTEL/i);\n      break;\n\n    case 'amd':\n      result = vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i);\n      break;\n\n    default:\n      result = false;\n  }\n\n  return result;\n}\nexport function getPlatformShaderDefines(gl) {\n  /* eslint-disable */\n  var platformDefines = '';\n  var debugInfo = getContextInfo(gl);\n\n  if (checkRendererVendor(debugInfo, 'nvidia')) {\n    platformDefines += '#define NVIDIA_GPU\\n#define NVIDIA_FP64_WORKAROUND 1\\n#define NVIDIA_EQUATION_WORKAROUND 1\\n';\n  } else if (checkRendererVendor(debugInfo, 'intel')) {\n    platformDefines += '#define INTEL_GPU\\n#define INTEL_FP64_WORKAROUND 1\\n#define NVIDIA_EQUATION_WORKAROUND 1\\n #define INTEL_TAN_WORKAROUND 1\\n';\n  } else if (checkRendererVendor(debugInfo, 'amd')) {\n    platformDefines += '#define AMD_GPU\\n';\n  } else {\n    platformDefines += '#define DEFAULT_GPU\\n';\n  }\n\n  return platformDefines;\n}\nexport function getVersionDefines(gl) {\n  var versionDefines = '// Defines for shader portability\\n#if (__VERSION__ > 120)\\n# define attribute in\\n# define varying out\\n# define FRAG_DEPTH\\n# define DERIVATIVES\\n# define DRAW_BUFFERS\\n# define TEXTURE_LOD\\n#else\\n// # define in attribute\\n// # define out varying\\n#endif // __VERSION\\n';\n\n  if (hasFeature(gl, FEATURES.GLSL_FRAG_DEPTH)) {\n    versionDefines += '// FRAG_DEPTH => gl_FragDepth is available\\n#ifdef GL_EXT_frag_depth\\n#extension GL_EXT_frag_depth : enable\\n# define FRAG_DEPTH\\n# define gl_FragDepth gl_FragDepthEXT\\n#endif\\n';\n  }\n\n  if (hasFeature(gl, FEATURES.GLSL_DERIVATIVES)) {\n    versionDefines += '// DERIVATIVES => dxdF, dxdY and fwidth are available\\n#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n# define DERIVATIVES\\n#endif\\n';\n  }\n\n  if (hasFeature(gl, FEATURES.GLSL_FRAG_DATA)) {\n    versionDefines += '// DRAW_BUFFERS => gl_FragData[] is available\\n#ifdef GL_EXT_draw_buffers\\n#extension GL_EXT_draw_buffers : require\\n#define DRAW_BUFFERS\\n#endif\\n';\n  }\n\n  if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n    versionDefines += '// TEXTURE_LOD => texture2DLod etc are available\\n#ifdef GL_EXT_shader_texture_lod\\n#extension GL_EXT_shader_texture_lod : enable\\n# define TEXTURE_LOD\\n#define texture2DLod texture2DLodEXT\\n#define texture2DProjLod texture2DProjLodEXT\\n#define texture2DProjLod texture2DProjLodEXT\\n#define textureCubeLod textureCubeLodEXT\\n#define texture2DGrad texture2DGradEXT\\n#define texture2DProjGrad texture2DProjGradEXT\\n#define texture2DProjGrad texture2DProjGradEXT\\n#define textureCubeGrad textureCubeGradEXT\\n#endif\\n';\n  }\n\n  return versionDefines;\n}","map":null,"metadata":{},"sourceType":"module"}