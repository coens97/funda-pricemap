{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport log from '../utils/log';\nimport { createMat4, extractCameraVectors } from '../utils/math-utils';\nimport { Matrix4, Vector3, equals as _equals } from 'math.gl';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_invert from 'gl-mat4/invert';\nimport { getDistanceScales as _getDistanceScales, getMeterZoom, lngLatToWorld, worldToLngLat, worldToPixels, pixelsToWorld } from 'viewport-mercator-project';\nimport assert from '../utils/assert';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nvar IDENTITY = createMat4();\nvar ZERO_VECTOR = [0, 0, 0];\nvar DEFAULT_DISTANCE_SCALES = {\n  pixelsPerMeter: [1, 1, 1],\n  metersPerPixel: [1, 1, 1],\n  pixelsPerDegree: [1, 1, 1],\n  degreesPerPixel: [1, 1, 1]\n};\nvar DEFAULT_ZOOM = 0;\nvar ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nvar Viewport =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  function Viewport() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Viewport);\n\n    var _opts$id = opts.id,\n        id = _opts$id === void 0 ? null : _opts$id,\n        _opts$x = opts.x,\n        x = _opts$x === void 0 ? 0 : _opts$x,\n        _opts$y = opts.y,\n        y = _opts$y === void 0 ? 0 : _opts$y,\n        _opts$width = opts.width,\n        width = _opts$width === void 0 ? 1 : _opts$width,\n        _opts$height = opts.height,\n        height = _opts$height === void 0 ? 1 : _opts$height;\n    this.id = id || this.constructor.displayName || 'viewport';\n    this.x = x;\n    this.y = y; // Silently allow apps to send in w,h = 0,0\n\n    this.width = width || 1;\n    this.height = height || 1;\n\n    this._initViewMatrix(opts);\n\n    this._initProjectionMatrix(opts);\n\n    this._initPixelMatrices(); // Bind methods for easy access\n\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  } // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n\n\n  _createClass(Viewport, [{\n    key: \"equals\",\n    value: function equals(viewport) {\n      if (!(viewport instanceof Viewport)) {\n        return false;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && _equals(viewport.projectionMatrix, this.projectionMatrix) && _equals(viewport.viewMatrix, this.viewMatrix); // TODO - check distance scales?\n    }\n    /**\n     * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n     * using viewport projection parameters\n     * - [longitude, latitude] to [x, y]\n     * - [longitude, latitude, Z] => [x, y, z]\n     * Note: By default, returns top-left coordinates for canvas/SVG type render\n     *\n     * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n     * @param {Object} opts - options\n     * @param {Object} opts.topLeft=true - Whether projected coords are top left\n     * @return {Array} - [x, y] or [x, y, z] in top left coords\n     */\n\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$topLeft = _ref.topLeft,\n          topLeft = _ref$topLeft === void 0 ? true : _ref$topLeft;\n\n      var worldPosition = this.projectPosition(xyz);\n      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n      var _coord = _slicedToArray(coord, 2),\n          x = _coord[0],\n          y = _coord[1];\n\n      var y2 = topLeft ? y : this.height - y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n    /**\n     * Unproject pixel coordinates on screen onto world coordinates,\n     * (possibly [lon, lat]) on map.\n     * - [x, y] => [lng, lat]\n     * - [x, y, z] => [lng, lat, Z]\n     * @param {Array} xyz -\n     * @param {Object} opts - options\n     * @param {Object} opts.topLeft=true - Whether origin is top left\n     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n     */\n\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft,\n          targetZ = _ref2.targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : this.height - y;\n      var targetZWorld = targetZ && targetZ * this.distanceScales.pixelsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    } // NON_LINEAR PROJECTION HOOKS\n    // Used for web meractor projection\n\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _this$projectFlat = this.projectFlat(xyz),\n          _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),\n          X = _this$projectFlat2[0],\n          Y = _this$projectFlat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.pixelsPerMeter[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _this$unprojectFlat = this.unprojectFlat(xyz),\n          _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n          X = _this$unprojectFlat2[0],\n          Y = _this$unprojectFlat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.metersPerPixel[2];\n      return [X, Y, Z];\n    }\n    /**\n     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n     * Performs the nonlinear part of the web mercator projection.\n     * Remaining projection is done with 4x4 matrices which also handles\n     * perspective.\n     * @param {Array} lngLat - [lng, lat] coordinates\n     *   Specifies a point on the sphere to project onto the map.\n     * @return {Array} [x,y] coordinates.\n     */\n\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n\n      if (this.isGeospatial) {\n        return lngLatToWorld(xyz, scale);\n      }\n\n      return xyz;\n    }\n    /**\n     * Unproject world point [x,y] on map onto {lat, lon} on sphere\n     * @param {object|Vector} xy - object with {x,y} members\n     *  representing point on projected map plane\n     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n     *   Has toArray method if you need a GeoJSON Array.\n     *   Per cartographic tradition, lat and lon are specified as degrees.\n     */\n\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n\n      if (this.isGeospatial) {\n        return worldToLngLat(xyz, scale);\n      }\n\n      return xyz;\n    }\n  }, {\n    key: \"getDistanceScales\",\n    value: function getDistanceScales() {\n      var coordinateOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (coordinateOrigin) {\n        return _getDistanceScales({\n          longitude: coordinateOrigin[0],\n          latitude: coordinateOrigin[1],\n          scale: this.scale,\n          highPrecision: true\n        });\n      }\n\n      return this.distanceScales;\n    }\n  }, {\n    key: \"getMatrices\",\n    value: function getMatrices() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$modelMatrix = _ref3.modelMatrix,\n          modelMatrix = _ref3$modelMatrix === void 0 ? null : _ref3$modelMatrix;\n\n      var modelViewProjectionMatrix = this.viewProjectionMatrix;\n      var pixelProjectionMatrix = this.pixelProjectionMatrix;\n      var pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n      if (modelMatrix) {\n        modelViewProjectionMatrix = mat4_multiply([], this.viewProjectionMatrix, modelMatrix);\n        pixelProjectionMatrix = mat4_multiply([], this.pixelProjectionMatrix, modelMatrix);\n        pixelUnprojectionMatrix = mat4_invert([], pixelProjectionMatrix);\n      }\n\n      var matrices = Object.assign({\n        modelViewProjectionMatrix: modelViewProjectionMatrix,\n        viewProjectionMatrix: this.viewProjectionMatrix,\n        viewMatrix: this.viewMatrix,\n        projectionMatrix: this.projectionMatrix,\n        // project/unproject between pixels and world\n        pixelProjectionMatrix: pixelProjectionMatrix,\n        pixelUnprojectionMatrix: pixelUnprojectionMatrix,\n        width: this.width,\n        height: this.height,\n        scale: this.scale\n      });\n      return matrices;\n    }\n  }, {\n    key: \"containsPixel\",\n    value: function containsPixel(_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y,\n          _ref4$width = _ref4.width,\n          width = _ref4$width === void 0 ? 1 : _ref4$width,\n          _ref4$height = _ref4.height,\n          height = _ref4$height === void 0 ? 1 : _ref4$height;\n      return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;\n    } // EXPERIMENTAL METHODS\n\n  }, {\n    key: \"getCameraPosition\",\n    value: function getCameraPosition() {\n      return this.cameraPosition;\n    }\n  }, {\n    key: \"getCameraDirection\",\n    value: function getCameraDirection() {\n      return this.cameraDirection;\n    }\n  }, {\n    key: \"getCameraUp\",\n    value: function getCameraUp() {\n      return this.cameraUp;\n    } // INTERNAL METHODS\n    // TODO - these are duplicating WebMercator methods\n\n  }, {\n    key: \"_addMetersToLngLat\",\n    value: function _addMetersToLngLat(lngLatZ, xyz) {\n      var _lngLatZ = _slicedToArray(lngLatZ, 3),\n          lng = _lngLatZ[0],\n          lat = _lngLatZ[1],\n          _lngLatZ$ = _lngLatZ[2],\n          Z = _lngLatZ$ === void 0 ? 0 : _lngLatZ$;\n\n      var _this$_metersToLngLat = this._metersToLngLatDelta(xyz),\n          _this$_metersToLngLat2 = _slicedToArray(_this$_metersToLngLat, 3),\n          deltaLng = _this$_metersToLngLat2[0],\n          deltaLat = _this$_metersToLngLat2[1],\n          _this$_metersToLngLat3 = _this$_metersToLngLat2[2],\n          deltaZ = _this$_metersToLngLat3 === void 0 ? 0 : _this$_metersToLngLat3;\n\n      return lngLatZ.length === 2 ? [lng + deltaLng, lat + deltaLat] : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n    }\n  }, {\n    key: \"_metersToLngLatDelta\",\n    value: function _metersToLngLatDelta(xyz) {\n      var _xyz2 = _slicedToArray(xyz, 3),\n          x = _xyz2[0],\n          y = _xyz2[1],\n          _xyz2$ = _xyz2[2],\n          z = _xyz2$ === void 0 ? 0 : _xyz2$;\n\n      assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n      var _this$distanceScales = this.distanceScales,\n          pixelsPerMeter = _this$distanceScales.pixelsPerMeter,\n          degreesPerPixel = _this$distanceScales.degreesPerPixel;\n      var deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n      var deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n      return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n    }\n  }, {\n    key: \"_createProjectionMatrix\",\n    value: function _createProjectionMatrix(_ref5) {\n      var orthographic = _ref5.orthographic,\n          fovyRadians = _ref5.fovyRadians,\n          aspect = _ref5.aspect,\n          focalDistance = _ref5.focalDistance,\n          near = _ref5.near,\n          far = _ref5.far;\n      assert(Number.isFinite(fovyRadians));\n      return orthographic ? new Matrix4().orthographic({\n        fovy: fovyRadians,\n        aspect: aspect,\n        focalDistance: focalDistance,\n        near: near,\n        far: far\n      }) : new Matrix4().perspective({\n        fovy: fovyRadians,\n        aspect: aspect,\n        near: near,\n        far: far\n      });\n    }\n    /* eslint-disable complexity, max-statements */\n\n  }, {\n    key: \"_initViewMatrix\",\n    value: function _initViewMatrix(opts) {\n      var _opts$viewMatrix = opts.viewMatrix,\n          viewMatrix = _opts$viewMatrix === void 0 ? IDENTITY : _opts$viewMatrix,\n          _opts$longitude = opts.longitude,\n          longitude = _opts$longitude === void 0 ? null : _opts$longitude,\n          _opts$latitude = opts.latitude,\n          latitude = _opts$latitude === void 0 ? null : _opts$latitude,\n          _opts$zoom = opts.zoom,\n          zoom = _opts$zoom === void 0 ? null : _opts$zoom,\n          _opts$position = opts.position,\n          position = _opts$position === void 0 ? null : _opts$position,\n          _opts$modelMatrix = opts.modelMatrix,\n          modelMatrix = _opts$modelMatrix === void 0 ? null : _opts$modelMatrix,\n          _opts$focalDistance = opts.focalDistance,\n          focalDistance = _opts$focalDistance === void 0 ? 1 : _opts$focalDistance,\n          _opts$distanceScales = opts.distanceScales,\n          distanceScales = _opts$distanceScales === void 0 ? null : _opts$distanceScales; // Check if we have a geospatial anchor\n\n      this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n      this.zoom = zoom;\n\n      if (!Number.isFinite(this.zoom)) {\n        this.zoom = this.isGeospatial ? getMeterZoom({\n          latitude: latitude\n        }) + Math.log2(focalDistance) : DEFAULT_ZOOM;\n      }\n\n      this.scale = Math.pow(2, this.zoom); // Calculate distance scales if lng/lat/zoom are provided\n\n      this.distanceScales = this.isGeospatial ? _getDistanceScales({\n        latitude: latitude,\n        longitude: longitude,\n        scale: this.scale\n      }) : distanceScales || DEFAULT_DISTANCE_SCALES;\n      this.focalDistance = focalDistance;\n      this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n      this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n      this.position = ZERO_VECTOR;\n      this.meterOffset = ZERO_VECTOR;\n\n      if (position) {\n        // Apply model matrix if supplied\n        this.position = position;\n        this.modelMatrix = modelMatrix;\n        this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n      }\n\n      this.viewMatrixUncentered = viewMatrix;\n\n      if (this.isGeospatial) {\n        // Determine camera center\n        this.center = this._getCenterInWorld({\n          longitude: longitude,\n          latitude: latitude\n        }); // Make a centered version of the matrix for projection modes without an offset\n\n        this.viewMatrix = new Matrix4() // Apply the uncentered view matrix\n        .multiplyRight(this.viewMatrixUncentered) // And center it\n        .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n      } else {\n        this.center = position;\n        this.viewMatrix = viewMatrix;\n      }\n    }\n    /* eslint-enable complexity, max-statements */\n\n  }, {\n    key: \"_getCenterInWorld\",\n    value: function _getCenterInWorld(_ref6) {\n      var longitude = _ref6.longitude,\n          latitude = _ref6.latitude;\n      var meterOffset = this.meterOffset,\n          scale = this.scale,\n          distanceScales = this.distanceScales; // Make a centered version of the matrix for projection modes without an offset\n\n      var center2d = this.projectFlat([longitude, latitude], scale);\n      var center = new Vector3(center2d[0], center2d[1], 0);\n\n      if (meterOffset) {\n        var pixelPosition = new Vector3(meterOffset) // Convert to pixels in current zoom\n        .scale(distanceScales.pixelsPerMeter) // We want positive Y to represent an offset towards north,\n        // but web mercator world coordinates is top-left\n        .scale([1, -1, 1]);\n        center.add(pixelPosition);\n      }\n\n      return center;\n    }\n  }, {\n    key: \"_initProjectionMatrix\",\n    value: function _initProjectionMatrix(opts) {\n      var _opts$projectionMatri = opts.projectionMatrix,\n          projectionMatrix = _opts$projectionMatri === void 0 ? null : _opts$projectionMatri,\n          _opts$orthographic = opts.orthographic,\n          orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n          fovyRadians = opts.fovyRadians,\n          fovyDegrees = opts.fovyDegrees,\n          fovy = opts.fovy,\n          _opts$near = opts.near,\n          near = _opts$near === void 0 ? 0.1 : _opts$near,\n          _opts$far = opts.far,\n          far = _opts$far === void 0 ? 1000 : _opts$far,\n          _opts$focalDistance2 = opts.focalDistance,\n          focalDistance = _opts$focalDistance2 === void 0 ? 1 : _opts$focalDistance2,\n          orthographicFocalDistance = opts.orthographicFocalDistance;\n      var radians = fovyRadians || (fovyDegrees || fovy || 75) * DEGREES_TO_RADIANS;\n      this.projectionMatrix = projectionMatrix || this._createProjectionMatrix({\n        orthographic: orthographic,\n        fovyRadians: radians,\n        aspect: this.width / this.height,\n        focalDistance: orthographicFocalDistance || focalDistance,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"_initPixelMatrices\",\n    value: function _initPixelMatrices() {\n      // Note: As usual, matrix operations should be applied in \"reverse\" order\n      // since vectors will be multiplied in from the right during transformation\n      var vpm = createMat4();\n      mat4_multiply(vpm, vpm, this.projectionMatrix);\n      mat4_multiply(vpm, vpm, this.viewMatrix);\n      this.viewProjectionMatrix = vpm; // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n      // Calculate inverse view matrix\n\n      this.viewMatrixInverse = mat4_invert([], this.viewMatrix) || this.viewMatrix; // Decompose camera directions\n\n      var _extractCameraVectors = extractCameraVectors({\n        viewMatrix: this.viewMatrix,\n        viewMatrixInverse: this.viewMatrixInverse\n      }),\n          eye = _extractCameraVectors.eye,\n          direction = _extractCameraVectors.direction,\n          up = _extractCameraVectors.up;\n\n      this.cameraPosition = eye;\n      this.cameraDirection = direction;\n      this.cameraUp = up; // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n      /*\n       * Builds matrices that converts preprojected lngLats to screen pixels\n       * and vice versa.\n       * Note: Currently returns bottom-left coordinates!\n       * Note: Starts with the GL projection matrix and adds steps to the\n       *       scale and translate that matrix onto the window.\n       * Note: WebGL controls clip space to screen projection with gl.viewport\n       *       and does not need this step.\n       */\n      // matrix for conversion from world location to screen (pixel) coordinates\n\n      var viewportMatrix = createMat4(); // matrix from NDC to viewport.\n\n      var pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n\n      mat4_scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n      mat4_translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n      mat4_multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n      this.pixelProjectionMatrix = pixelProjectionMatrix;\n      this.viewportMatrix = viewportMatrix;\n      this.pixelUnprojectionMatrix = mat4_invert(createMat4(), this.pixelProjectionMatrix);\n\n      if (!this.pixelUnprojectionMatrix) {\n        log.warn('Pixel project matrix not invertible')(); // throw new Error('Pixel project matrix not invertible');\n      }\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };\nViewport.displayName = 'Viewport';","map":null,"metadata":{},"sourceType":"module"}