{"ast":null,"code":"// Extensions to math.gl library. Intended to be folded back.\nimport vec4_multiply from 'gl-vec4/multiply';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\nimport assert from 'assert';\nexport function transformVector(matrix, vector) {\n  // Handle non-invertible matrix\n  if (!matrix) {\n    return null;\n  }\n\n  var result = vec4_transformMat4([0, 0, 0, 0], vector, matrix);\n  var scale = 1 / result[3];\n  vec4_multiply(result, result, [scale, scale, scale, scale]);\n  return result;\n} // Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\n\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n} // Extract camera vectors (move to math library?)\n\nexport function extractCameraVectors(_ref) {\n  var viewMatrix = _ref.viewMatrix,\n      viewMatrixInverse = _ref.viewMatrixInverse; // Read the translation from the inverse view matrix\n\n  return {\n    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],\n    direction: [viewMatrix[2], viewMatrix[6], viewMatrix[10]],\n    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]]\n  };\n}\nexport function mod(value, divisor) {\n  assert(Number.isFinite(value) && Number.isFinite(divisor));\n  var modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}","map":null,"metadata":{},"sourceType":"module"}