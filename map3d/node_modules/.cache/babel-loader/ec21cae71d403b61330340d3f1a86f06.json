{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { Layer } from '../../core';\nimport { GL, Model, Geometry } from 'luma.gl';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nvar defaultProps = {\n  cellSizePixels: 100,\n  // Color range?\n  minColor: [0, 0, 0, 255],\n  maxColor: [0, 255, 0, 255],\n  getPosition: function getPosition(d) {\n    return d.position;\n  },\n  getWeight: function getWeight(d) {\n    return 1;\n  }\n};\n\nvar ScreenGridLayer = function (_Layer) {\n  _inherits(ScreenGridLayer, _Layer);\n\n  function ScreenGridLayer() {\n    _classCallCheck(this, ScreenGridLayer);\n\n    return _possibleConstructorReturn(this, (ScreenGridLayer.__proto__ || Object.getPrototypeOf(ScreenGridLayer)).apply(this, arguments));\n  }\n\n  _createClass(ScreenGridLayer, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return {\n        vs: vs,\n        fs: fs,\n        modules: ['picking']\n      }; // 'project' module added by default.\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var attributeManager = this.state.attributeManager;\n      var gl = this.context.gl;\n      /* eslint-disable max-len */\n\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          update: this.calculateInstancePositions\n        },\n        instanceCount: {\n          size: 1,\n          accessor: ['getPosition', 'getWeight'],\n          update: this.calculateInstanceCount\n        }\n      });\n      /* eslint-disable max-len */\n\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: 'shouldUpdateState',\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n\n      _get(ScreenGridLayer.prototype.__proto__ || Object.getPrototypeOf(ScreenGridLayer.prototype), 'updateState', this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var cellSizeChanged = props.cellSizePixels !== oldProps.cellSizePixels;\n\n      if (cellSizeChanged || changeFlags.viewportChanged) {\n        this.updateCell();\n      }\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _props = this.props,\n          minColor = _props.minColor,\n          maxColor = _props.maxColor,\n          _props$parameters = _props.parameters,\n          parameters = _props$parameters === undefined ? {} : _props$parameters;\n      var _state = this.state,\n          model = _state.model,\n          cellScale = _state.cellScale,\n          maxCount = _state.maxCount;\n      uniforms = Object.assign({}, uniforms, {\n        minColor: minColor,\n        maxColor: maxColor,\n        cellScale: cellScale,\n        maxCount: maxCount\n      });\n      model.draw({\n        uniforms: uniforms,\n        parameters: Object.assign({\n          depthTest: false,\n          depthMask: false\n        }, parameters)\n      });\n    }\n  }, {\n    key: '_getModel',\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }, {\n    key: 'updateCell',\n    value: function updateCell() {\n      var _context$viewport = this.context.viewport,\n          width = _context$viewport.width,\n          height = _context$viewport.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var MARGIN = 2;\n      var cellScale = new Float32Array([(cellSizePixels - MARGIN) / width * 2, -(cellSizePixels - MARGIN) / height * 2, 1]);\n      var numCol = Math.ceil(width / cellSizePixels);\n      var numRow = Math.ceil(height / cellSizePixels);\n      this.setState({\n        cellScale: cellScale,\n        numCol: numCol,\n        numRow: numRow,\n        numInstances: numCol * numRow\n      });\n      var attributeManager = this.state.attributeManager;\n      attributeManager.invalidateAll();\n    }\n  }, {\n    key: 'calculateInstancePositions',\n    value: function calculateInstancePositions(attribute, _ref4) {\n      var numInstances = _ref4.numInstances;\n      var _context$viewport2 = this.context.viewport,\n          width = _context$viewport2.width,\n          height = _context$viewport2.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var numCol = this.state.numCol;\n      var value = attribute.value,\n          size = attribute.size;\n\n      for (var i = 0; i < numInstances; i++) {\n        var x = i % numCol;\n        var y = Math.floor(i / numCol);\n        value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n        value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n        value[i * size + 2] = 0;\n      }\n    }\n  }, {\n    key: 'calculateInstanceCount',\n    value: function calculateInstanceCount(attribute) {\n      var _props2 = this.props,\n          data = _props2.data,\n          cellSizePixels = _props2.cellSizePixels,\n          getPosition = _props2.getPosition,\n          getWeight = _props2.getWeight;\n      var _state2 = this.state,\n          numCol = _state2.numCol,\n          numRow = _state2.numRow;\n      var value = attribute.value;\n      var maxCount = 0;\n      value.fill(0.0);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var point = _step.value;\n          var pixel = this.project(getPosition(point));\n          var colId = Math.floor(pixel[0] / cellSizePixels);\n          var rowId = Math.floor(pixel[1] / cellSizePixels);\n\n          if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n            var i = colId + rowId * numCol;\n            value[i] += getWeight(point);\n\n            if (value[i] > maxCount) {\n              maxCount = value[i];\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.setState({\n        maxCount: maxCount\n      });\n    }\n  }]);\n\n  return ScreenGridLayer;\n}(Layer);\n\nexport default ScreenGridLayer;\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}