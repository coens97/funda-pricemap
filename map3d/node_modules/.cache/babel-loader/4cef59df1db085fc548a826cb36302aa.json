{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport PropTypes from 'prop-types';\nimport OrbitViewport from '../viewports/orbit-viewport';\nimport OrbitState from '../controllers/orbit-state';\nimport ViewportControls from '../controllers/viewport-controls';\nimport { EventManager } from 'mjolnir.js';\nvar PREFIX = '-webkit-';\nvar CURSOR = {\n  GRABBING: PREFIX + 'grabbing',\n  GRAB: PREFIX + 'grab',\n  POINTER: 'pointer'\n};\nvar propTypes = {\n  /* Viewport properties */\n  lookAt: PropTypes.arrayOf(PropTypes.number),\n  // target position\n  distance: PropTypes.number,\n  // distance from camera to the target\n  rotationX: PropTypes.number,\n  // rotation around X axis\n  rotationY: PropTypes.number,\n  // rotation around Y axis\n  translationX: PropTypes.number,\n  // translation x in screen space\n  translationY: PropTypes.number,\n  // translation y in screen space\n  zoom: PropTypes.number,\n  // scale in screen space\n  minZoom: PropTypes.number,\n  maxZoom: PropTypes.number,\n  fov: PropTypes.number,\n  // field of view\n  near: PropTypes.number,\n  far: PropTypes.number,\n  width: PropTypes.number.isRequired,\n  // viewport width in pixels\n  height: PropTypes.number.isRequired,\n  // viewport height in pixels\n\n  /* Model properties */\n  bounds: PropTypes.object,\n  // bounds in the shape of {minX, minY, minZ, maxX, maxY, maxZ}\n\n  /* Callbacks */\n  onViewportChange: PropTypes.func.isRequired,\n\n  /** Accessor that returns a cursor style to show interactive state */\n  getCursor: PropTypes.func,\n\n  /* Controls */\n  orbitControls: PropTypes.object\n};\n\nvar getDefaultCursor = function getDefaultCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? CURSOR.GRABBING : CURSOR.GRAB;\n};\n\nvar defaultProps = {\n  lookAt: [0, 0, 0],\n  rotationX: 0,\n  rotationY: 0,\n  translationX: 0,\n  translationY: 0,\n  distance: 10,\n  zoom: 1,\n  minZoom: 0,\n  maxZoom: Infinity,\n  fov: 50,\n  near: 1,\n  far: 1000,\n  getCursor: getDefaultCursor\n};\n/*\n * Maps mouse interaction to a deck.gl Viewport\n */\n\nvar OrbitControllerJS = function () {\n  _createClass(OrbitControllerJS, null, [{\n    key: 'getViewport',\n    // Returns a deck.gl Viewport instance, to be used with the DeckGL component\n    value: function getViewport(viewport) {\n      return new OrbitViewport(viewport);\n    }\n  }]);\n\n  function OrbitControllerJS(props) {\n    _classCallCheck(this, OrbitControllerJS);\n\n    props = Object.assign({}, defaultProps, props);\n    this.props = props;\n    this.state = {\n      // Whether the cursor is down\n      isDragging: false\n    };\n    this.canvas = props.canvas;\n    var eventManager = new EventManager(this.canvas);\n    this._eventManager = eventManager;\n    this._controls = props.orbitControls || new ViewportControls(OrbitState);\n\n    this._controls.setOptions(Object.assign({}, this.props, {\n      onStateChange: this._onInteractiveStateChange.bind(this),\n      eventManager: eventManager\n    }));\n  }\n\n  _createClass(OrbitControllerJS, [{\n    key: 'setProps',\n    value: function setProps(props) {\n      props = Object.assign({}, this.props, props);\n      this.props = props;\n\n      this._controls.setOptions(props);\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      this._eventManager.destroy();\n    }\n  }, {\n    key: '_onInteractiveStateChange',\n    value: function _onInteractiveStateChange(_ref2) {\n      var _ref2$isDragging = _ref2.isDragging,\n          isDragging = _ref2$isDragging === undefined ? false : _ref2$isDragging;\n\n      if (isDragging !== this.state.isDragging) {\n        this.state.isDragging = isDragging;\n        var getCursor = this.props.getCursor;\n        this.canvas.style.cursor = getCursor(this.state);\n      }\n    }\n  }]);\n\n  return OrbitControllerJS;\n}();\n\nexport default OrbitControllerJS;\nOrbitControllerJS.displayName = 'OrbitController';\nOrbitControllerJS.propTypes = propTypes;\nOrbitControllerJS.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}