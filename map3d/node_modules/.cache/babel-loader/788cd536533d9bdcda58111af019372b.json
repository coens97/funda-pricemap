{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { COORDINATE_SYSTEM, Layer, experimental } from '../../core';\nvar fp64ify = experimental.fp64ify,\n    enable64bitSupport = experimental.enable64bitSupport;\nimport { GL, Model, Geometry } from 'luma.gl';\nimport vs from './path-layer-vertex.glsl';\nimport vs64 from './path-layer-vertex-64.glsl';\nimport fs from './path-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  widthScale: 1,\n  // stroke width in meters\n  widthMinPixels: 0,\n  //  min stroke width in pixels\n  widthMaxPixels: Number.MAX_SAFE_INTEGER,\n  // max stroke width in pixels\n  rounded: false,\n  miterLimit: 4,\n  fp64: false,\n  dashJustified: false,\n  getPath: function getPath(object) {\n    return object.path;\n  },\n  getColor: function getColor(object) {\n    return object.color || DEFAULT_COLOR;\n  },\n  getWidth: function getWidth(object) {\n    return object.width || 1;\n  },\n  getDashArray: null\n};\n\nvar isClosed = function isClosed(path) {\n  var firstPoint = path[0];\n  var lastPoint = path[path.length - 1];\n  return firstPoint[0] === lastPoint[0] && firstPoint[1] === lastPoint[1] && firstPoint[2] === lastPoint[2];\n};\n\nvar PathLayer = function (_Layer) {\n  _inherits(PathLayer, _Layer);\n\n  function PathLayer() {\n    _classCallCheck(this, PathLayer);\n\n    return _possibleConstructorReturn(this, (PathLayer.__proto__ || Object.getPrototypeOf(PathLayer)).apply(this, arguments));\n  }\n\n  _createClass(PathLayer, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return enable64bitSupport(this.props) ? {\n        vs: vs64,\n        fs: fs,\n        modules: ['project64', 'picking']\n      } : {\n        vs: vs,\n        fs: fs,\n        modules: ['picking']\n      }; // 'project' module added by default.\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var attributeManager = this.state.attributeManager;\n      /* eslint-disable max-len */\n\n      attributeManager.addInstanced({\n        instanceStartPositions: {\n          size: 3,\n          update: this.calculateStartPositions\n        },\n        instanceEndPositions: {\n          size: 3,\n          update: this.calculateEndPositions\n        },\n        instanceLeftDeltas: {\n          size: 3,\n          update: this.calculateLeftDeltas\n        },\n        instanceRightDeltas: {\n          size: 3,\n          update: this.calculateRightDeltas\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getWidth',\n          update: this.calculateStrokeWidths\n        },\n        instanceDashArrays: {\n          size: 2,\n          accessor: 'getDashArray',\n          update: this.calculateDashArrays\n        },\n        instanceColors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getColor',\n          update: this.calculateColors\n        },\n        instancePickingColors: {\n          size: 3,\n          type: GL.UNSIGNED_BYTE,\n          update: this.calculatePickingColors\n        }\n      });\n      /* eslint-enable max-len */\n    }\n  }, {\n    key: 'updateAttribute',\n    value: function updateAttribute(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var attributeManager = this.state.attributeManager;\n        attributeManager.invalidateAll();\n\n        if (props.fp64 && props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          attributeManager.addInstanced({\n            instanceStartEndPositions64xyLow: {\n              size: 4,\n              update: this.calculateInstanceStartEndPositions64xyLow\n            }\n          });\n        } else {\n          attributeManager.remove(['instanceStartEndPositions64xyLow']);\n        }\n      }\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n\n      _get(PathLayer.prototype.__proto__ || Object.getPrototypeOf(PathLayer.prototype), 'updateState', this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var getPath = this.props.getPath;\n      var attributeManager = this.state.attributeManager;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var gl = this.context.gl;\n        this.setState({\n          model: this._getModel(gl)\n        });\n      }\n\n      this.updateAttribute({\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n      if (geometryChanged) {\n        // this.state.paths only stores point positions in each path\n        var paths = props.data.map(getPath);\n        var numInstances = paths.reduce(function (count, path) {\n          return count + path.length - 1;\n        }, 0);\n        this.setState({\n          paths: paths,\n          numInstances: numInstances\n        });\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _props = this.props,\n          rounded = _props.rounded,\n          miterLimit = _props.miterLimit,\n          widthScale = _props.widthScale,\n          widthMinPixels = _props.widthMinPixels,\n          widthMaxPixels = _props.widthMaxPixels,\n          dashJustified = _props.dashJustified;\n      this.state.model.render(Object.assign({}, uniforms, {\n        jointType: Number(rounded),\n        alignMode: Number(dashJustified),\n        widthScale: widthScale,\n        miterLimit: miterLimit,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      }));\n    }\n  }, {\n    key: '_getModel',\n    value: function _getModel(gl) {\n      /*\n       *       _\n       *        \"-_ 1                   3                       5\n       *     _     \"o---------------------o-------------------_-o\n       *       -   / \"\"--..__              '.             _.-' /\n       *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n       *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n       *       \"o----------------------------\"\"-o'    :     /\n       *      0,2                            4 / '.  :     /\n       *                                      /   '.:     /\n       *                                     /     :'.   /\n       *                                    /     :  ', /\n       *                                   /     :     o\n       */\n      var SEGMENT_INDICES = [// start corner\n      0, 2, 1, // body\n      1, 2, 4, 1, 4, 3, // end corner\n      3, 4, 5]; // [0] position on segment - 0: start, 1: end\n      // [1] side of path - -1: left, 0: center, 1: right\n      // [2] role - 0: offset point 1: joint point\n\n      var SEGMENT_POSITIONS = [// bevel start corner\n      0, 0, 1, // start inner corner\n      0, -1, 0, // start outer corner\n      0, 1, 0, // end inner corner\n      1, -1, 0, // end outer corner\n      1, 1, 0, // bevel end corner\n      1, 0, 1];\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: new Float32Array(SEGMENT_POSITIONS)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }, {\n    key: 'calculateStartPositions',\n    value: function calculateStartPositions(attribute) {\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path) {\n        var numSegments = path.length - 1;\n\n        for (var ptIndex = 0; ptIndex < numSegments; ptIndex++) {\n          var point = path[ptIndex];\n          value[i++] = point[0];\n          value[i++] = point[1];\n          value[i++] = point[2] || 0;\n        }\n      });\n    }\n  }, {\n    key: 'calculateEndPositions',\n    value: function calculateEndPositions(attribute) {\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path) {\n        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          var point = path[ptIndex];\n          value[i++] = point[0];\n          value[i++] = point[1];\n          value[i++] = point[2] || 0;\n        }\n      });\n    }\n  }, {\n    key: 'calculateInstanceStartEndPositions64xyLow',\n    value: function calculateInstanceStartEndPositions64xyLow(attribute) {\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path) {\n        var numSegments = path.length - 1;\n\n        for (var ptIndex = 0; ptIndex < numSegments; ptIndex++) {\n          var startPoint = path[ptIndex];\n          var endPoint = path[ptIndex + 1];\n          value[i++] = fp64ify(startPoint[0])[1];\n          value[i++] = fp64ify(startPoint[1])[1];\n          value[i++] = fp64ify(endPoint[0])[1];\n          value[i++] = fp64ify(endPoint[1])[1];\n        }\n      });\n    }\n  }, {\n    key: 'calculateLeftDeltas',\n    value: function calculateLeftDeltas(attribute) {\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path) {\n        var numSegments = path.length - 1;\n        var prevPoint = isClosed(path) ? path[path.length - 2] : path[0];\n\n        for (var ptIndex = 0; ptIndex < numSegments; ptIndex++) {\n          var point = path[ptIndex];\n          value[i++] = point[0] - prevPoint[0];\n          value[i++] = point[1] - prevPoint[1];\n          value[i++] = point[2] - prevPoint[2] || 0;\n          prevPoint = point;\n        }\n      });\n    }\n  }, {\n    key: 'calculateRightDeltas',\n    value: function calculateRightDeltas(attribute) {\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path) {\n        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          var point = path[ptIndex];\n          var nextPoint = path[ptIndex + 1];\n\n          if (!nextPoint) {\n            nextPoint = isClosed(path) ? path[1] : point;\n          }\n\n          value[i++] = nextPoint[0] - point[0];\n          value[i++] = nextPoint[1] - point[1];\n          value[i++] = nextPoint[2] - point[2] || 0;\n        }\n      });\n    }\n  }, {\n    key: 'calculateStrokeWidths',\n    value: function calculateStrokeWidths(attribute) {\n      var _props2 = this.props,\n          data = _props2.data,\n          getWidth = _props2.getWidth;\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path, index) {\n        var width = getWidth(data[index], index);\n\n        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          value[i++] = width;\n        }\n      });\n    }\n  }, {\n    key: 'calculateDashArrays',\n    value: function calculateDashArrays(attribute) {\n      var _props3 = this.props,\n          data = _props3.data,\n          getDashArray = _props3.getDashArray;\n\n      if (!getDashArray) {\n        return;\n      }\n\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path, index) {\n        var dashArray = getDashArray(data[index], index);\n\n        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          value[i++] = dashArray[0];\n          value[i++] = dashArray[1];\n        }\n      });\n    }\n  }, {\n    key: 'calculateColors',\n    value: function calculateColors(attribute) {\n      var _props4 = this.props,\n          data = _props4.data,\n          getColor = _props4.getColor;\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path, index) {\n        var pointColor = getColor(data[index], index);\n\n        if (isNaN(pointColor[3])) {\n          pointColor[3] = 255;\n        }\n\n        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          value[i++] = pointColor[0];\n          value[i++] = pointColor[1];\n          value[i++] = pointColor[2];\n          value[i++] = pointColor[3];\n        }\n      });\n    } // Override the default picking colors calculation\n\n  }, {\n    key: 'calculatePickingColors',\n    value: function calculatePickingColors(attribute) {\n      var _this2 = this;\n\n      var paths = this.state.paths;\n      var value = attribute.value;\n      var i = 0;\n      paths.forEach(function (path, index) {\n        var pickingColor = _this2.encodePickingColor(index);\n\n        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          value[i++] = pickingColor[0];\n          value[i++] = pickingColor[1];\n          value[i++] = pickingColor[2];\n        }\n      });\n    }\n  }]);\n\n  return PathLayer;\n}(Layer);\n\nexport default PathLayer;\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}