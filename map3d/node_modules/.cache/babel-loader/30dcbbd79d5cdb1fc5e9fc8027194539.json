{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport Texture from './texture';\nimport { assertWebGLContext } from '../webgl-utils';\n\nvar Texture2D =\n/*#__PURE__*/\nfunction (_Texture) {\n  _inherits(Texture2D, _Texture);\n\n  _createClass(Texture2D, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl, opts) {\n      return Texture.isSupported(gl, opts);\n    }\n    /**\n     * @classdesc\n     * 2D WebGL Texture\n     * Note: Constructor will initialize your texture.\n     *\n     * @class\n     * @param {WebGLRenderingContext} gl - gl context\n     * @param {Image|ArrayBuffer|null} opts= - named options\n     * @param {Image|ArrayBuffer|null} opts.data= - buffer\n     * @param {GLint} width - width of texture\n     * @param {GLint} height - height of texture\n     */\n\n  }]);\n\n  function Texture2D(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Texture2D);\n\n    assertWebGLContext(gl);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Texture2D).call(this, gl, Object.assign({}, opts, {\n      target: 3553\n    })));\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n\n  _createClass(Texture2D, [{\n    key: \"bind\",\n    value: function bind() {\n      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n      var gl = this.gl;\n\n      if (textureUnit === undefined) {\n        throw new Error('Texture.bind: must specify texture unit');\n      }\n\n      this.textureUnit = textureUnit;\n      gl.activeTexture(33984 + textureUnit);\n      gl.bindTexture(this.target, this.handle);\n      return textureUnit;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var gl = this.gl;\n\n      if (this.textureUnit === undefined) {\n        throw new Error('Texture.unbind: texture unit not specified');\n      }\n\n      gl.activeTexture(33984 + this.textureUnit);\n      gl.bindTexture(this.target, null);\n      return this.textureUnit;\n    }\n  }, {\n    key: \"getActiveUnit\",\n    value: function getActiveUnit() {\n      return this.gl.getParameter(34016) - 33984;\n    }\n  }]);\n\n  return Texture2D;\n}(Texture);\n\nexport { Texture2D as default };","map":null,"metadata":{},"sourceType":"module"}