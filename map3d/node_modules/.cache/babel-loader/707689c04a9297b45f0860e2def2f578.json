{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { COORDINATE_SYSTEM, Layer, experimental } from '../../core';\nvar fp64ify = experimental.fp64ify,\n    enable64bitSupport = experimental.enable64bitSupport;\nimport { GL, Model, CubeGeometry } from 'luma.gl';\nimport vs from './grid-cell-layer-vertex.glsl';\nimport vs64 from './grid-cell-layer-vertex-64.glsl';\nimport fs from './grid-cell-layer-fragment.glsl';\nvar DEFAULT_COLOR = [255, 0, 255, 255];\nvar defaultProps = {\n  cellSize: 1000,\n  coverage: 1,\n  elevationScale: 1,\n  extruded: true,\n  fp64: false,\n  getPosition: function getPosition(x) {\n    return x.position;\n  },\n  getElevation: function getElevation(x) {\n    return x.elevation;\n  },\n  getColor: function getColor(x) {\n    return x.color;\n  },\n  lightSettings: {\n    lightsPosition: [-122.45, 37.65, 8000, -122.45, 37.2, 1000],\n    ambientRatio: 0.4,\n    diffuseRatio: 0.6,\n    specularRatio: 0.8,\n    lightsStrength: [1.0, 0.0, 0.8, 0.0],\n    numberOfLights: 2\n  }\n};\n\nvar GridCellLayer = function (_Layer) {\n  _inherits(GridCellLayer, _Layer);\n\n  function GridCellLayer() {\n    _classCallCheck(this, GridCellLayer);\n\n    return _possibleConstructorReturn(this, (GridCellLayer.__proto__ || Object.getPrototypeOf(GridCellLayer)).apply(this, arguments));\n  }\n\n  _createClass(GridCellLayer, [{\n    key: 'getShaders',\n\n    /**\n     * A generic GridLayer that takes latitude longitude delta of cells as a uniform\n     * and the min lat lng of cells. grid can be 3d when pass in a height\n     * and set enable3d to true\n     *\n     * @param {array} props.data -\n     * @param {boolean} props.extruded - enable grid elevation\n     * @param {number} props.cellSize - grid cell size in meters\n     * @param {function} props.getPosition - position accessor, returned as [minLng, minLat]\n     * @param {function} props.getElevation - elevation accessor\n     * @param {function} props.getColor - color accessor, returned as [r, g, b, a]\n     */\n    value: function getShaders() {\n      var shaderCache = this.context.shaderCache;\n      return enable64bitSupport(this.props) ? {\n        vs: vs64,\n        fs: fs,\n        modules: ['project64', 'lighting', 'picking'],\n        shaderCache: shaderCache\n      } : {\n        vs: vs,\n        fs: fs,\n        modules: ['lighting', 'picking'],\n        shaderCache: shaderCache\n      }; // 'project' module added by default.\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var attributeManager = this.state.attributeManager;\n      /* eslint-disable max-len */\n\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 4,\n          accessor: ['getPosition', 'getElevation'],\n          update: this.calculateInstancePositions\n        },\n        instanceColors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getColor',\n          update: this.calculateInstanceColors\n        }\n      });\n      /* eslint-enable max-len */\n    }\n  }, {\n    key: 'updateAttribute',\n    value: function updateAttribute(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var attributeManager = this.state.attributeManager;\n        attributeManager.invalidateAll();\n\n        if (props.fp64 && props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          attributeManager.addInstanced({\n            instancePositions64xyLow: {\n              size: 2,\n              accessor: 'getPosition',\n              update: this.calculateInstancePositions64xyLow\n            }\n          });\n        } else {\n          attributeManager.remove(['instancePositions64xyLow']);\n        }\n      }\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps,\n          changeFlags = _ref2.changeFlags;\n\n      _get(GridCellLayer.prototype.__proto__ || Object.getPrototypeOf(GridCellLayer.prototype), 'updateState', this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      }); // Re-generate model if geometry changed\n\n\n      if (props.fp64 !== oldProps.fp64) {\n        var gl = this.context.gl;\n        this.setState({\n          model: this._getModel(gl)\n        });\n      }\n\n      this.updateAttribute({\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      this.updateUniforms();\n    }\n  }, {\n    key: '_getModel',\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }, {\n    key: 'updateUniforms',\n    value: function updateUniforms() {\n      var _props = this.props,\n          opacity = _props.opacity,\n          extruded = _props.extruded,\n          elevationScale = _props.elevationScale,\n          coverage = _props.coverage,\n          lightSettings = _props.lightSettings;\n      var model = this.state.model;\n      model.setUniforms(Object.assign({}, {\n        extruded: extruded,\n        elevationScale: elevationScale,\n        opacity: opacity,\n        coverage: coverage\n      }, lightSettings));\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var viewport = this.context.viewport; // TODO - this should be a standard uniform in project package\n\n      var _viewport$getDistance = viewport.getDistanceScales(),\n          pixelsPerMeter = _viewport$getDistance.pixelsPerMeter; // cellSize needs to be updated on every draw call\n      // because it is based on viewport\n\n\n      _get(GridCellLayer.prototype.__proto__ || Object.getPrototypeOf(GridCellLayer.prototype), 'draw', this).call(this, {\n        uniforms: Object.assign({\n          cellSize: this.props.cellSize * pixelsPerMeter[0]\n        }, uniforms)\n      });\n    }\n  }, {\n    key: 'calculateInstancePositions',\n    value: function calculateInstancePositions(attribute) {\n      var _props2 = this.props,\n          data = _props2.data,\n          getPosition = _props2.getPosition,\n          getElevation = _props2.getElevation;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          var position = getPosition(object);\n          var elevation = getElevation(object) || 0;\n          value[i + 0] = position[0];\n          value[i + 1] = position[1];\n          value[i + 2] = 0;\n          value[i + 3] = elevation;\n          i += size;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstancePositions64xyLow',\n    value: function calculateInstancePositions64xyLow(attribute) {\n      var _props3 = this.props,\n          data = _props3.data,\n          getPosition = _props3.getPosition;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var point = _step2.value;\n          var position = getPosition(point);\n          value[i++] = fp64ify(position[0])[1];\n          value[i++] = fp64ify(position[1])[1];\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'calculateInstanceColors',\n    value: function calculateInstanceColors(attribute) {\n      var _props4 = this.props,\n          data = _props4.data,\n          getColor = _props4.getColor;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = 0;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = data[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var object = _step3.value;\n          var color = getColor(object) || DEFAULT_COLOR;\n          value[i + 0] = color[0];\n          value[i + 1] = color[1];\n          value[i + 2] = color[2];\n          value[i + 3] = Number.isFinite(color[3]) ? color[3] : DEFAULT_COLOR[3];\n          i += size;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }]);\n\n  return GridCellLayer;\n}(Layer);\n\nexport default GridCellLayer;\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}