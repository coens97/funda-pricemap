{"ast":null,"code":"function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport MathArray from './lib/math-array';\nimport { checkNumber } from './lib/common'; // gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n\n/* eslint-disable camelcase */\n\nimport quat_fromMat3 from 'gl-quat/fromMat3';\nimport quat_identity from 'gl-quat/identity';\nimport quat_length from 'gl-quat/length';\nimport quat_squaredLength from 'gl-quat/squaredLength';\nimport quat_dot from 'gl-quat/dot'; // import quat_getAxisAngle from 'gl-quat/getAxisAngle';\n\nimport quat_rotationTo from 'gl-quat/rotationTo';\nimport quat_add from 'gl-quat/add';\nimport quat_calculateW from 'gl-quat/calculateW';\nimport quat_conjugate from 'gl-quat/conjugate';\nimport quat_invert from 'gl-quat/invert';\nimport quat_lerp from 'gl-quat/lerp';\nimport quat_multiply from 'gl-quat/multiply';\nimport quat_normalize from 'gl-quat/normalize';\nimport quat_rotateX from 'gl-quat/rotateX';\nimport quat_rotateY from 'gl-quat/rotateY';\nimport quat_rotateZ from 'gl-quat/rotateZ';\nimport quat_scale from 'gl-quat/scale';\nimport quat_set from 'gl-quat/set';\nimport quat_setAxisAngle from 'gl-quat/setAxisAngle';\nimport quat_slerp from 'gl-quat/slerp';\nvar IDENTITY_QUATERNION = [0, 0, 0, 1];\nexport function validateQuaternion(q) {\n  return q.length === 4 && Number.isFinite(q[0]) && Number.isFinite(q[1]) && Number.isFinite(q[2]) && Number.isFinite(q[3]);\n}\n\nvar Quaternion =\n/*#__PURE__*/\nfunction (_MathArray) {\n  _inherits(Quaternion, _MathArray); // Creates a new identity quat\n\n\n  function Quaternion() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, Quaternion);\n\n    _this = _possibleConstructorReturn(this, (Quaternion.__proto__ || Object.getPrototypeOf(Quaternion)).call(this));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  } // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n\n\n  _createClass(Quaternion, [{\n    key: \"fromMatrix3\",\n    value: function fromMatrix3(m) {\n      quat_fromMat3(this, m);\n      return this.check();\n    } // Creates a new quat initialized with the given values\n\n  }, {\n    key: \"fromValues\",\n    value: function fromValues(x, y, z, w) {\n      return this.set(x, y, z, w);\n    } // Set a quat to the identity quaternion\n\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      quat_identity(this);\n      return this.check();\n    } // Getters/setters\n\n    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  }, {\n    key: \"length\",\n\n    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n    // Calculates the length of a quat\n    value: function length() {\n      return quat_length(this);\n    } // Calculates the squared length of a quat\n\n  }, {\n    key: \"squaredLength\",\n    value: function squaredLength(a) {\n      return quat_squaredLength(this);\n    } // Calculates the dot product of two quat's\n    // @return {Number}\n\n  }, {\n    key: \"dot\",\n    value: function dot(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.dot only takes one argument');\n      }\n\n      return quat_dot(this, a);\n    } // Gets the rotation axis and angle for a given quaternion.\n    // If a quaternion is created with setAxisAngle, this method will\n    // return the same values as providied in the original parameter\n    // list OR functionally equivalent values.\n    // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n    // is the same as the quaternion formed by [0, 0, 1] and 270.\n    // This method favors the latter.\n    // @return {{[x,y,z], Number}}\n    // getAxisAngle() {\n    //   const axis = [];\n    //   const angle = quat_getAxisAngle(axis, this);\n    //   return {axis, angle};\n    // }\n    // MODIFIERS\n    // Sets a quaternion to represent the shortest rotation from one vector\n    // to another. Both vectors are assumed to be unit length.\n\n  }, {\n    key: \"rotationTo\",\n    value: function rotationTo(vectorA, vectorB) {\n      quat_rotationTo(this, vectorA, vectorB);\n      return this.check();\n    } // Sets the specified quaternion with values corresponding to the given axes.\n    // Each axis is a vec3 and is expected to be unit length and perpendicular\n    // to all other specified axes.\n    // setAxes() {\n    //   Number\n    // }\n    // Performs a spherical linear interpolation with two control points\n    // sqlerp() {\n    //   Number;\n    // }\n    // Adds two quat's\n\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.add only takes one argument');\n      }\n\n      quat_add(this, a);\n      return this.check();\n    } // Calculates the W component of a quat from the X, Y, and Z components.\n    // Any existing W component will be ignored.\n\n  }, {\n    key: \"calculateW\",\n    value: function calculateW() {\n      quat_calculateW(this, this);\n      return this.check();\n    } // Calculates the conjugate of a quat If the quaternion is normalized,\n    // this function is faster than quat_inverse and produces the same result.\n\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      quat_conjugate(this, this);\n      return this.check();\n    } // Calculates the inverse of a quat\n\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      quat_invert(this, this);\n      return this.check();\n    } // Performs a linear interpolation between two quat's\n\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      quat_lerp(this, a, b, t);\n      return this.check();\n    } // Multiplies two quat's\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.multiply only takes one argument');\n      }\n\n      quat_multiply(this, this, b);\n      return this.check();\n    } // Normalize a quat\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      quat_normalize(this, this);\n      return this.check();\n    } // Rotates a quaternion by the given angle about the X axis\n\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(rad) {\n      quat_rotateX(this, this, rad);\n      return this.check();\n    } // Rotates a quaternion by the given angle about the Y axis\n\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(rad) {\n      quat_rotateY(this, this, rad);\n      return this.check();\n    } // Rotates a quaternion by the given angle about the Z axis\n\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(rad) {\n      quat_rotateZ(this, this, rad);\n      return this.check();\n    } // Scales a quat by a scalar number\n\n  }, {\n    key: \"scale\",\n    value: function scale(b) {\n      quat_scale(this, this, b);\n      return this.check();\n    } // Set the components of a quat to the given values\n\n  }, {\n    key: \"set\",\n    value: function set(i, j, k, l) {\n      quat_set(this, i, j, k, l);\n      return this.check();\n    } // Sets a quat from the given angle and rotation axis, then returns it.\n\n  }, {\n    key: \"setAxisAngle\",\n    value: function setAxisAngle(axis, rad) {\n      quat_setAxisAngle(this, axis, rad);\n      return this.check();\n    } // Performs a spherical linear interpolation between two quat\n\n  }, {\n    key: \"slerp\",\n    value: function slerp(_ref) {\n      var _ref$start = _ref.start,\n          start = _ref$start === void 0 ? IDENTITY_QUATERNION : _ref$start,\n          target = _ref.target,\n          ratio = _ref.ratio;\n      quat_slerp(this, start, target, ratio);\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Quaternion;\n}(MathArray);\n\nexport { Quaternion as default };","map":null,"metadata":{},"sourceType":"module"}