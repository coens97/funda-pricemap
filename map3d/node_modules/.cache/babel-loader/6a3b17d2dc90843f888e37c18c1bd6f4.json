{"ast":null,"code":"function _instanceof(left, right) {\n  return null != right && \"undefined\" != typeof Symbol && right[Symbol.hasInstance] ? right[Symbol.hasInstance](left) : left instanceof right;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [],\n      _n = !0,\n      _d = !1,\n      _e = void 0;\n\n  try {\n    for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0) {\n      ;\n    }\n  } catch (err) {\n    _d = !0, _e = err;\n  } finally {\n    try {\n      _n || null == _i[\"return\"] || _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _defineProperties(target, props) {\n  for (var descriptor, i = 0; i < props.length; i++) {\n    descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, \"value\" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;\n}\n\nimport WebMercatorViewport, { normalizeViewportProps } from \"viewport-mercator-project\";\nimport assert from \"./assert\";\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\nfunction clamp(value, min, max) {\n  return value < min ? min : value > max ? max : value;\n}\n\nvar MapState = function () {\n  function MapState() {\n    var _ref = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},\n        width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = void 0 === _ref$bearing ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = void 0 === _ref$pitch ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = void 0 === _ref$altitude ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = void 0 === _ref$maxZoom ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = void 0 === _ref$minZoom ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = void 0 === _ref$maxPitch ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = void 0 === _ref$minPitch ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n        transitionDuration = _ref.transitionDuration,\n        transitionEasing = _ref.transitionEasing,\n        transitionInterpolator = _ref.transitionInterpolator,\n        transitionInterruption = _ref.transitionInterruption,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, MapState), assert(_NumberisFinite(width), \"`width` must be supplied\"), assert(_NumberisFinite(height), \"`height` must be supplied\"), assert(_NumberisFinite(longitude), \"`longitude` must be supplied\"), assert(_NumberisFinite(latitude), \"`latitude` must be supplied\"), assert(_NumberisFinite(zoom), \"`zoom` must be supplied\"), this._viewportProps = this._applyConstraints({\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      transitionDuration: transitionDuration,\n      transitionEasing: transitionEasing,\n      transitionInterpolator: transitionInterpolator,\n      transitionInterruption: transitionInterruption\n    }), this._interactiveState = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n  }\n\n  var _NumberisFinite = Number.isFinite;\n  return _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedMapState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos,\n          startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) return this;\n\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n        startPanLngLat: startPanLngLat,\n        pos: pos\n      }),\n          _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n          longitude = _this$_calculateNewLn2[0],\n          latitude = _this$_calculateNewLn2[1];\n\n      return this._getUpdatedMapState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedMapState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      _ref4.pos;\n      return this._getUpdatedMapState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var _ref5$deltaScaleX = _ref5.deltaScaleX,\n          deltaScaleX = void 0 === _ref5$deltaScaleX ? 0 : _ref5$deltaScaleX,\n          _ref5$deltaScaleY = _ref5.deltaScaleY,\n          deltaScaleY = void 0 === _ref5$deltaScaleY ? 0 : _ref5$deltaScaleY,\n          _this$_interactiveSta = this._interactiveState,\n          startBearing = _this$_interactiveSta.startBearing,\n          startPitch = _this$_interactiveSta.startPitch;\n      if (!_NumberisFinite(startBearing) || !_NumberisFinite(startPitch)) return this;\n\n      var _this$_calculateNewPi = this._calculateNewPitchAndBearing({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY,\n        startBearing: startBearing,\n        startPitch: startPitch\n      }),\n          pitch = _this$_calculateNewPi.pitch,\n          bearing = _this$_calculateNewPi.bearing;\n\n      return this._getUpdatedMapState({\n        bearing: bearing,\n        pitch: pitch\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedMapState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedMapState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function value(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      assert(0 < scale, \"`scale` must be a positive number\");\n      var _this$_interactiveSta2 = this._interactiveState,\n          startZoom = _this$_interactiveSta2.startZoom,\n          startZoomLngLat = _this$_interactiveSta2.startZoomLngLat;\n      _NumberisFinite(startZoom) || (startZoom = this._viewportProps.zoom, startZoomLngLat = this._unproject(startPos) || this._unproject(pos)), assert(startZoomLngLat, \"`startZoomLngLat` prop is required for zoom behavior to calculate where to position the map.\");\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      }),\n          zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {\n        zoom: zoom\n      })),\n          _zoomedViewport$getLo = zoomedViewport.getLocationAtPoint({\n        lngLat: startZoomLngLat,\n        pos: pos\n      }),\n          _zoomedViewport$getLo2 = _slicedToArray(_zoomedViewport$getLo, 2),\n          longitude = _zoomedViewport$getLo2[0],\n          latitude = _zoomedViewport$getLo2[1];\n\n      return this._getUpdatedMapState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedMapState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"_getUpdatedMapState\",\n    value: function _getUpdatedMapState(newProps) {\n      return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      return props.pitch = clamp(pitch, minPitch, maxPitch), Object.assign(props, normalizeViewportProps(props)), props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n          pos = _ref8.pos,\n          viewport = new WebMercatorViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n          startZoom = _ref9.startZoom,\n          _this$_viewportProps = this._viewportProps,\n          maxZoom = _this$_viewportProps.maxZoom,\n          minZoom = _this$_viewportProps.minZoom,\n          zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n          deltaScaleY = _ref10.deltaScaleY,\n          startBearing = _ref10.startBearing,\n          startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps2 = this._viewportProps,\n          minPitch = _this$_viewportProps2.minPitch,\n          maxPitch = _this$_viewportProps2.maxPitch,\n          pitch = startPitch;\n      return 0 < deltaScaleY ? pitch = startPitch + deltaScaleY * (maxPitch - startPitch) : 0 > deltaScaleY && (pitch = startPitch - deltaScaleY * (minPitch - startPitch)), {\n        pitch: pitch,\n        bearing: startBearing + 180 * deltaScaleX\n      };\n    }\n  }]), MapState;\n}();\n\nexport { MapState as default };","map":null,"metadata":{},"sourceType":"module"}