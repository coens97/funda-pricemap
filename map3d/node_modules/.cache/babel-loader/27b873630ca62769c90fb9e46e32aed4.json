{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from './autobind';\nimport WebGLRenderer from './webgl-renderer';\nimport { LayerManager, Layer } from '../lib';\nimport { EffectManager, Effect } from '../experimental';\nimport { GL, setParameters } from 'luma.gl';\nimport { Viewport, WebMercatorViewport } from '../lib/viewports';\nimport EventManager from '../utils/events/event-manager';\n\nfunction noop() {}\n\nvar propTypes = {\n  id: PropTypes.string,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  layers: PropTypes.arrayOf(PropTypes.instanceOf(Layer)).isRequired,\n  effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n  gl: PropTypes.object,\n  debug: PropTypes.bool,\n  pickingRadius: PropTypes.number,\n  viewport: PropTypes.instanceOf(Viewport),\n  onWebGLInitialized: PropTypes.func,\n  initWebGLParameters: PropTypes.bool,\n  onAfterRender: PropTypes.func,\n  onLayerClick: PropTypes.func,\n  onLayerHover: PropTypes.func\n};\nvar defaultProps = {\n  id: 'deckgl-overlay',\n  debug: false,\n  pickingRadius: 0,\n  gl: null,\n  effects: [],\n  onWebGLInitialized: noop,\n  initWebGLParameters: false,\n  onAfterRender: noop,\n  onLayerClick: null,\n  onLayerHover: null\n};\n\nvar DeckGL = function (_React$Component) {\n  _inherits(DeckGL, _React$Component);\n\n  function DeckGL(props) {\n    _classCallCheck(this, DeckGL);\n\n    var _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));\n\n    _this.state = {};\n    _this.needsRedraw = true;\n    _this.layerManager = null;\n    _this.effectManager = null;\n    autobind(_this);\n    return _this;\n  }\n\n  _createClass(DeckGL, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this._updateLayers(nextProps);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.layerManager) {\n        this.layerManager.finalize();\n      }\n    }\n    /* Public API */\n\n  }, {\n    key: 'queryObject',\n    value: function queryObject(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          _ref$radius = _ref.radius,\n          radius = _ref$radius === undefined ? 0 : _ref$radius,\n          _ref$layerIds = _ref.layerIds,\n          layerIds = _ref$layerIds === undefined ? null : _ref$layerIds;\n      var selectedInfos = this.layerManager.pickLayer({\n        x: x,\n        y: y,\n        radius: radius,\n        layerIds: layerIds,\n        mode: 'query'\n      });\n      return selectedInfos.length ? selectedInfos[0] : null;\n    }\n  }, {\n    key: 'queryVisibleObjects',\n    value: function queryVisibleObjects(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          _ref2$width = _ref2.width,\n          width = _ref2$width === undefined ? 1 : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === undefined ? 1 : _ref2$height,\n          _ref2$layerIds = _ref2.layerIds,\n          layerIds = _ref2$layerIds === undefined ? null : _ref2$layerIds;\n      return this.layerManager.queryLayer({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        layerIds: layerIds\n      });\n    }\n  }, {\n    key: '_updateLayers',\n    value: function _updateLayers(nextProps) {\n      var width = nextProps.width,\n          height = nextProps.height,\n          latitude = nextProps.latitude,\n          longitude = nextProps.longitude,\n          zoom = nextProps.zoom,\n          pitch = nextProps.pitch,\n          bearing = nextProps.bearing,\n          altitude = nextProps.altitude,\n          pickingRadius = nextProps.pickingRadius,\n          onLayerClick = nextProps.onLayerClick,\n          onLayerHover = nextProps.onLayerHover;\n      this.layerManager.setEventHandlingParameters({\n        pickingRadius: pickingRadius,\n        onLayerClick: onLayerClick,\n        onLayerHover: onLayerHover\n      }); // If Viewport is not supplied, create one from mercator props\n\n      var viewport = nextProps.viewport;\n      viewport = viewport || new WebMercatorViewport({\n        width: width,\n        height: height,\n        latitude: latitude,\n        longitude: longitude,\n        zoom: zoom,\n        pitch: pitch,\n        bearing: bearing,\n        altitude: altitude\n      });\n\n      if (this.layerManager) {\n        this.layerManager.setViewport(viewport).updateLayers({\n          newLayers: nextProps.layers\n        });\n      }\n    }\n  }, {\n    key: '_onRendererInitialized',\n    value: function _onRendererInitialized(_ref3) {\n      var gl = _ref3.gl,\n          canvas = _ref3.canvas;\n      setParameters(gl, {\n        blend: true,\n        blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA],\n        polygonOffsetFill: true\n      }); // TODO - these will be set by default starting from next major release\n\n      if (this.props.initWebGLParameters) {\n        setParameters(gl, {\n          depthTest: true,\n          depthFunc: GL.LEQUAL\n        });\n      }\n\n      var props = this.props;\n      props.onWebGLInitialized(gl); // Note: avoid React setState due GL animation loop / setState timing issue\n\n      this.layerManager = new LayerManager({\n        gl: gl\n      });\n      this.layerManager.initEventHandling(new EventManager(canvas));\n      this.effectManager = new EffectManager({\n        gl: gl,\n        layerManager: this.layerManager\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = props.effects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var effect = _step.value;\n          this.effectManager.addEffect(effect);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this._updateLayers(props);\n    }\n  }, {\n    key: '_onRenderFrame',\n    value: function _onRenderFrame(_ref4) {\n      var gl = _ref4.gl;\n      var redraw = this.layerManager.needsRedraw({\n        clearRedrawFlags: true\n      });\n\n      if (!redraw) {\n        return;\n      } // clear depth and color buffers\n\n\n      gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n      this.effectManager.preDraw();\n      this.layerManager.drawLayers({\n        pass: 'to screen'\n      });\n      this.effectManager.draw();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height,\n          gl = _props.gl,\n          debug = _props.debug;\n      return createElement(WebGLRenderer, Object.assign({}, this.props, {\n        width: width,\n        height: height,\n        // NOTE: Add 'useDevicePixelRatio' to 'this.props' and also pass it down to\n        // to modules where window.devicePixelRatio is used.\n        useDevicePixelRatio: true,\n        gl: gl,\n        debug: debug,\n        onRendererInitialized: this._onRendererInitialized,\n        onNeedRedraw: this._onNeedRedraw,\n        onRenderFrame: this._onRenderFrame\n      }));\n    }\n  }]);\n\n  return DeckGL;\n}(React.Component);\n\nexport default DeckGL;\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}