{"ast":null,"code":"import ShaderModuleRegistry from './shader-module-registry';\nvar shaderModuleRegistry = new ShaderModuleRegistry();\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\n\nexport function setDefaultShaderModules(modules) {\n  shaderModuleRegistry.setDefaultShaderModules(modules);\n}\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\n\nexport function registerShaderModules(shaderModuleList) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ignoreMultipleRe = _ref.ignoreMultipleRegistrations,\n      ignoreMultipleRegistrations = _ref$ignoreMultipleRe === void 0 ? false : _ref$ignoreMultipleRe;\n\n  shaderModuleRegistry.registerShaderModules(shaderModuleList, {\n    ignoreMultipleRegistrations: ignoreMultipleRegistrations\n  });\n} // registers any supplied modules and returns a list of module names\n\nexport function resolveModules(modules) {\n  modules = modules.concat(shaderModuleRegistry.defaultShaderModules);\n  modules = shaderModuleRegistry.resolveModules(modules);\n  return getShaderDependencies(modules);\n} // Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\n\nexport function getShaderModule(moduleOrName) {\n  return shaderModuleRegistry.getShaderModule(moduleOrName);\n}\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\n\nfunction getShaderDependencies(modules) {\n  var moduleMap = {};\n  var moduleDepth = {};\n  getDependencyGraph({\n    modules: modules,\n    level: 0,\n    moduleMap: moduleMap,\n    moduleDepth: moduleDepth\n  }); // Return a reverse sort so that dependencies come before the modules that use them\n\n  return Object.keys(moduleDepth).sort(function (a, b) {\n    return moduleDepth[b] - moduleDepth[a];\n  }).map(function (name) {\n    return moduleMap[name];\n  });\n}\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\n\n\nfunction getDependencyGraph(_ref2) {\n  var modules = _ref2.modules,\n      level = _ref2.level,\n      moduleMap = _ref2.moduleMap,\n      moduleDepth = _ref2.moduleDepth;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  } // Update level on all current modules\n\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var module = _step.value;\n      moduleMap[module.name] = module;\n\n      if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n        moduleDepth[module.name] = level;\n      }\n    } // Recurse\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _module = _step2.value;\n\n      if (_module.dependencies) {\n        getDependencyGraph({\n          modules: _module.dependencies,\n          level: level + 1,\n          moduleMap: moduleMap,\n          moduleDepth: moduleDepth\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\nexport var TEST_EXPORTS = {\n  getShaderDependencies: getShaderDependencies,\n  getDependencyGraph: getDependencyGraph\n};","map":null,"metadata":{},"sourceType":"module"}