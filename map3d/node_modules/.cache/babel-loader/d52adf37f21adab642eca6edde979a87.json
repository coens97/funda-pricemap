{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; //\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport { Framebuffer } from '../webgl';\nimport { withParameters } from '../webgl-context';\n\nvar Pass =\n/*#__PURE__*/\nfunction () {\n  function Pass(gl, props) {\n    _classCallCheck(this, Pass);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? 'pass' : _props$id;\n    this.id = id; // id of this pass\n\n    this.gl = gl;\n    this.props = {\n      enabled: true,\n      screen: false,\n      swap: false\n    };\n    Object.assign(this.props, props);\n  }\n\n  _createClass(Pass, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      Object.assign(this.props, props);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderState, animationProps) {\n      var _this = this;\n\n      if (!this.props.enabled) {\n        return;\n      }\n\n      var gl = this.gl;\n      var renderParams = {\n        gl: gl,\n        outputBuffer: renderState.writeBuffer,\n        inputBuffer: renderState.readBuffer,\n        animationProps: animationProps,\n        swapBuffers: function swapBuffers() {\n          return renderState._swapFramebuffers();\n        }\n      };\n\n      if (this.props.screen) {\n        renderParams.inputBuffer = renderParams.outputBuffer;\n        renderParams.outputBuffer = Framebuffer.getDefaultFramebuffer(gl);\n      } else if (this.props.swap) {\n        renderParams.inputBuffer = renderState.writeBuffer;\n        renderParams.outputBuffer = renderState.readBuffer;\n      }\n\n      withParameters(gl, {\n        framebuffer: renderParams.outputBuffer\n      }, function () {\n        return _this._renderPass(renderParams);\n      });\n\n      if (this.props.debug) {\n        renderParams.outputBuffer.log(0, this.id);\n      }\n\n      if (this.props.swap) {\n        renderState._swapFramebuffers();\n      }\n    }\n    /**\n     * Renders the effect.\n     * This is an abstract method that should be overridden.\n     * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n     * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n     */\n\n  }, {\n    key: \"_renderPass\",\n    value: function _renderPass(_ref) {\n      // assert(false, 'Draw/render methods not implemented!');\n      var gl = _ref.gl,\n          inputBuffer = _ref.inputBuffer,\n          outputBuffer = _ref.outputBuffer,\n          animationProps = _ref.animationProps;\n    }\n  }]);\n\n  return Pass;\n}();\n\nexport { Pass as default };","map":null,"metadata":{},"sourceType":"module"}