{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport IconLayer from '../../icon-layer/icon-layer';\nimport vs from './multi-icon-layer-vertex.glsl';\nvar defaultProps = {\n  getShiftInQueue: function getShiftInQueue(x) {\n    return x.shift || 0;\n  },\n  getLengthOfQueue: function getLengthOfQueue(x) {\n    return x.len || 1;\n  },\n  // 1: left, 0: middle, -1: right\n  getAnchorX: function getAnchorX(x) {\n    return x.anchorX || 0;\n  },\n  // 1: top, 0: center, -1: bottom\n  getAnchorY: function getAnchorY(x) {\n    return x.anchorY || 0;\n  },\n  getPixelOffset: [0, 0]\n};\n\nvar MultiIconLayer =\n/*#__PURE__*/\nfunction (_IconLayer) {\n  _inherits(MultiIconLayer, _IconLayer);\n\n  function MultiIconLayer() {\n    _classCallCheck(this, MultiIconLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MultiIconLayer).apply(this, arguments));\n  }\n\n  _createClass(MultiIconLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return Object.assign({}, _get(_getPrototypeOf(MultiIconLayer.prototype), \"getShaders\", this).call(this), {\n        vs: vs\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"initializeState\", this).call(this);\n\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePixelOffset: {\n          size: 2,\n          transition: true,\n          accessor: 'getPixelOffset'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"updateState\", this).call(this, updateParams);\n\n      var changeFlags = updateParams.changeFlags;\n\n      if (changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.getAnchorX || changeFlags.updateTriggersChanged.getAnchorY)) {\n        this.getAttributeManager().invalidate('instanceOffsets');\n      }\n    }\n  }, {\n    key: \"calculateInstanceOffsets\",\n    value: function calculateInstanceOffsets(attribute) {\n      var _this$props = this.props,\n          data = _this$props.data,\n          iconMapping = _this$props.iconMapping,\n          getIcon = _this$props.getIcon,\n          getAnchorX = _this$props.getAnchorX,\n          getAnchorY = _this$props.getAnchorY,\n          getLengthOfQueue = _this$props.getLengthOfQueue,\n          getShiftInQueue = _this$props.getShiftInQueue;\n      var value = attribute.value;\n      var i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          var icon = getIcon(object);\n          var rect = iconMapping[icon] || {};\n          var len = getLengthOfQueue(object);\n          var shiftX = getShiftInQueue(object);\n          value[i++] = (getAnchorX(object) - 1) * len / 2 + rect.width / 2 + shiftX || 0;\n          value[i++] = rect.height / 2 * getAnchorY(object) || 0;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return MultiIconLayer;\n}(IconLayer);\n\nexport { MultiIconLayer as default };\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}