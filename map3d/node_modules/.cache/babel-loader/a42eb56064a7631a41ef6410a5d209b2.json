{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar NULL_PICKING_COLOR = new Uint8Array([0, 0, 0]); // Encodes an index as a Uint8Array([r, g, b]) format picking color\n\nexport function encodePickingColor(i) {\n  return [i + 1 & 255, i + 1 >> 8 & 255, i + 1 >> 16 & 255];\n} // Decodes a picking color in [r, g, b] format to an index\n\nexport function decodePickingColor(color) {\n  // assert(color instanceof Uint8Array);\n  var _color = _slicedToArray(color, 3),\n      i1 = _color[0],\n      i2 = _color[1],\n      i3 = _color[2]; // 1 was added to seperate from no selection\n\n\n  var index = i1 + i2 * 256 + i3 * 65536 - 1;\n  return index;\n} // Return picking color representing no item at that pixel\n\nexport function getNullPickingColor() {\n  return NULL_PICKING_COLOR;\n}","map":null,"metadata":{},"sourceType":"module"}