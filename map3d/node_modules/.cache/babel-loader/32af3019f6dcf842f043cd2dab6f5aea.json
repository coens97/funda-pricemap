{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME solid-polygon-layer-vertex-shader-64\\n\\nattribute vec3 positions;\\nattribute vec2 positions64xyLow;\\nattribute vec3 normals;\\nattribute vec4 colors;\\nattribute vec3 pickingColors;\\n\\nuniform float extruded;\\nuniform float elevationScale;\\nuniform float opacity;\\n\\nuniform float renderPickingBuffer;\\nuniform vec3 selectedPickingColor;\\n\\n// PICKING\\nuniform float pickingEnabled;\\nvarying vec4 vPickingColor;\\n\\nvoid main(void) {\\n  vec4 positions64xy = vec4(positions.x, positions64xyLow.x, positions.y, positions64xyLow.y);\\n\\n  vec2 projected_coord_xy[2];\\n  project_position_fp64(positions64xy, projected_coord_xy);\\n\\n  vec2 vertex_pos_modelspace[4];\\n  vertex_pos_modelspace[0] = projected_coord_xy[0];\\n  vertex_pos_modelspace[1] = projected_coord_xy[1];\\n  vertex_pos_modelspace[2] = vec2(project_scale(positions.z * elevationScale), 0.0);\\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\\n\\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\\n\\n  vec4 position_worldspace = vec4(\\n    vertex_pos_modelspace[0].x, vertex_pos_modelspace[1].x,\\n    vertex_pos_modelspace[2].x, vertex_pos_modelspace[3].x);\\n\\n  if (pickingEnabled < 0.5) {\\n    float lightWeight = 1.0;\\n\\n    if (extruded > 0.5) {\\n      lightWeight = getLightWeight(\\n        position_worldspace.xyz, // the w component is always 1.0\\n        normals\\n      );\\n    }\\n\\n    vec3 lightWeightedColor = lightWeight * colors.rgb;\\n    vec4 color = vec4(lightWeightedColor, colors.a * opacity) / 255.0;\\n\\n    vPickingColor = color;\\n\\n  } else {\\n    vPickingColor = vec4(pickingColors.rgb / 255.0, 1.0);\\n  }\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}