{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/; // Takes a number or a string of formats `50%`, `33.3%` or `200px`\n\nexport function parsePosition(value) {\n  switch (_typeof(value)) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n\n    case 'string':\n      var match = value.match(PERCENT_OR_PIXELS_REGEX);\n\n      if (match && match.length >= 3) {\n        var relative = match[2] === '%';\n        var position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative: relative\n        };\n      }\n\n    // fallthrough\n\n    default:\n      // eslint-disable-line\n      throw new Error(\"Could not parse position string \".concat(value));\n  }\n}\nexport function getPosition(position, extent) {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}","map":null,"metadata":{},"sourceType":"module"}