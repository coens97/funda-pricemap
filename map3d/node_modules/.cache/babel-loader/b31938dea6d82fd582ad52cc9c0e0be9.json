{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport GL from './api';\nimport { assertWebGL2Context } from './context';\nimport Resource from './resource';\nimport queryManager from './helpers/query-manager';\n\nvar FenceSync =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(FenceSync, _Resource);\n  /*\n   * @class\n   * @param {WebGL2RenderingContext} gl\n   */\n\n\n  function FenceSync(gl, opts) {\n    _classCallCheck(this, FenceSync);\n\n    assertWebGL2Context(gl); // query manager needs a promise field\n\n    var _this = _possibleConstructorReturn(this, (FenceSync.__proto__ || Object.getPrototypeOf(FenceSync)).call(this, gl, opts));\n\n    _this.promise = null;\n    Object.seal(_this);\n    return _this;\n  }\n  /**\n   * The method is a no-op in the absence of the possibility of\n   * synchronizing between multiple GL contexts.\n   * Prevent commands from being added to GPU command queue.\n   * Note: commands can still be buffered in driver.\n   *\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {Sync} status\n   */\n\n\n  _createClass(FenceSync, [{\n    key: 'wait',\n    value: function wait() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$flags = _ref.flags,\n          flags = _ref$flags === undefined ? 0 : _ref$flags,\n          _ref$timeout = _ref.timeout,\n          timeout = _ref$timeout === undefined ? GL.TIMEOUT_IGNORED : _ref$timeout;\n\n      this.gl.waitSync(this.handle, flags, timeout);\n      return this;\n    }\n    /**\n     * Block all CPU operations until fence is signalled\n     * @param {GLbitfield} flags\n     * @param {GLint64} timeout\n     * @return {GLenum} result\n     */\n\n  }, {\n    key: 'clientWait',\n    value: function clientWait(_ref2) {\n      var _ref2$flags = _ref2.flags,\n          flags = _ref2$flags === undefined ? GL.SYNC_FLUSH_COMMANDS_BIT : _ref2$flags,\n          timeout = _ref2.timeout;\n      var result = this.gl.clientWaitSync(this.handle, flags, timeout); // TODO - map to boolean?\n\n      switch (result) {\n        case GL.ALREADY_SIGNALED:\n          // Indicates that sync object was signaled when this method was called.\n          break;\n\n        case GL.TIMEOUT_EXPIRED:\n          // Indicates that timeout time passed, sync object did not become signaled\n          break;\n\n        case GL.CONDITION_SATISFIED:\n          // Indicates that sync object was signaled before timeout expired.\n          break;\n\n        case GL.WAIT_FAILED:\n          // Indicates that an error occurred during execution.\n          break;\n\n        default:\n      }\n\n      return result;\n    }\n  }, {\n    key: 'cancel',\n    value: function cancel() {\n      queryManager.cancelQuery(this);\n    }\n  }, {\n    key: 'isSignaled',\n    value: function isSignaled() {\n      return this.getParameter(GL.SYNC_STATUS) === GL.SIGNALED;\n    } // TODO - Query manager needs these?\n\n  }, {\n    key: 'isResultAvailable',\n    value: function isResultAvailable() {\n      return this.isSignaled();\n    }\n  }, {\n    key: 'getResult',\n    value: function getResult() {\n      return this.isSignaled();\n    }\n  }, {\n    key: 'getParameter',\n    value: function getParameter(pname) {\n      return this.gl.getSyncParameter(this.handle, pname);\n    } // PRIVATE METHODS\n\n  }, {\n    key: '_createHandle',\n    value: function _createHandle() {\n      return this.gl.fenceSync(GL.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    }\n  }, {\n    key: '_deleteHandle',\n    value: function _deleteHandle() {\n      queryManager.deleteQuery(this);\n      this.gl.deleteSync(this.handle);\n    }\n  }]);\n\n  return FenceSync;\n}(Resource);\n\nexport default FenceSync;","map":null,"metadata":{},"sourceType":"module"}