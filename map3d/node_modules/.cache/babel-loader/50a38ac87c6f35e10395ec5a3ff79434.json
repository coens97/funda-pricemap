{"ast":null,"code":"function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport Geometry from './geometry';\nvar INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\n\nvar TruncatedConeGeometry =\n/*#__PURE__*/\nfunction (_Geometry) {\n  _inherits(TruncatedConeGeometry, _Geometry); // Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n  // copyright 2011 Google Inc. new BSD License\n  // (http://www.opensource.org/licenses/bsd-license.php).\n\n  /* eslint-disable max-statements, complexity */\n\n\n  function TruncatedConeGeometry() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TruncatedConeGeometry);\n\n    var _opts$bottomRadius = opts.bottomRadius,\n        bottomRadius = _opts$bottomRadius === void 0 ? 0 : _opts$bottomRadius,\n        _opts$topRadius = opts.topRadius,\n        topRadius = _opts$topRadius === void 0 ? 0 : _opts$topRadius,\n        _opts$height = opts.height,\n        height = _opts$height === void 0 ? 1 : _opts$height,\n        _opts$nradial = opts.nradial,\n        nradial = _opts$nradial === void 0 ? 10 : _opts$nradial,\n        _opts$nvertical = opts.nvertical,\n        nvertical = _opts$nvertical === void 0 ? 10 : _opts$nvertical,\n        _opts$verticalAxis = opts.verticalAxis,\n        verticalAxis = _opts$verticalAxis === void 0 ? 'y' : _opts$verticalAxis,\n        _opts$topCap = opts.topCap,\n        topCap = _opts$topCap === void 0 ? false : _opts$topCap,\n        _opts$bottomCap = opts.bottomCap,\n        bottomCap = _opts$bottomCap === void 0 ? false : _opts$bottomCap;\n    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n    var numVertices = (nradial + 1) * (nvertical + 1 + extra);\n    var slant = Math.atan2(bottomRadius - topRadius, height);\n    var msin = Math.sin;\n    var mcos = Math.cos;\n    var mpi = Math.PI;\n    var cosSlant = mcos(slant);\n    var sinSlant = msin(slant);\n    var start = topCap ? -2 : 0;\n    var end = nvertical + (bottomCap ? 2 : 0);\n    var vertsAroundEdge = nradial + 1;\n    var positions = new Float32Array(numVertices * 3);\n    var normals = new Float32Array(numVertices * 3);\n    var texCoords = new Float32Array(numVertices * 2);\n    var indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n    var indexOffset = INDEX_OFFSETS[verticalAxis];\n    var i3 = 0;\n    var i2 = 0;\n\n    for (var i = start; i <= end; i++) {\n      var v = i / nvertical;\n      var y = height * v;\n      var ringRadius = void 0;\n\n      if (i < 0) {\n        y = 0;\n        v = 1;\n        ringRadius = bottomRadius;\n      } else if (i > nvertical) {\n        y = height;\n        v = 1;\n        ringRadius = topRadius;\n      } else {\n        ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);\n      }\n\n      if (i === -2 || i === nvertical + 2) {\n        ringRadius = 0;\n        v = 0;\n      }\n\n      y -= height / 2;\n\n      for (var j = 0; j < vertsAroundEdge; j++) {\n        var sin = msin(j * mpi * 2 / nradial);\n        var cos = mcos(j * mpi * 2 / nradial);\n        positions[i3 + indexOffset[0]] = sin * ringRadius;\n        positions[i3 + indexOffset[1]] = y;\n        positions[i3 + indexOffset[2]] = cos * ringRadius;\n        normals[i3 + indexOffset[0]] = i < 0 || i > nvertical ? 0 : sin * cosSlant;\n        normals[i3 + indexOffset[1]] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;\n        normals[i3 + indexOffset[2]] = i < 0 || i > nvertical ? 0 : cos * cosSlant;\n        texCoords[i2 + 0] = j / nradial;\n        texCoords[i2 + 1] = v;\n        i2 += 2;\n        i3 += 3;\n      }\n    }\n\n    for (var _i = 0; _i < nvertical + extra; _i++) {\n      for (var _j = 0; _j < nradial; _j++) {\n        var index = (_i * nradial + _j) * 6;\n        indices[index + 0] = vertsAroundEdge * (_i + 0) + 0 + _j;\n        indices[index + 1] = vertsAroundEdge * (_i + 0) + 1 + _j;\n        indices[index + 2] = vertsAroundEdge * (_i + 1) + 1 + _j;\n        indices[index + 3] = vertsAroundEdge * (_i + 0) + 0 + _j;\n        indices[index + 4] = vertsAroundEdge * (_i + 1) + 1 + _j;\n        indices[index + 5] = vertsAroundEdge * (_i + 1) + 0 + _j;\n      }\n    }\n\n    return _possibleConstructorReturn(this, (TruncatedConeGeometry.__proto__ || Object.getPrototypeOf(TruncatedConeGeometry)).call(this, Object.assign({}, opts, {\n      attributes: {\n        positions: positions,\n        normals: normals,\n        texCoords: texCoords,\n        indices: indices\n      }\n    })));\n  }\n\n  return TruncatedConeGeometry;\n}(Geometry);\n\nexport { TruncatedConeGeometry as default };","map":null,"metadata":{},"sourceType":"module"}