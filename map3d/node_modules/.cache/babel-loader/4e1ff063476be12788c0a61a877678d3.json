{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\"; //\n// A pass that renders a given scene directly on screen or into the read buffer\n// for further processing.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport Pass from './pass';\nimport pickModels from '../core/pick-models';\n\nvar PickingPass =\n/*#__PURE__*/\nfunction (_Pass) {\n  _inherits(PickingPass, _Pass);\n\n  function PickingPass(gl) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, PickingPass);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PickingPass).call(this, gl, Object.assign({\n      id: 'picking-pass'\n    }, props)));\n  }\n\n  _createClass(PickingPass, [{\n    key: \"_renderPass\",\n    value: function _renderPass(_ref) {\n      var gl = _ref.gl,\n          inputBuffer = _ref.inputBuffer,\n          animationProps = _ref.animationProps;\n      var props = this.props;\n      var pickPosition = animationProps ? animationProps._mousePosition : props.mousePosition;\n      var useDevicePixels = animationProps ? animationProps.useDevicePixels : props.useDevicePixels; // Clear picking position if not available\n\n      if (!pickPosition) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.props.models[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var model = _step.value;\n            model.updateModuleSettings({\n              pickingSelectedColor: null\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return;\n      }\n\n      var pickInfo = pickModels(gl, {\n        models: this.props.models,\n        position: pickPosition,\n        useDevicePixels: useDevicePixels,\n        framebuffer: inputBuffer // Use as temporary frame buffer\n\n      }); // Highlight it\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.props.models[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _model = _step2.value;\n\n          if (pickInfo && pickInfo.model === _model) {\n            var pickingSelectedColor = pickInfo && pickInfo.color || null;\n\n            _model.updateModuleSettings({\n              pickingSelectedColor: pickingSelectedColor\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }]);\n\n  return PickingPass;\n}(Pass);\n\nexport { PickingPass as default };","map":null,"metadata":{},"sourceType":"module"}