{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { Layer } from '../../../lib';\nimport { get, flatten, log } from '../../../lib/utils';\nimport { extractPolygons } from './geojson';\nimport { GL, Model, Geometry } from 'luma.gl';\nimport earcut from 'earcut';\nimport choroplethVertex from './choropleth-layer-vertex.glsl';\nimport choroplethFragment from './choropleth-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 255, 255];\nvar defaultProps = {\n  getColor: function getColor(feature) {\n    return get(feature, 'properties.color');\n  },\n  drawContour: false,\n  strokeWidth: 1\n};\n\nvar ChoroplethLayer = function (_Layer) {\n  _inherits(ChoroplethLayer, _Layer);\n\n  function ChoroplethLayer(props) {\n    _classCallCheck(this, ChoroplethLayer);\n\n    var _this = _possibleConstructorReturn(this, (ChoroplethLayer.__proto__ || Object.getPrototypeOf(ChoroplethLayer)).call(this, props));\n\n    log.once('ChoroplethLayer is deprecated. Consider using GeoJsonLayer instead');\n    return _this;\n  }\n\n  _createClass(ChoroplethLayer, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return {\n        vs: choroplethVertex,\n        fs: choroplethFragment\n      };\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.state.attributeManager;\n      attributeManager.add({\n        // Primtive attributes\n        indices: {\n          size: 1,\n          update: this.calculateIndices,\n          isIndexed: true\n        },\n        positions: {\n          size: 3,\n          update: this.calculatePositions\n        },\n        colors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          update: this.calculateColors\n        },\n        // Instanced attributes\n        pickingColors: {\n          size: 3,\n          type: GL.UNSIGNED_BYTE,\n          update: this.calculatePickingColors,\n          noAlloc: true\n        }\n      });\n      var IndexType = gl.getExtension('OES_element_index_uint') ? Uint32Array : Uint16Array;\n      this.setState({\n        model: this.getModel(gl),\n        numInstances: 0,\n        IndexType: IndexType\n      });\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var attributeManager = this.state.attributeManager;\n\n      if (changeFlags.dataChanged) {\n        this.state.choropleths = extractPolygons(props.data);\n        attributeManager.invalidateAll();\n      }\n\n      if (props.drawContour !== oldProps.drawContour) {\n        this.state.model.geometry.drawMode = props.drawContour ? GL.LINES : GL.TRIANGLES;\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var gl = this.context.gl;\n      var lineWidth = this.screenToDevicePixels(this.props.strokeWidth);\n      gl.lineWidth(lineWidth);\n      this.state.model.render(uniforms); // Setting line width back to 1 is here to workaround a Google Chrome bug\n      // gl.clear() and gl.isEnabled() will return GL_INVALID_VALUE even with\n      // correct parameter\n      // This is not happening on Safari and Firefox\n\n      gl.lineWidth(1.0);\n    }\n  }, {\n    key: 'getPickingInfo',\n    value: function getPickingInfo(opts) {\n      var info = _get(ChoroplethLayer.prototype.__proto__ || Object.getPrototypeOf(ChoroplethLayer.prototype), 'getPickingInfo', this).call(this, opts);\n\n      var index = this.decodePickingColor(info.color);\n      var feature = index >= 0 ? get(this.props.data, ['features', index]) : null;\n      info.feature = feature;\n      info.object = feature;\n      return info;\n    }\n  }, {\n    key: 'getModel',\n    value: function getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: this.props.drawContour ? GL.LINES : GL.TRIANGLES\n        }),\n        vertexCount: 0,\n        isIndexed: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }, {\n    key: 'calculateIndices',\n    value: function calculateIndices(attribute) {\n      var _this2 = this; // adjust index offset for multiple choropleths\n\n\n      var offsets = this.state.choropleths.reduce(function (acc, choropleth) {\n        return [].concat(_toConsumableArray(acc), [acc[acc.length - 1] + choropleth.reduce(function (count, polygon) {\n          return count + polygon.length;\n        }, 0)]);\n      }, [0]);\n      var IndexType = this.state.IndexType;\n\n      if (IndexType === Uint16Array && offsets[offsets.length - 1] > 65535) {\n        throw new Error('Vertex count exceeds browser\\'s limit');\n      }\n\n      var indices = this.state.choropleths.map(function (choropleth, choroplethIndex) {\n        return _this2.props.drawContour ? // 1. get sequentially ordered indices of each choropleth contour\n        // 2. offset them by the number of indices in previous choropleths\n        calculateContourIndices(choropleth).map(function (index) {\n          return index + offsets[choroplethIndex];\n        }) : // 1. get triangulated indices for the internal areas\n        // 2. offset them by the number of indices in previous choropleths\n        calculateSurfaceIndices(choropleth).map(function (index) {\n          return index + offsets[choroplethIndex];\n        });\n      });\n      attribute.value = new IndexType(flatten(indices));\n      attribute.target = GL.ELEMENT_ARRAY_BUFFER;\n      this.state.model.setVertexCount(attribute.value.length / attribute.size);\n    }\n  }, {\n    key: 'calculatePositions',\n    value: function calculatePositions(attribute) {\n      var vertices = flatten(this.state.choropleths);\n      attribute.value = new Float32Array(vertices);\n    }\n  }, {\n    key: 'calculateColors',\n    value: function calculateColors(attribute) {\n      var _props = this.props,\n          data = _props.data,\n          getColor = _props.getColor;\n      var features = get(data, 'features');\n      var colors = this.state.choropleths.map(function (choropleth, choroplethIndex) {\n        var feature = get(features, choropleth.featureIndex);\n        var color = getColor(feature) || DEFAULT_COLOR; // Ensure alpha is set\n\n        if (isNaN(color[3])) {\n          color[3] = DEFAULT_COLOR[3];\n        }\n\n        return choropleth.map(function (polygon) {\n          return polygon.map(function (vertex) {\n            return color;\n          });\n        });\n      });\n      attribute.value = new Uint8Array(flatten(colors));\n    } // Override the default picking colors calculation\n\n  }, {\n    key: 'calculatePickingColors',\n    value: function calculatePickingColors(attribute) {\n      var _this3 = this;\n\n      var colors = this.state.choropleths.map(function (choropleth, choroplethIndex) {\n        var featureIndex = choropleth.featureIndex;\n        var color = _this3.props.drawContour ? [0, 0, 0] : [(featureIndex + 1) % 256, Math.floor((featureIndex + 1) / 256) % 256, Math.floor((featureIndex + 1) / 256 / 256) % 256];\n        return choropleth.map(function (polygon) {\n          return polygon.map(function (vertex) {\n            return color;\n          });\n        });\n      });\n      attribute.value = new Uint8Array(flatten(colors));\n    }\n  }]);\n\n  return ChoroplethLayer;\n}(Layer);\n\nexport default ChoroplethLayer;\nChoroplethLayer.layerName = 'ChoroplethLayer';\nChoroplethLayer.defaultProps = defaultProps;\n/*\n * get vertex indices for drawing choropleth contour\n * @param {[Number,Number,Number][][]} choropleth\n * @returns {[Number]} indices\n */\n\nfunction calculateContourIndices(choropleth) {\n  var offset = 0;\n  return choropleth.reduce(function (acc, polygon) {\n    var numVertices = polygon.length; // use vertex pairs for gl.LINES => [0, 1, 1, 2, 2, ..., n-2, n-2, n-1]\n\n    var indices = [].concat(_toConsumableArray(acc), [offset]);\n\n    for (var i = 1; i < numVertices - 1; i++) {\n      indices.push(i + offset, i + offset);\n    }\n\n    indices.push(offset + numVertices - 1);\n    offset += numVertices;\n    return indices;\n  }, []);\n}\n/*\n * get vertex indices for drawing choropleth mesh\n * @param {[Number,Number,Number][][]} choropleth\n * @returns {[Number]} indices\n */\n\n\nfunction calculateSurfaceIndices(choropleth) {\n  var holes = null;\n\n  if (choropleth.length > 1) {\n    holes = choropleth.reduce(function (acc, polygon) {\n      return [].concat(_toConsumableArray(acc), [acc[acc.length - 1] + polygon.length]);\n    }, [0]).slice(1, choropleth.length);\n  }\n\n  return earcut(flatten(choropleth), holes, 3);\n}","map":null,"metadata":{},"sourceType":"module"}