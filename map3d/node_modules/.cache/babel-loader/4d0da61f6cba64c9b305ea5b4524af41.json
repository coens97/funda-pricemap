{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nimport GL from '../constants';\nimport { isWebGL2, assertWebGL2Context } from '../webgl-utils';\nimport { withParameters } from '../webgl-context/context-state';\nimport Texture from '../webgl/texture';\nimport Buffer from './buffer';\n\nvar Texture3D =\n/*#__PURE__*/\nfunction (_Texture) {\n  _inherits(Texture3D, _Texture);\n\n  _createClass(Texture3D, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n    /**\n     * @classdesc\n     * 3D WebGL Texture\n     * Note: Constructor will initialize your texture.\n     *\n     * @class\n     * @param {WebGLRenderingContext} gl - gl context\n     * @param {Image|ArrayBuffer|null} opts= - named options\n     * @param {Image|ArrayBuffer|null} opts.data= - buffer\n     * @param {GLint} width - width of texture\n     * @param {GLint} height - height of texture\n     */\n\n  }]);\n\n  function Texture3D(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Texture3D);\n\n    assertWebGL2Context(gl);\n    _this = _possibleConstructorReturn(this, (Texture3D.__proto__ || Object.getPrototypeOf(Texture3D)).call(this, gl, Object.assign({}, opts, {\n      target: opts.target || GL.TEXTURE_3D\n    })));\n    _this.width = null;\n    _this.height = null;\n    _this.depth = null;\n    Object.seal(_assertThisInitialized(_this));\n\n    _this.setImageData(opts);\n\n    if (opts.generateMipmap) {\n      _this.generateMipmap();\n    }\n\n    return _this;\n  }\n\n  _createClass(Texture3D, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.opts = Object.assign({}, this.opts, opts);\n      var _opts = this.opts,\n          pixels = _opts.pixels,\n          settings = _opts.settings;\n\n      if (settings) {\n        withParameters(settings, function () {\n          if (pixels) {\n            _this2.setImage3D(_this2.opts);\n          }\n        });\n        this.setParameters(opts);\n      }\n    } // WebGL2\n    // Image 3D copies from Typed Array or WebGLBuffer\n\n  }, {\n    key: \"setImage3D\",\n    value: function setImage3D(_ref) {\n      var _ref$level = _ref.level,\n          level = _ref$level === void 0 ? 0 : _ref$level,\n          _ref$internalformat = _ref.internalformat,\n          internalformat = _ref$internalformat === void 0 ? GL.RGBA : _ref$internalformat,\n          width = _ref.width,\n          height = _ref.height,\n          _ref$depth = _ref.depth,\n          depth = _ref$depth === void 0 ? 1 : _ref$depth,\n          _ref$border = _ref.border,\n          border = _ref$border === void 0 ? 0 : _ref$border,\n          format = _ref.format,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? GL.UNSIGNED_BYTE : _ref$type,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? 0 : _ref$offset,\n          pixels = _ref.pixels;\n\n      if (ArrayBuffer.isView(pixels)) {\n        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);\n        return;\n      }\n\n      if (_instanceof(pixels, Buffer)) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      }\n    }\n  }]);\n\n  return Texture3D;\n}(Texture);\n\nexport { Texture3D as default };","map":null,"metadata":{},"sourceType":"module"}