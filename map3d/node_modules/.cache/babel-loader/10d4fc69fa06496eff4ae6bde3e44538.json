{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport TruncatedConeGeometry from './truncated-cone-geometry';\n\nvar ConeGeometry =\n/*#__PURE__*/\nfunction (_TruncatedConeGeometr) {\n  _inherits(ConeGeometry, _TruncatedConeGeometr);\n\n  function ConeGeometry() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ConeGeometry);\n\n    var _opts$radius = opts.radius,\n        radius = _opts$radius === undefined ? 1 : _opts$radius,\n        _opts$cap = opts.cap,\n        cap = _opts$cap === undefined ? true : _opts$cap;\n    return _possibleConstructorReturn(this, (ConeGeometry.__proto__ || Object.getPrototypeOf(ConeGeometry)).call(this, Object.assign({}, opts, {\n      topRadius: 0,\n      topCap: Boolean(cap),\n      bottomCap: Boolean(cap),\n      bottomRadius: radius\n    })));\n  }\n\n  return ConeGeometry;\n}(TruncatedConeGeometry);\n\nexport default ConeGeometry;","map":null,"metadata":{},"sourceType":"module"}