{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { Vector3, clamp } from 'math.gl';\nvar MOVEMENT_SPEED = 1; // 1 meter per keyboard click\n\nvar ROTATION_STEP_DEGREES = 2;\n/* Helpers */\n\nfunction ensureFinite(value, fallbackValue) {\n  return Number.isFinite(value) ? value : fallbackValue;\n}\n\nvar FirstPersonState =\n/*#__PURE__*/\nfunction (_ViewState) {\n  _inherits(FirstPersonState, _ViewState);\n\n  function FirstPersonState(_ref) {\n    var _this;\n\n    var width = _ref.width,\n        height = _ref.height,\n        position = _ref.position,\n        bearing = _ref.bearing,\n        pitch = _ref.pitch,\n        longitude = _ref.longitude,\n        latitude = _ref.latitude,\n        zoom = _ref.zoom,\n        _ref$syncBearing = _ref.syncBearing,\n        syncBearing = _ref$syncBearing === void 0 ? true : _ref$syncBearing,\n        bounds = _ref.bounds,\n        startPanEventPosition = _ref.startPanEventPosition,\n        startPanPosition = _ref.startPanPosition,\n        startRotateCenter = _ref.startRotateCenter,\n        startRotateViewport = _ref.startRotateViewport,\n        startZoomPos = _ref.startZoomPos,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, FirstPersonState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonState).call(this, {\n      width: width,\n      height: height,\n      position: position,\n      bearing: bearing,\n      pitch: pitch,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom\n    }));\n    _this._interactiveState = {\n      startPanEventPosition: startPanEventPosition,\n      startPanPosition: startPanPosition,\n      startRotateCenter: startRotateCenter,\n      startRotateViewport: startRotateViewport,\n      startZoomPos: startZoomPos,\n      startZoom: startZoom\n    };\n    return _this;\n  }\n  /* Public API */\n\n\n  _createClass(FirstPersonState, [{\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n    /**\n     * Start panning\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      var _this$_viewportProps = this._viewportProps,\n          translationX = _this$_viewportProps.translationX,\n          translationY = _this$_viewportProps.translationY;\n      return this._getUpdatedState({\n        startPanPosition: [translationX, translationY],\n        startPanEventPosition: pos\n      });\n    }\n    /**\n     * Pan\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     */\n\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n      var startPanEventPosition = this._interactiveState.startPanEventPosition || startPos; // when the mouse starts dragging outside of this viewport, then drags over it.\n      // TODO - use interactionState flag instead\n\n      if (!startPanEventPosition) {\n        return this;\n      }\n\n      var _ref4 = this._interactiveState.startPanPosition || [],\n          _ref5 = _slicedToArray(_ref4, 2),\n          translationX = _ref5[0],\n          translationY = _ref5[1];\n\n      translationX = ensureFinite(translationX, this._viewportProps.translationX);\n      translationY = ensureFinite(translationY, this._viewportProps.translationY);\n      var deltaX = pos[0] - startPanEventPosition[0];\n      var deltaY = pos[1] - startPanEventPosition[1];\n      return this._getUpdatedState({\n        translationX: translationX + deltaX,\n        translationY: translationY - deltaY\n      });\n    }\n    /**\n     * End panning\n     * Must call if `panStart()` was called\n     */\n\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null,\n        startPanPos: null\n      });\n    }\n    /**\n     * Start rotating\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startRotateCenter: this._viewportProps.position,\n        startRotateViewport: this._viewportProps\n      });\n    }\n    /**\n     * Rotate\n     * @param {[Number, Number]} pos - position on screen where the pointer is\n     */\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref7) {\n      var deltaScaleX = _ref7.deltaScaleX,\n          deltaScaleY = _ref7.deltaScaleY; // when the mouse starts dragging outside of this viewport, then drags over it.\n      // TODO - use interactionState flag instead\n\n      if (!this._interactiveState.startRotateCenter) {\n        return this;\n      }\n\n      var _this$_viewportProps2 = this._viewportProps,\n          bearing = _this$_viewportProps2.bearing,\n          pitch = _this$_viewportProps2.pitch;\n      return this._getUpdatedState({\n        bearing: bearing + deltaScaleX * 10,\n        pitch: pitch - deltaScaleY * 10\n      });\n    }\n    /**\n     * End rotating\n     * Must call if `rotateStart()` was called\n     */\n\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotateCenter: null,\n        startRotateViewport: null\n      });\n    }\n    /**\n     * Start zooming\n     * @param {[Number, Number]} pos - position on screen where the pointer grabs\n     */\n\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref8) {\n      var pos = _ref8.pos;\n      return this._getUpdatedState({\n        startZoomPos: pos,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n    /**\n     * Zoom\n     * @param {[Number, Number]} pos - position on screen where the current center is\n     * @param {[Number, Number]} startPos - the center position at\n     *   the start of the operation. Must be supplied of `zoomStart()` was not called\n     * @param {Number} scale - a number between [0, 1] specifying the accumulated\n     *   relative scale.\n     */\n\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref9) {\n      var pos = _ref9.pos,\n          startPos = _ref9.startPos,\n          scale = _ref9.scale;\n      var _this$_viewportProps3 = this._viewportProps,\n          zoom = _this$_viewportProps3.zoom,\n          minZoom = _this$_viewportProps3.minZoom,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          width = _this$_viewportProps3.width,\n          height = _this$_viewportProps3.height,\n          translationX = _this$_viewportProps3.translationX,\n          translationY = _this$_viewportProps3.translationY;\n      var startZoomPos = this._interactiveState.startZoomPos || startPos || pos;\n      var newZoom = clamp(zoom * scale, minZoom, maxZoom);\n      var deltaX = pos[0] - startZoomPos[0];\n      var deltaY = pos[1] - startZoomPos[1]; // Zoom around the center position\n\n      var cx = startZoomPos[0] - width / 2;\n      var cy = height / 2 - startZoomPos[1];\n      /* eslint-disable no-unused-vars */\n\n      var newTranslationX = cx - (cx - translationX) * newZoom / zoom + deltaX;\n      var newTranslationY = cy - (cy - translationY) * newZoom / zoom - deltaY;\n      /* eslint-enable no-unused-vars */\n      // return this._getUpdatedState({\n      //   position\n      //   translationX: newTranslationX,\n      //   translationY: newTranslationY\n      // });\n      // TODO HACK\n\n      return newZoom / zoom < 1 ? this.moveBackward() : this.moveForward();\n    }\n    /**\n     * End zooming\n     * Must call if `zoomStart()` was called\n     */\n\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPos: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var bearing = this._viewportProps.bearing;\n      var newBearing = bearing - ROTATION_STEP_DEGREES;\n      return this._getUpdatedState({\n        bearing: newBearing\n      });\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var bearing = this._viewportProps.bearing;\n      var newBearing = bearing + ROTATION_STEP_DEGREES;\n      return this._getUpdatedState({\n        bearing: newBearing\n      });\n    }\n  }, {\n    key: \"moveForward\",\n    value: function moveForward() {\n      var position = this._viewportProps.position;\n      var direction = this.getDirection();\n      var delta = new Vector3(direction).normalize().scale(MOVEMENT_SPEED);\n      return this._getUpdatedState({\n        position: new Vector3(position).add(delta)\n      });\n    }\n  }, {\n    key: \"moveBackward\",\n    value: function moveBackward() {\n      var position = this._viewportProps.position;\n      var direction = this.getDirection();\n      var delta = new Vector3(direction).normalize().scale(-MOVEMENT_SPEED);\n      return this._getUpdatedState({\n        position: new Vector3(position).add(delta)\n      });\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var position = this._viewportProps.position;\n      var delta = [0, 0, 1];\n      return this._getUpdatedState({\n        position: new Vector3(position).add(delta)\n      });\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var position = this._viewportProps.position;\n      var delta = position[2] >= 1 ? [0, 0, -1] : [0, 0, 0];\n      return this._getUpdatedState({\n        position: new Vector3(position).add(delta)\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this._getUpdatedState({\n        zoom: this._viewportProps.zoom + 0.2\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this._getUpdatedState({\n        zoom: this._viewportProps.zoom - 0.2\n      });\n    }\n    /* Private methods */\n\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      // Update _viewportProps\n      return new FirstPersonState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }]);\n\n  return FirstPersonState;\n}(ViewState);\n\nvar FirstPersonController =\n/*#__PURE__*/\nfunction (_Controller) {\n  _inherits(FirstPersonController, _Controller);\n\n  function FirstPersonController(props) {\n    _classCallCheck(this, FirstPersonController);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonController).call(this, FirstPersonState, props));\n  }\n\n  return FirstPersonController;\n}(Controller);\n\nexport { FirstPersonController as default };","map":null,"metadata":{},"sourceType":"module"}