{"ast":null,"code":"import assert from 'assert'; // Resolve a WebGL enumeration name (returns itself if already a number)\n\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  } // If string converts to number, return number\n\n\n  var number = Number(name);\n\n  if (!isNaN(number)) {\n    return number;\n  } // Look up string, after removing any 'GL.' or 'gl.' prefix\n\n\n  name = name.replace(/^.*\\./, '');\n  var value = gl[name];\n  assert(value !== undefined, 'Accessing undefined constant GL.' + name);\n  return value;\n}\nexport function getKey(gl, value) {\n  value = Number(value);\n\n  for (var key in gl) {\n    if (gl[key] === value) {\n      return 'gl.' + key;\n    }\n  }\n\n  return String(value);\n}\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n\n  for (var key in gl) {\n    if (gl[key] === value) {\n      return 'gl.' + key;\n    }\n  }\n\n  return String(value);\n}","map":null,"metadata":{},"sourceType":"module"}