{"ast":null,"code":"function _instanceof(left, right) {\n  return null != right && \"undefined\" != typeof Symbol && right[Symbol.hasInstance] ? right[Symbol.hasInstance](left) : left instanceof right;\n}\n\nfunction _typeof(obj) {\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _defineProperties(target, props) {\n  for (var descriptor, i = 0; i < props.length; i++) {\n    descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, \"value\" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  return call && (\"object\" === _typeof(call) || \"function\" == typeof call) ? call : _assertThisInitialized(self);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" != typeof superClass && null !== superClass) throw new TypeError(\"Super expression must either be null or a function\");\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: !0,\n      configurable: !0\n    }\n  }), superClass && _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  return _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    return o.__proto__ = p, o;\n  }, _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return self;\n}\n\nimport { createElement } from \"react\";\nimport PropTypes from \"prop-types\";\nimport BaseControl from \"../components/base-control\";\nimport { window } from \"../utils/globals\";\n\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  redraw: PropTypes.func.isRequired\n}),\n    defaultProps = {\n  captureScroll: !1,\n  captureDrag: !1,\n  captureClick: !1,\n  captureDoubleClick: !1\n},\n    CanvasOverlay = function (_BaseControl) {\n  function CanvasOverlay(props) {\n    var _this;\n\n    return _classCallCheck(this, CanvasOverlay), _this = _possibleConstructorReturn(this, (CanvasOverlay.__proto__ || Object.getPrototypeOf(CanvasOverlay)).call(this, props)), _this._redraw = _this._redraw.bind(_assertThisInitialized(_this)), _this._canvasLoaded = _this._canvasLoaded.bind(_assertThisInitialized(_this)), _this;\n  }\n\n  return _inherits(CanvasOverlay, _BaseControl), _createClass(CanvasOverlay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._redraw();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._redraw();\n    }\n  }, {\n    key: \"_redraw\",\n    value: function _redraw() {\n      var pixelRatio = window.devicePixelRatio || 1,\n          canvas = this._canvas,\n          ctx = canvas.getContext(\"2d\");\n      ctx.save(), ctx.scale(pixelRatio, pixelRatio);\n      var _this$context = this.context,\n          viewport = _this$context.viewport,\n          isDragging = _this$context.isDragging;\n      this.props.redraw({\n        width: viewport.width,\n        height: viewport.height,\n        ctx: ctx,\n        isDragging: isDragging,\n        project: viewport.project.bind(viewport),\n        unproject: viewport.unproject.bind(viewport)\n      }), ctx.restore();\n    }\n  }, {\n    key: \"_canvasLoaded\",\n    value: function _canvasLoaded(ref) {\n      this._canvas = ref, this._onContainerLoad(ref);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pixelRatio = window.devicePixelRatio || 1,\n          _this$context$viewpor = this.context.viewport,\n          width = _this$context$viewpor.width,\n          height = _this$context$viewpor.height;\n      return createElement(\"canvas\", {\n        ref: this._canvasLoaded,\n        width: width * pixelRatio,\n        height: height * pixelRatio,\n        style: {\n          width: \"\".concat(width, \"px\"),\n          height: \"\".concat(height, \"px\"),\n          position: \"absolute\",\n          left: 0,\n          top: 0\n        }\n      });\n    }\n  }]), CanvasOverlay;\n}(BaseControl);\n\nexport { CanvasOverlay as default };\nCanvasOverlay.displayName = \"CanvasOverlay\", CanvasOverlay.propTypes = propTypes, CanvasOverlay.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}