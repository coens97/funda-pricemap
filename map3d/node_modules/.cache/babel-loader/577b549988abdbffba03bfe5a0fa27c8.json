{"ast":null,"code":"var vecDot = require('gl-vec3/dot');\n\nvar vecCross = require('gl-vec3/cross');\n\nvar vecLength = require('gl-vec3/length');\n\nvar vecNormalize = require('gl-vec3/normalize');\n\nvar quatNormalize = require('./normalize');\n\nvar quatAxisAngle = require('./setAxisAngle');\n\nmodule.exports = rotationTo;\nvar tmpvec3 = [0, 0, 0];\nvar xUnitVec3 = [1, 0, 0];\nvar yUnitVec3 = [0, 1, 0];\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\n\nfunction rotationTo(out, a, b) {\n  var dot = vecDot(a, b);\n\n  if (dot < -0.999999) {\n    vecCross(tmpvec3, xUnitVec3, a);\n\n    if (vecLength(tmpvec3) < 0.000001) {\n      vecCross(tmpvec3, yUnitVec3, a);\n    }\n\n    vecNormalize(tmpvec3, tmpvec3);\n    quatAxisAngle(out, tmpvec3, Math.PI);\n    return out;\n  } else if (dot > 0.999999) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  } else {\n    vecCross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n    return quatNormalize(out, out);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}