{"ast":null,"code":"/* eslint-disable no-console */\n\n/* global console */\nvar cache = {};\nvar _log = {\n  priority: 0,\n  table: function table(priority, _table) {\n    if (priority <= _log.priority && _table) {\n      console.table(_table);\n    }\n  },\n  log: function log(priority, arg) {\n    if (priority <= _log.priority) {\n      var _console;\n\n      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      (_console = console).debug.apply(_console, ['luma.gl: ' + arg].concat(args));\n    }\n  },\n  info: function info(priority, arg) {\n    if (priority <= _log.priority) {\n      var _console2;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      (_console2 = console).log.apply(_console2, ['luma.gl: ' + arg].concat(args));\n    }\n  },\n  once: function once(priority, arg) {\n    if (!cache[arg]) {\n      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        args[_key3 - 2] = arguments[_key3];\n      }\n\n      _log.log.apply(_log, [priority, arg].concat(args));\n    }\n\n    cache[arg] = true;\n  },\n  warn: function warn(priority, arg) {\n    if (priority <= _log.priority && !cache[arg]) {\n      var _console3;\n\n      for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n        args[_key4 - 2] = arguments[_key4];\n      }\n\n      (_console3 = console).warn.apply(_console3, ['luma.gl: ' + arg].concat(args));\n    }\n\n    cache[arg] = true;\n  },\n  error: function error(priority, arg) {\n    var _console4;\n\n    for (var _len5 = arguments.length, args = Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n      args[_key5 - 2] = arguments[_key5];\n    }\n\n    (_console4 = console).error.apply(_console4, ['luma.gl: ' + arg].concat(args));\n  },\n  deprecated: function deprecated(oldUsage, newUsage) {\n    _log.warn(0, 'luma.gl: `' + oldUsage + '` is deprecated and will be removed in a later version. Use `' + newUsage + '` instead');\n  }\n};\n\nfunction formatArrayValue(v, opts) {\n  var _opts$maxElts = opts.maxElts,\n      maxElts = _opts$maxElts === undefined ? 16 : _opts$maxElts,\n      _opts$size = opts.size,\n      size = _opts$size === undefined ? 1 : _opts$size;\n  var string = '[';\n\n  for (var i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += ',' + (i % size === 0 ? ' ' : '');\n    }\n\n    string += formatValue(v[i], opts);\n  }\n\n  var terminator = v.length > maxElts ? '...' : ']';\n  return '' + string + terminator;\n}\n\nexport function formatValue(v) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$isInteger = opts.isInteger,\n      isInteger = _opts$isInteger === undefined ? false : _opts$isInteger;\n\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n\n  var string = v.toPrecision(2);\n  var decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\nexport default _log;","map":null,"metadata":{},"sourceType":"module"}