{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME scatterplot-layer-vertex-shader-64\\n\\nattribute vec3 positions;\\n\\nattribute vec3 instancePositions;\\nattribute vec2 instancePositions64xyLow;\\nattribute float instanceRadius;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\n// Only one-dimensional arrays may be declared in GLSL ES 1.0. specs p.24\\nuniform float opacity;\\nuniform float radiusScale;\\nuniform float radiusMinPixels;\\nuniform float radiusMaxPixels;\\nuniform float renderPickingBuffer;\\nuniform float outline;\\nuniform float strokeWidth;\\n\\nvarying vec4 vColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\n\\nvoid main(void) {\\n  // Multiply out radius and clamp to limits\\n  float outerRadiusPixels = clamp(\\n    project_scale(radiusScale * instanceRadius),\\n    radiusMinPixels, radiusMaxPixels\\n  );\\n\\n  // outline is centered at the radius\\n  // outer radius needs to offset by half stroke width\\n  outerRadiusPixels += outline * strokeWidth / 2.0;\\n\\n  // position on the containing square in [-1, 1] space\\n  unitPosition = positions.xy;\\n  // 0 - solid circle, 1 - stroke with lineWidth=0\\n  innerUnitRadius = outline * (1.0 - strokeWidth / outerRadiusPixels);\\n\\n  vec4 instancePositions64xy = vec4(\\n    instancePositions.x, instancePositions64xyLow.x,\\n    instancePositions.y, instancePositions64xyLow.y);\\n\\n  vec2 projected_coord_xy[2];\\n  project_position_fp64(instancePositions64xy, projected_coord_xy);\\n\\n  vec2 vertex_pos_localspace[4];\\n  vec4_fp64(vec4(positions * outerRadiusPixels, 0.0), vertex_pos_localspace);\\n\\n  vec2 vertex_pos_modelspace[4];\\n  vertex_pos_modelspace[0] = sum_fp64(vertex_pos_localspace[0], projected_coord_xy[0]);\\n  vertex_pos_modelspace[1] = sum_fp64(vertex_pos_localspace[1], projected_coord_xy[1]);\\n  vertex_pos_modelspace[2] = sum_fp64(vertex_pos_localspace[2],\\n    vec2(project_scale(instancePositions.z), 0.0));\\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\\n\\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\\n\\n  if (renderPickingBuffer > 0.5) {\\n    vColor = vec4(instancePickingColors / 255., 1.);\\n  } else {\\n    vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\\n  }\\n  // // Apply opacity to instance color, or return instance picking color\\n  // vec4 color = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\\n  // vec4 pickingColor = vec4(instancePickingColors / 255., 1.);\\n  // vColor = mix(color, pickingColor, renderPickingBuffer);\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}