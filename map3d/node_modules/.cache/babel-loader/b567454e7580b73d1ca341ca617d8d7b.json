{"ast":null,"code":"var DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\nvar DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null,\n  //  Set to a picking color to visually highlight that item\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,\n  // Color of visual highlight of \"selected\" item\n  pickingThreshold: 1.0,\n  pickingActive: false // Set to true when rendering to off-screen \"picking\" buffer\n\n};\n/* eslint-disable camelcase */\n\nfunction getUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  var uniforms = {};\n\n  if (opts.pickingSelectedColor !== undefined) {\n    if (opts.pickingSelectedColor === null) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      var selectedColor = [opts.pickingSelectedColor[0], opts.pickingSelectedColor[1], opts.pickingSelectedColor[2]];\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n\n  if (opts.pickingHighlightColor !== undefined) {\n    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;\n  } // TODO - major hack - decide on normalization and remove\n\n\n  if (opts.pickingThreshold !== undefined) {\n    uniforms.picking_uThreshold = opts.pickingThreshold;\n  }\n\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;\n  }\n\n  return uniforms;\n}\n\nvar vs = \"uniform vec3 picking_uSelectedColor;\\nuniform float picking_uThreshold;\\nuniform bool picking_uSelectedColorValid;\\n\\nvarying vec4 picking_vRGBcolor_Aselected;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\nbool isVertexPicked(vec3 vertexColor) {\\n  return\\n    picking_uSelectedColorValid &&\\n    abs(vertexColor.r - picking_uSelectedColor.r) < picking_uThreshold &&\\n    abs(vertexColor.g - picking_uSelectedColor.g) < picking_uThreshold &&\\n    abs(vertexColor.b - picking_uSelectedColor.b) < picking_uThreshold;\\n}\\n\\nvoid picking_setPickingColor(vec3 pickingColor) {\\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\\n  picking_vRGBcolor_Aselected.a =\\n    float(isVertexPicked(pickingColor));\\n\\n  // Stores the picking color so that the fragment shader can render it during picking\\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\\n}\\n\";\nvar fs = \"uniform bool picking_uActive; // true during rendering to offscreen picking buffer\\nuniform vec3 picking_uSelectedColor;\\nuniform vec4 picking_uHighlightColor;\\n\\nvarying vec4 picking_vRGBcolor_Aselected;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\n/*\\n * Returns highlight color if this item is selected.\\n */\\nvec4 picking_filterHighlightColor(vec4 color) {\\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\\n  return selected ? (picking_uHighlightColor * COLOR_SCALE) : color;\\n}\\n\\n/*\\n * Returns picking color if picking enabled else unmodified argument.\\n */\\nvec4 picking_filterPickingColor(vec4 color) {\\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\\n  if (picking_uActive && length(pickingColor) < 0.001) {\\n    discard;\\n  }\\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\\n}\\n\\n/*\\n * Returns picking color if picking is enabled if not\\n * highlight color if this item is selected, otherwise unmodified argument.\\n */\\nvec4 picking_filterColor(vec4 color) {\\n  vec4 highightColor = picking_filterHighlightColor(color);\\n  return picking_filterPickingColor(highightColor);\\n}\\n\\n\";\nexport default {\n  name: 'picking',\n  vs: vs,\n  fs: fs,\n  getUniforms: getUniforms\n};","map":null,"metadata":{},"sourceType":"module"}