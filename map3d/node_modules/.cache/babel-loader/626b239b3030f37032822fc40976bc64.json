{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME choropleth-layer-vertex-64-shader\\n\\nattribute vec4 positions64;\\nattribute vec2 heights64;\\nattribute vec4 colors;\\nattribute vec3 pickingColors;\\n\\nuniform float opacity;\\nuniform float renderPickingBuffer;\\nuniform vec3 selectedPickingColor;\\n\\nuniform float pickingEnabled;\\nvarying vec4 vPickingColor;\\nvoid picking_setPickColor(vec3 pickingColor) {\\n  vPickingColor = vec4(pickingColor,  1.);\\n}\\nvec4 picking_setNormalAndPickColors(vec4 color, vec3 pickingColor) {\\n  vec4 pickingColor4 = vec4(pickingColor.rgb, 1.);\\n  vPickingColor = mix(color, pickingColor4, pickingEnabled);\\n  return vPickingColor;\\n}\\n\\nvoid main(void) {\\n  // For some reason, need to add one to elevation to show up in untilted mode\\n  vec2 projectedCoord[2];\\n  project_position_fp64(positions64, projectedCoord);\\n\\n  vec2 vertex_pos_modelspace[4];\\n\\n  vertex_pos_modelspace[0] = projectedCoord[0];\\n  vertex_pos_modelspace[1] = projectedCoord[1];\\n  vertex_pos_modelspace[2] = heights64;\\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\\n\\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\\n\\n  vec4 color = vec4(colors.rgb, colors.a * opacity) / 255.;\\n\\n  picking_setNormalAndPickColors(\\n    color,\\n    pickingColors / 255.\\n  );\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}