{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/* eslint-disable camelcase */\n\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\nimport assert from '../utils/assert';\nvar ERR_ARGUMENT = 'UniformBufferLayout illegal argument'; // Local constants - these will \"collapse\" during minification\n\nvar GL_FLOAT = 0x1406;\nvar GL_INT = 0x1404;\nvar GL_UNSIGNED_INT = 0x1405; // Std140 layout for uniforms\n\nvar UniformBufferLayout =\n/*#__PURE__*/\nfunction () {\n  function UniformBufferLayout(layout) {\n    var _this$typedArray;\n\n    _classCallCheck(this, UniformBufferLayout);\n\n    this.layout = {};\n    this.size = 0; // Add layout (type, size and offset) definitions for each uniform in the layout\n\n    for (var key in layout) {\n      this._addUniform(key, layout[key]);\n    } // Allocate three typed arrays pointing at same memory\n\n\n    var data = new Float32Array(this.size);\n    this.typedArray = (_this$typedArray = {}, _defineProperty(_this$typedArray, GL_FLOAT, data), _defineProperty(_this$typedArray, GL_INT, new Int32Array(data.buffer)), _defineProperty(_this$typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _this$typedArray);\n  } // Get number of bytes needed for buffer allocation\n\n\n  _createClass(UniformBufferLayout, [{\n    key: \"getBytes\",\n    value: function getBytes() {\n      return this.size * 4;\n    } // Get the current data as Float32Array, for bufferSubData\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.typedArray[GL_FLOAT];\n    } // Get offset and data for one object (for bufferSubData)\n\n  }, {\n    key: \"getSubData\",\n    value: function getSubData(index) {\n      var data;\n      var offset;\n\n      if (index === undefined) {\n        data = this.data;\n        offset = 0;\n      } else {\n        var begin = this.offsets[index];\n        var end = begin + this.sizes[index];\n        data = this.data.subarray(begin, end);\n        offset = begin * 4;\n      }\n\n      return {\n        data: data,\n        offset: offset\n      };\n    } // Set a map of values\n\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(values) {\n      for (var key in values) {\n        this._setValue(key, values[key]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_setValue\",\n    value: function _setValue(key, value) {\n      var layout = this.layout[key];\n      assert(layout, 'UniformLayoutStd140 illegal argument');\n      var typedArray = this.typedArray[layout.type];\n\n      if (layout.size === 1) {\n        // single value -> just set it\n        typedArray[layout.offset] = value;\n      } else {\n        // vector/matrix -> copy the supplied (typed) array, starting from offset\n        typedArray.set(value, layout.offset);\n      }\n    }\n  }, {\n    key: \"_addUniform\",\n    value: function _addUniform(key, uniformType) {\n      var typeAndComponents = decomposeCompositeGLType(uniformType);\n      assert(typeAndComponents, ERR_ARGUMENT);\n      var type = typeAndComponents.type,\n          count = typeAndComponents.components; // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n\n      this.size = this._alignTo(this.size, count); // Use the aligned size as the offset of the current uniform.\n\n      var offset = this.size; // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n\n      this.size += count;\n      this.layout[key] = {\n        type: type,\n        size: count,\n        offset: offset\n      };\n    } // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n\n  }, {\n    key: \"_alignTo\",\n    value: function _alignTo(size, count) {\n      switch (count) {\n        case 1:\n          return size;\n        // Pad upwards to even multiple of 2\n\n        case 2:\n          return size + size % 2;\n        // Pad upwards to even multiple of 2\n\n        default:\n          return size + (4 - size % 4) % 4;\n        // Pad upwards to even multiple of 4\n      }\n    }\n  }]);\n\n  return UniformBufferLayout;\n}();\n\nexport { UniformBufferLayout as default };","map":null,"metadata":{},"sourceType":"module"}