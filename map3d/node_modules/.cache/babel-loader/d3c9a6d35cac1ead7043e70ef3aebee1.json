{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { experimental } from '../../core';\nvar get = experimental.get;\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\n\nexport function getGeojsonFeatures(geojson) {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  var type = get(geojson, 'type');\n\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'Polygon':\n    case 'MultiPolygon':\n    case 'GeometryCollection':\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{\n        type: 'Feature',\n        properties: {},\n        geometry: geojson\n      }];\n\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      return get(geojson, 'features');\n\n    default:\n      throw new Error('Unknown geojson type');\n  }\n} // Linearize\n\nexport function separateGeojsonFeatures(features) {\n  var pointFeatures = [];\n  var lineFeatures = [];\n  var polygonFeatures = [];\n  var polygonOutlineFeatures = [];\n  features.forEach(function (feature) {\n    var type = get(feature, 'geometry.type');\n    var coordinates = get(feature, 'geometry.coordinates');\n    var properties = get(feature, 'properties');\n\n    switch (type) {\n      case 'Point':\n        pointFeatures.push(feature);\n        break;\n\n      case 'MultiPoint':\n        // TODO - split multipoints\n        coordinates.forEach(function (point) {\n          pointFeatures.push({\n            geometry: {\n              coordinates: point\n            },\n            properties: properties,\n            feature: feature\n          });\n        });\n        break;\n\n      case 'LineString':\n        lineFeatures.push(feature);\n        break;\n\n      case 'MultiLineString':\n        // Break multilinestrings into multiple lines with same properties\n        coordinates.forEach(function (path) {\n          lineFeatures.push({\n            geometry: {\n              coordinates: path\n            },\n            properties: properties,\n            feature: feature\n          });\n        });\n        break;\n\n      case 'Polygon':\n        polygonFeatures.push(feature); // Break polygon into multiple lines with same properties\n\n        coordinates.forEach(function (path) {\n          polygonOutlineFeatures.push({\n            geometry: {\n              coordinates: path\n            },\n            properties: properties,\n            feature: feature\n          });\n        });\n        break;\n\n      case 'MultiPolygon':\n        // Break multipolygons into multiple polygons with same properties\n        coordinates.forEach(function (polygon) {\n          polygonFeatures.push({\n            geometry: {\n              coordinates: polygon\n            },\n            properties: properties,\n            feature: feature\n          }); // Break polygon into multiple lines with same properties\n\n          polygon.forEach(function (path) {\n            polygonOutlineFeatures.push({\n              geometry: {\n                coordinates: path\n              },\n              properties: properties,\n              feature: feature\n            });\n          });\n        });\n        break;\n      // Not yet supported\n\n      case 'GeometryCollection':\n      default:\n        throw new Error('GeoJsonLayer: ' + type + ' not supported.');\n    }\n  });\n  return {\n    pointFeatures: pointFeatures,\n    lineFeatures: lineFeatures,\n    polygonFeatures: polygonFeatures,\n    polygonOutlineFeatures: polygonOutlineFeatures\n  };\n}","map":null,"metadata":{},"sourceType":"module"}