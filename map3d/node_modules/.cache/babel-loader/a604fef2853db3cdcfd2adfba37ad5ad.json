{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport MathArray from './math-array';\nimport { checkNumber } from './common'; // gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n\n/* eslint-disable camelcase */\n\nimport vec4_set from 'gl-vec4/set';\nimport vec4_distance from 'gl-vec4/distance';\nimport vec4_add from 'gl-vec4/add';\nimport vec4_subtract from 'gl-vec4/subtract';\nimport vec4_multiply from 'gl-vec4/multiply';\nimport vec4_divide from 'gl-vec4/divide';\nimport vec4_scale from 'gl-vec4/scale';\nimport vec4_scaleAndAdd from 'gl-vec4/scaleAndAdd';\nimport vec4_negate from 'gl-vec4/negate';\nimport vec4_inverse from 'gl-vec4/inverse';\nimport vec4_normalize from 'gl-vec4/normalize';\nimport vec4_dot from 'gl-vec4/dot'; // import vec4_cross from 'gl-vec4/cross';\n\nimport vec4_lerp from 'gl-vec4/lerp';\nexport function validateVector4(v) {\n  return v.length === 4 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]) && Number.isFinite(v[3]);\n}\n\nvar Vector4 = function (_MathArray) {\n  _inherits(Vector4, _MathArray); // Creates a new, empty vec4\n\n\n  function Vector4() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Vector4);\n\n    var _this = _possibleConstructorReturn(this, (Vector4.__proto__ || Object.getPrototypeOf(Vector4)).call(this));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector4, [{\n    key: 'set',\n    value: function set(x, y, z, w) {\n      vec4_set(this, x, y, z, w);\n      this.check();\n      return this;\n    } // Getters/setters\n\n    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  }, {\n    key: 'distance',\n\n    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n    value: function distance(vector) {\n      return vec4_distance(vector);\n    }\n  }, {\n    key: 'add',\n    value: function add() {\n      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var vector = _step.value;\n          vec4_add(this, vector);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'subtract',\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var vector = _step2.value;\n          vec4_subtract(this, vector);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'multiply',\n    value: function multiply() {\n      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        vectors[_key3] = arguments[_key3];\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var vector = _step3.value;\n          vec4_multiply(this, vector);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'divide',\n    value: function divide() {\n      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        vectors[_key4] = arguments[_key4];\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var vector = _step4.value;\n          vec4_divide(this, vector);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'scale',\n    value: function scale(_scale) {\n      vec4_scale(this, this, _scale);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'scaleAndAdd',\n    value: function scaleAndAdd(vector, scale) {\n      vec4_scaleAndAdd(this, this, vector, scale);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'negate',\n    value: function negate() {\n      vec4_negate(this, this);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'inverse',\n    value: function inverse() {\n      vec4_inverse(this, this);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'normalize',\n    value: function normalize() {\n      vec4_normalize(this, this);\n      this.check();\n      return this;\n    }\n  }, {\n    key: 'dot',\n    value: function dot(vector) {\n      return vec4_dot(this, vector);\n    } // cross(scale) {\n    //   vec4_cross(this, this, scale);\n    //   this.check();\n    //   return this;\n    // }\n\n  }, {\n    key: 'lerp',\n    value: function lerp(vector, coeff) {\n      vec4_lerp(this, this, vector, coeff);\n      this.check();\n      return this;\n    }\n    /*\n    multiply(...vectors) {\n      for (const vector of vectors) {\n        vec4_multiply(this, vector);\n      }\n      this.check();\n      return this;\n    }\n     divide(...vectors) {\n      for (const vector of vectors) {\n        vec4_divide(this, vector);\n      }\n      this.check();\n      return this;\n    }\n     ceil() {\n      vec4_ceil(this, this);\n      this.check();\n      return this;\n    }\n     floor() {\n      vec4_floor(this, this);\n      this.check();\n      return this;\n    }\n     min() {\n      vec4_min(this, this);\n      this.check();\n      return this;\n    }\n     max() {\n      vec4_max(this, this);\n      this.check();\n      return this;\n    }\n     hermite(scale) {\n      vec4_hermite(this, this, scale);\n      this.check();\n      return this;\n    }\n     bezier(scale) {\n      vec4_bezier(this, this, scale);\n      this.check();\n      return this;\n    }\n     random(scale) {\n      vec4_random(this, this, scale);\n      this.check();\n      return this;\n    }\n     rotateX(origin, angle) {\n      vec4_rotateX(this, this, origin, angle);\n      this.check();\n      return this;\n    }\n     rotateY(origin, angle) {\n      vec4_rotateY(this, this, origin, angle);\n      this.check();\n      return this;\n    }\n     rotateZ(origin, angle) {\n      vec4_rotateZ(this, this, origin, angle);\n      this.check();\n      return this;\n    }\n    */\n\n  }, {\n    key: 'ELEMENTS',\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: 'x',\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: 'y',\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }, {\n    key: 'z',\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: 'w',\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Vector4;\n}(MathArray);\n\nexport default Vector4;","map":null,"metadata":{},"sourceType":"module"}