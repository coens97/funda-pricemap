{"ast":null,"code":"// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport { isWebGL2 } from '../webgl-utils';\nimport { isOldIE } from '../utils';\nimport assert from '../utils/assert'; // Defines luma.gl \"feature\" names and semantics\n\nvar WEBGL_FEATURES = {\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: ['OES_vertex_array_object', true],\n  TIMER_QUERY: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  INSTANCED_RENDERING: ['ANGLE_instanced_arrays', true],\n  MULTIPLE_RENDER_TARGETS: ['WEBGL_draw_buffers', true],\n  // FEATURES\n  ELEMENT_INDEX_UINT32: ['OES_element_index_uint', true],\n  BLEND_EQUATION_MINMAX: ['EXT_blend_minmax', true],\n  // TEXTURES, RENDERBUFFERS\n  COLOR_ENCODING_SRGB: ['EXT_sRGB', true],\n  // TEXTURES\n  TEXTURE_DEPTH: ['WEBGL_depth_texture', true],\n  TEXTURE_FLOAT: ['OES_texture_float', true],\n  TEXTURE_HALF_FLOAT: ['OES_texture_half_float', true],\n  TEXTURE_FILTER_LINEAR_FLOAT: ['OES_texture_float_linear'],\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: ['OES_texture_half_float_linear'],\n  TEXTURE_FILTER_ANISOTROPIC: ['EXT_texture_filter_anisotropic'],\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],\n  COLOR_ATTACHMENT_FLOAT: [false, 'EXT_color_buffer_float'],\n  COLOR_ATTACHMENT_HALF_FLOAT: [false, 'EXT_color_buffer_half_float'],\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n}; // Create a key-mirrored FEATURES array\n\nvar FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(function (key) {\n  FEATURES[key] = key;\n});\nexport { FEATURES }; // Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives extension fails to compile in IE11 even though its included\n// in the list of supported extensions.\n\nvar compiledGlslExtensions = {}; // opts allows user agent to be overridden for testing\n\nexport function canCompileGLGSExtension(gl, cap) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  var extensionName = feature[0];\n  var source = \"#extension GL_\".concat(extensionName, \" : enable\\nvoid main(void) {}\");\n  var shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  var canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n} // TODO - cache the value\n\nfunction getFeature(gl, cap) {\n  var feature = WEBGL_FEATURES[cap];\n  assert(feature, cap); // Get extension name from table\n\n  var extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0]; // Check if the value is dependent on checking an extension\n\n  var value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n  assert(value === false || value === true);\n  return value;\n} // capability can be a WebGL extension name or a luma capability name\n\n\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(function (feature) {\n    return getFeature(gl, feature);\n  });\n}\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.caps) {\n    gl.luma.caps = {};\n    gl.luma.caps.webgl2 = isWebGL2(gl);\n\n    for (var cap in WEBGL_FEATURES) {\n      gl.luma.caps[cap] = getFeature(gl, cap);\n    }\n  }\n\n  return gl.luma.caps;\n}\nexport var TEST_EXPORTS = {\n  WEBGL_FEATURES: WEBGL_FEATURES\n};","map":null,"metadata":{},"sourceType":"module"}