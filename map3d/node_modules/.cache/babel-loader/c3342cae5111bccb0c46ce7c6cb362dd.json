{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME point-cloud-layer-vertex-shader\\n\\nattribute vec3 positions;\\n\\nattribute vec3 instancePositions;\\nattribute vec3 instanceNormals;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\n\\nuniform float renderPickingBuffer;\\nuniform float opacity;\\nuniform float radiusPixels;\\nuniform vec2 viewportSize;\\n\\nvarying vec4 vColor;\\nvarying vec2 unitPosition;\\n\\nvoid main(void) {\\n  // position on the containing square in [-1, 1] space\\n  unitPosition = positions.xy;\\n\\n  // Find the center of the point and add the current vertex\\n  vec4 position_worldspace = vec4(project_position(instancePositions), 1.0);\\n  vec2 vertex = positions.xy * radiusPixels / viewportSize * 2.0;\\n  gl_Position = project_to_clipspace(position_worldspace) + vec4(vertex, 0.0, 0.0);\\n\\n  // Apply lighting\\n  float lightWeight = getLightWeight(position_worldspace.xyz, // the w component is always 1.0\\n    instanceNormals);\\n\\n  // Apply opacity to instance color, or return instance picking color\\n  vec4 color = vec4(lightWeight * instanceColors.rgb, instanceColors.a * opacity) / 255.;\\n  vec4 pickingColor = vec4(instancePickingColors / 255., 1.);\\n  vColor = mix(color, pickingColor, renderPickingBuffer);\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}