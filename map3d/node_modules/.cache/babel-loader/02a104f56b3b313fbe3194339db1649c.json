{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport Resource from './resource';\nimport { assertWebGL2Context } from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\n\nvar FenceSync =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(FenceSync, _Resource);\n  /*\n   * @class\n   * @param {WebGL2RenderingContext} gl\n   */\n\n\n  function FenceSync(gl, opts) {\n    var _this;\n\n    _classCallCheck(this, FenceSync);\n\n    assertWebGL2Context(gl);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FenceSync).call(this, gl, opts)); // query manager needs a promise field\n\n    _this.promise = null;\n    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n   * The method is a no-op in the absence of the possibility of\n   * synchronizing between multiple GL contexts.\n   * Prevent commands from being added to GPU command queue.\n   * Note: commands can still be buffered in driver.\n   *\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {Sync} status\n   */\n\n\n  _createClass(FenceSync, [{\n    key: \"wait\",\n    value: function wait() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$flags = _ref.flags,\n          flags = _ref$flags === void 0 ? 0 : _ref$flags,\n          _ref$timeout = _ref.timeout,\n          timeout = _ref$timeout === void 0 ? -1 : _ref$timeout;\n\n      this.gl.waitSync(this.handle, flags, timeout);\n      return this;\n    }\n    /**\n     * Block all CPU operations until fence is signalled\n     * @param {GLbitfield} flags\n     * @param {GLint64} timeout\n     * @return {GLenum} result\n     */\n\n  }, {\n    key: \"clientWait\",\n    value: function clientWait(_ref2) {\n      var _ref2$flags = _ref2.flags,\n          flags = _ref2$flags === void 0 ? 1 : _ref2$flags,\n          timeout = _ref2.timeout;\n      var result = this.gl.clientWaitSync(this.handle, flags, timeout); // TODO - map to boolean?\n\n      switch (result) {\n        case 37146:\n          // Indicates that sync object was signaled when this method was called.\n          break;\n\n        case 37147:\n          // Indicates that timeout time passed, sync object did not become signaled\n          break;\n\n        case 37148:\n          // Indicates that sync object was signaled before timeout expired.\n          break;\n\n        case 37149:\n          // Indicates that an error occurred during execution.\n          break;\n\n        default:\n      }\n\n      return result;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      queryManager.cancelQuery(this);\n    }\n  }, {\n    key: \"isSignaled\",\n    value: function isSignaled() {\n      return this.getParameter(37140) === 37145;\n    } // TODO - Query manager needs these?\n\n  }, {\n    key: \"isResultAvailable\",\n    value: function isResultAvailable() {\n      return this.isSignaled();\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      return this.isSignaled();\n    }\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      return this.gl.getSyncParameter(this.handle, pname);\n    } // PRIVATE METHODS\n\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.fenceSync(37143, 0);\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      queryManager.deleteQuery(this);\n      this.gl.deleteSync(this.handle);\n    }\n  }]);\n\n  return FenceSync;\n}(Resource);\n\nexport { FenceSync as default };","map":null,"metadata":{},"sourceType":"module"}