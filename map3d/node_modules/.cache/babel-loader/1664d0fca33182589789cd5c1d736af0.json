{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // ClipSpaceQuad\n\n\nimport { Model } from '../core';\nimport { Geometry } from '../geometry';\nimport { GL } from '../webgl';\nvar CLIPSPACE_QUAD_VERTEX_SHADER = 'attribute vec2 aClipSpacePosition;\\nattribute vec2 aTexCoord;\\nattribute vec2 aCoordinate;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main(void) {\\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\\n  position = aClipSpacePosition;\\n  coordinate = aCoordinate;\\n  uv = aTexCoord;\\n}\\n';\n/* eslint-disable indent, no-multi-spaces */\n\nvar POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nvar ClipSpaceQuad =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(ClipSpaceQuad, _Model);\n\n  function ClipSpaceQuad(gl, opts) {\n    _classCallCheck(this, ClipSpaceQuad);\n\n    var TEX_COORDS = POSITIONS.map(function (coord) {\n      return coord === -1 ? 0 : coord;\n    });\n\n    var _this = _possibleConstructorReturn(this, (ClipSpaceQuad.__proto__ || Object.getPrototypeOf(ClipSpaceQuad)).call(this, gl, Object.assign({}, opts, {\n      vs: CLIPSPACE_QUAD_VERTEX_SHADER,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        vertexCount: 4,\n        attributes: {\n          aClipSpacePosition: {\n            size: 2,\n            value: new Float32Array(POSITIONS)\n          },\n          aTexCoord: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          },\n          aCoordinate: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          }\n        }\n      })\n    })));\n\n    _this.setVertexCount(4);\n\n    return _this;\n  }\n\n  return ClipSpaceQuad;\n}(Model);\n\nexport default ClipSpaceQuad;","map":null,"metadata":{},"sourceType":"module"}