{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// lighting\nexport default \"#define NUM_OF_LIGHTS 2\\nuniform vec3 cameraPos;\\nuniform vec3 lightsPosition[16];\\nuniform vec2 lightsStrength[16];\\nuniform float ambientRatio;\\nuniform float diffuseRatio;\\nuniform float specularRatio;\\n\\nfloat getLightWeight(vec3 position_worldspace_vec3, vec3 normals_worldspace) {\\n  float lightWeight = 0.0;\\n\\n  vec3 normals_worldspace_vec3 = normals_worldspace.xzy;\\n\\n  vec3 camera_pos_worldspace = cameraPos;\\n  vec3 view_direction = normalize(camera_pos_worldspace - position_worldspace_vec3);\\n\\n  for (int i = 0; i < NUM_OF_LIGHTS; i++) {\\n    vec3 light_position_worldspace = project_position(lightsPosition[i]);\\n    vec3 light_direction = normalize(light_position_worldspace - position_worldspace_vec3);\\n\\n    vec3 halfway_direction = normalize(light_direction + view_direction);\\n    float lambertian = dot(light_direction, normals_worldspace_vec3);\\n    float specular = 0.0;\\n    if (lambertian > 0.0) {\\n      float specular_angle = max(dot(normals_worldspace_vec3, halfway_direction), 0.0);\\n      specular = pow(specular_angle, 32.0);\\n    }\\n    lambertian = max(lambertian, 0.0);\\n    lightWeight += (ambientRatio + lambertian * diffuseRatio + specular * specularRatio) *\\n      lightsStrength[i].x;\\n\\n  }\\n\\n  return lightWeight;\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}