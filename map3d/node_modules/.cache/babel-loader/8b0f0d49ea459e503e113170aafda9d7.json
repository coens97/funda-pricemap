{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport assert from 'assert';\nvar FS100 = 'void main() {}';\nvar FS300 = \"#version 300 es\\n\".concat(FS100); // Prase given glsl line and return qualifier details or null\n\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  var words = line.replace(/^\\s+/, '').split(/\\s+/); // TODO add support for precession qualifiers (highp, mediump and lowp)\n\n  var _words = _slicedToArray(words, 3),\n      qualifier = _words[0],\n      type = _words[1],\n      definition = _words[2];\n\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n\n  var name = definition.split(';')[0];\n  return {\n    qualifier: qualifier,\n    type: type,\n    name: name\n  };\n} // Given the shader version, input and output variable names,\n// builds and return a pass through fragment shader.\n\nexport function getPassthroughFS() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$version = _ref.version,\n      version = _ref$version === void 0 ? 100 : _ref$version,\n      input = _ref.input,\n      inputType = _ref.inputType,\n      output = _ref.output;\n\n  if (!input) {\n    return version === 300 ? FS300 : FS100;\n  }\n\n  var outputValue = convertToVec4(input, inputType);\n\n  if (version === 300) {\n    return \"#version 300 es\\nin \".concat(inputType, \" \").concat(input, \";\\nout vec4 \").concat(output, \";\\nvoid main() {\\n  \").concat(output, \" = \").concat(outputValue, \";\\n}\");\n  } // version 100\n\n\n  return \"varying \".concat(inputType, \" \").concat(input, \";\\nvoid main() {\\n  gl_FragColor = \").concat(outputValue, \";\\n}\");\n} // convert glsl type to suffix\n\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n\n    case 'vec2':\n      return 'xy';\n\n    case 'vec3':\n      return 'xyz';\n\n    case 'vec4':\n      return 'xyzw';\n\n    default:\n      assert(false);\n      return null;\n  }\n} // convert glsl type to channel count\n\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n\n    case 'vec2':\n      return 2;\n\n    case 'vec3':\n      return 3;\n\n    case 'vec4':\n      return 4;\n\n    default:\n      assert(false);\n      return null;\n  }\n} // Returns glsl instruction for converting to vec4\n\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return \"vec4(\".concat(variable, \", 0.0, 0.0, 1.0)\");\n\n    case 'vec2':\n      return \"vec4(\".concat(variable, \", 0.0, 1.0)\");\n\n    case 'vec3':\n      return \"vec4(\".concat(variable, \", 1.0)\");\n\n    case 'vec4':\n      return variable;\n\n    default:\n      assert(false);\n      return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}