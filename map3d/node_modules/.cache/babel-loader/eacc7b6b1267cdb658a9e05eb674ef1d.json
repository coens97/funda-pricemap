{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { PureComponent, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { EventManager } from 'mjolnir.js';\nimport { experimental } from '../core';\nvar ViewportControls = experimental.ViewportControls,\n    TransitionManager = experimental.TransitionManager;\nimport CURSOR from './utils/cursors';\nvar propTypes = {\n  viewportState: PropTypes.func,\n  state: PropTypes.object,\n\n  /** Viewport props */\n\n  /** The width of the map. */\n  width: PropTypes.number.isRequired,\n\n  /** The height of the map. */\n  height: PropTypes.number.isRequired,\n\n  /** The longitude of the center of the map. */\n  longitude: PropTypes.number.isRequired,\n\n  /** The latitude of the center of the map. */\n  latitude: PropTypes.number.isRequired,\n\n  /** The tile zoom level of the map. */\n  zoom: PropTypes.number.isRequired,\n\n  /** Specify the bearing of the viewport */\n  bearing: PropTypes.number,\n\n  /** Specify the pitch of the viewport */\n  pitch: PropTypes.number,\n\n  /** Altitude of the viewport camera. Default 1.5 \"screen heights\" */\n  // Note: Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n  altitude: PropTypes.number,\n  // Camera position for FirstPersonViewport\n  position: PropTypes.array,\n\n  /** Viewport constraints */\n  // Max zoom level\n  maxZoom: PropTypes.number,\n  // Min zoom level\n  minZoom: PropTypes.number,\n  // Max pitch in degrees\n  maxPitch: PropTypes.number,\n  // Min pitch in degrees\n  minPitch: PropTypes.number,\n\n  /**\n   * `onViewportChange` callback is fired when the user interacted with the\n   * map. The object passed to the callback contains viewport properties\n   * such as `longitude`, `latitude`, `zoom` etc.\n   */\n  onViewportChange: PropTypes.func,\n\n  /** Viewport transition **/\n  // transition duration for viewport change\n  transitionDuration: PropTypes.number,\n  // an instance of ViewportTransitionInterpolator, can be used to perform custom transitions.\n  transitionInterpolator: PropTypes.object,\n  // type of interruption of current transition on update.\n  transitionInterruption: PropTypes.number,\n  // easing function\n  transitionEasing: PropTypes.func,\n  // transition status update functions\n  onTransitionStart: PropTypes.func,\n  onTransitionInterrupt: PropTypes.func,\n  onTransitionEnd: PropTypes.func,\n\n  /** Enables control event handling */\n  // Scroll to zoom\n  scrollZoom: PropTypes.bool,\n  // Drag to pan\n  dragPan: PropTypes.bool,\n  // Drag to rotate\n  dragRotate: PropTypes.bool,\n  // Double click to zoom\n  doubleClickZoom: PropTypes.bool,\n  // Pinch to zoom / rotate\n  touchZoomRotate: PropTypes.bool,\n\n  /** Accessor that returns a cursor style to show interactive state */\n  getCursor: PropTypes.func,\n  // A map control instance to replace the default map controls\n  // The object must expose one property: `events` as an array of subscribed\n  // event names; and two methods: `setState(state)` and `handle(event)`\n  controls: PropTypes.shape({\n    events: PropTypes.arrayOf(PropTypes.string),\n    handleEvent: PropTypes.func\n  })\n};\n\nvar getDefaultCursor = function getDefaultCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? CURSOR.GRABBING : CURSOR.GRAB;\n};\n\nvar defaultProps = Object.assign({}, TransitionManager.defaultProps, {\n  onViewportChange: null,\n  scrollZoom: true,\n  dragPan: true,\n  dragRotate: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  getCursor: getDefaultCursor\n});\n\nvar ViewportController = function (_PureComponent) {\n  _inherits(ViewportController, _PureComponent);\n\n  function ViewportController(props) {\n    _classCallCheck(this, ViewportController);\n\n    var _this = _possibleConstructorReturn(this, (ViewportController.__proto__ || Object.getPrototypeOf(ViewportController)).call(this, props));\n\n    _this.state = {\n      isDragging: false // Whether the cursor is down\n\n    };\n    return _this;\n  }\n\n  _createClass(ViewportController, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._eventManager = new EventManager(this.eventCanvas); // If props.controls is not provided, fallback to default MapControls instance\n      // Cannot use defaultProps here because it needs to be per map instance\n\n      this._controls = this.props.controls || new ViewportControls(this.props.viewportState);\n\n      this._controls.setOptions(Object.assign({}, this.props, {\n        onStateChange: this._onInteractiveStateChange.bind(this),\n        eventManager: this._eventManager\n      }));\n\n      this._transitionManger = new TransitionManager(this.props);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this._transitionManger) {\n        var transitionTriggered = this._transitionManger.processViewportChange(nextProps); // Skip this render to avoid jump during viewport transitions.\n\n\n        return !transitionTriggered;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps) {\n      if (this._controls) {\n        this._controls.setOptions(nextProps);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._eventManager.destroy();\n    }\n  }, {\n    key: '_onInteractiveStateChange',\n    value: function _onInteractiveStateChange(_ref2) {\n      var _ref2$isDragging = _ref2.isDragging,\n          isDragging = _ref2$isDragging === undefined ? false : _ref2$isDragging;\n\n      if (isDragging !== this.state.isDragging) {\n        this.setState({\n          isDragging: isDragging\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height,\n          getCursor = _props.getCursor;\n      var eventCanvasStyle = {\n        width: width,\n        height: height,\n        position: 'relative',\n        cursor: getCursor(this.state)\n      };\n      return createElement('div', {\n        key: 'map-controls',\n        ref: function ref(c) {\n          return _this2.eventCanvas = c;\n        },\n        style: eventCanvasStyle\n      }, this.props.children);\n    }\n  }]);\n\n  return ViewportController;\n}(PureComponent);\n\nexport default ViewportController;\nViewportController.displayName = 'ViewportController';\nViewportController.propTypes = propTypes;\nViewportController.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}