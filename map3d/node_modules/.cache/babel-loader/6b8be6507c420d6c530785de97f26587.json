{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-len */\nvar experimental = {}; //\n// CORE LIBRARY\n//\n\nexport { // LIB\nCOORDINATE_SYSTEM, LayerManager, AttributeManager, Layer, CompositeLayer, // Viewports\nViewport, WebMercatorViewport, PerspectiveViewport, OrthographicViewport } from './core'; // EXPERIMENTAL CORE LIB CLASSES (May change in minor version bumps, use at your own risk)\n\nimport { experimental as CoreExperimental } from './core';\nvar ViewState = CoreExperimental.ViewState,\n    FirstPersonState = CoreExperimental.FirstPersonState,\n    OrbitState = CoreExperimental.OrbitState,\n    MapState = CoreExperimental.MapState,\n    Controller = CoreExperimental.Controller,\n    FirstPersonController = CoreExperimental.FirstPersonController,\n    FirstPersonViewport = CoreExperimental.FirstPersonViewport,\n    OrbitViewport = CoreExperimental.OrbitViewport,\n    ThirdPersonViewport = CoreExperimental.ThirdPersonViewport,\n    TRANSITION_EVENTS = CoreExperimental.TRANSITION_EVENTS,\n    LinearInterpolator = CoreExperimental.LinearInterpolator,\n    ViewportFlyToInterpolator = CoreExperimental.ViewportFlyToInterpolator,\n    DeckGLJS = CoreExperimental.DeckGLJS,\n    MapControllerJS = CoreExperimental.MapControllerJS,\n    EffectManager = CoreExperimental.EffectManager,\n    Effect = CoreExperimental.Effect;\nObject.assign(experimental, {\n  // Unfinished controller/viewport classes\n  ViewState: ViewState,\n  FirstPersonState: FirstPersonState,\n  OrbitState: OrbitState,\n  MapState: MapState,\n  Controller: Controller,\n  FirstPersonController: FirstPersonController,\n  FirstPersonViewport: FirstPersonViewport,\n  OrbitViewport: OrbitViewport,\n  ThirdPersonViewport: ThirdPersonViewport,\n  // Transition bindings\n  TRANSITION_EVENTS: TRANSITION_EVENTS,\n  LinearInterpolator: LinearInterpolator,\n  ViewportFlyToInterpolator: ViewportFlyToInterpolator,\n  // Pure JS (non-React) API\n  DeckGLJS: DeckGLJS,\n  MapControllerJS: MapControllerJS,\n  // Effects base classes\n  EffectManager: EffectManager,\n  Effect: Effect\n}); // Experimental Data Accessor Helpers\n// INTERNAL - TODO remove from experimental exports\n\nvar TransitionManager = CoreExperimental.TransitionManager,\n    extractViewportFrom = CoreExperimental.extractViewportFrom,\n    BinSorter = CoreExperimental.BinSorter,\n    linearScale = CoreExperimental.linearScale,\n    getLinearScale = CoreExperimental.getLinearScale,\n    quantizeScale = CoreExperimental.quantizeScale,\n    getQuantizeScale = CoreExperimental.getQuantizeScale,\n    clamp = CoreExperimental.clamp,\n    defaultColorRange = CoreExperimental.defaultColorRange,\n    log = CoreExperimental.log,\n    get = CoreExperimental.get,\n    count = CoreExperimental.count,\n    flatten = CoreExperimental.flatten,\n    countVertices = CoreExperimental.countVertices,\n    flattenVertices = CoreExperimental.flattenVertices,\n    fillArray = CoreExperimental.fillArray,\n    enable64bitSupport = CoreExperimental.enable64bitSupport,\n    fp64ify = CoreExperimental.fp64ify;\nObject.assign(experimental, {\n  // For react module\n  TransitionManager: TransitionManager,\n  extractViewportFrom: extractViewportFrom,\n  // For layers\n  BinSorter: BinSorter,\n  linearScale: linearScale,\n  getLinearScale: getLinearScale,\n  quantizeScale: quantizeScale,\n  getQuantizeScale: getQuantizeScale,\n  clamp: clamp,\n  defaultColorRange: defaultColorRange,\n  log: log,\n  get: get,\n  count: count,\n  flatten: flatten,\n  countVertices: countVertices,\n  flattenVertices: flattenVertices,\n  fillArray: fillArray,\n  enable64bitSupport: enable64bitSupport,\n  fp64ify: fp64ify\n}); //\n// CORE LAYERS PACKAGE\n//\n\nexport { ArcLayer, IconLayer, LineLayer, PointCloudLayer, ScatterplotLayer, ScreenGridLayer, GridLayer, GridCellLayer, HexagonLayer, HexagonCellLayer, PathLayer, PolygonLayer, GeoJsonLayer } from './core-layers'; //\n// EFFECTS PACKAGE\n//\n\nimport { default as ReflectionEffect } from './effects/experimental/reflection-effect/reflection-effect';\nObject.assign(experimental, {\n  ReflectionEffect: ReflectionEffect\n}); //\n// REACT BINDINGS PACKAGE\n//\n\nexport { default, DeckGL } from './react'; // TODO - do we need to expose these?\n\nimport { MapController, OrbitController, ViewportController // TODO - merge with deck.gl?\n} from './react';\nObject.assign(experimental, {\n  MapController: MapController,\n  OrbitController: OrbitController,\n  ViewportController: ViewportController\n}); //\n// EXPERIMENTAL EXPORTS\n//\n\nexport { experimental };","map":null,"metadata":{},"sourceType":"module"}