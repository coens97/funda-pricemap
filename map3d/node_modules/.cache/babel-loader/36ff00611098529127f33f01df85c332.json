{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport Viewport from './viewport';\nimport { Vector3, Matrix4, experimental } from 'math.gl';\nvar SphericalCoordinates = experimental.SphericalCoordinates;\n\nfunction getDirectionFromBearingAndPitch(_ref) {\n  var bearing = _ref.bearing,\n      pitch = _ref.pitch;\n  var spherical = new SphericalCoordinates({\n    bearing: bearing,\n    pitch: pitch\n  });\n  return spherical.toVector3().normalize();\n}\n\nvar ThirdPersonViewport = function (_Viewport) {\n  _inherits(ThirdPersonViewport, _Viewport);\n\n  function ThirdPersonViewport(opts) {\n    _classCallCheck(this, ThirdPersonViewport);\n\n    var bearing = opts.bearing,\n        pitch = opts.pitch,\n        position = opts.position,\n        up = opts.up,\n        zoom = opts.zoom;\n    var direction = getDirectionFromBearingAndPitch({\n      bearing: bearing,\n      pitch: pitch\n    });\n    var distance = zoom * 50; // TODO somehow need to flip z to make it work\n    // check if the position offset is done in the base viewport\n\n    var eye = direction.scale(-distance).multiply(new Vector3(1, 1, -1));\n    var viewMatrix = new Matrix4().multiplyRight(new Matrix4().lookAt({\n      eye: eye,\n      center: position,\n      up: up\n    }));\n    return _possibleConstructorReturn(this, (ThirdPersonViewport.__proto__ || Object.getPrototypeOf(ThirdPersonViewport)).call(this, Object.assign({}, opts, {\n      // use meter level\n      zoom: null,\n      viewMatrix: viewMatrix\n    })));\n  }\n\n  return ThirdPersonViewport;\n}(Viewport);\n\nexport default ThirdPersonViewport;\nThirdPersonViewport.displayName = 'ThirdPersonViewport';","map":null,"metadata":{},"sourceType":"module"}