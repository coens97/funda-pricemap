{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport lightingShader from './lighting.glsl';\nimport project from '../project/project';\nimport { projectPosition } from '../project/project-functions';\nimport memoize from '../../utils/memoize';\nexport default {\n  name: 'lighting',\n  dependencies: [project],\n  vs: lightingShader,\n  getUniforms: getUniforms,\n  deprecations: [// Deprecated lighting functions\n  {\n    type: 'function',\n    old: 'getLightWeight',\n    new: 'lighting_getLightWeight',\n    deprecated: true\n  }]\n};\nvar INITIAL_MODULE_OPTIONS = {};\nvar DEFAULT_LIGHTS_POSITION = [-122.45, 37.75, 8000];\nvar DEFAULT_LIGHTS_STRENGTH = [2.0, 0.0];\nvar DEFAULT_AMBIENT_RATIO = 0.4;\nvar DEFAULT_DIFFUSE_RATIO = 0.6;\nvar DEFAULT_SPECULAR_RATIO = 0.8;\nvar getMemoizedLightPositions = memoize(preprojectLightPositions); // TODO: support partial update, e.g.\n// `lightedModel.setModuleParameters({diffuseRatio: 0.3});`\n\nfunction getUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;\n\n  if (!opts.lightSettings) {\n    return {};\n  }\n\n  var coordinateSystem = opts.coordinateSystem,\n      coordinateOrigin = opts.coordinateOrigin,\n      _opts$lightSettings = opts.lightSettings,\n      _opts$lightSettings$n = _opts$lightSettings.numberOfLights,\n      numberOfLights = _opts$lightSettings$n === void 0 ? 1 : _opts$lightSettings$n,\n      _opts$lightSettings$l = _opts$lightSettings.lightsPosition,\n      lightsPosition = _opts$lightSettings$l === void 0 ? DEFAULT_LIGHTS_POSITION : _opts$lightSettings$l,\n      _opts$lightSettings$l2 = _opts$lightSettings.lightsStrength,\n      lightsStrength = _opts$lightSettings$l2 === void 0 ? DEFAULT_LIGHTS_STRENGTH : _opts$lightSettings$l2,\n      fromCoordinateSystem = _opts$lightSettings.coordinateSystem,\n      fromCoordinateOrigin = _opts$lightSettings.coordinateOrigin,\n      _opts$lightSettings$m = _opts$lightSettings.modelMatrix,\n      modelMatrix = _opts$lightSettings$m === void 0 ? null : _opts$lightSettings$m,\n      _opts$lightSettings$a = _opts$lightSettings.ambientRatio,\n      ambientRatio = _opts$lightSettings$a === void 0 ? DEFAULT_AMBIENT_RATIO : _opts$lightSettings$a,\n      _opts$lightSettings$d = _opts$lightSettings.diffuseRatio,\n      diffuseRatio = _opts$lightSettings$d === void 0 ? DEFAULT_DIFFUSE_RATIO : _opts$lightSettings$d,\n      _opts$lightSettings$s = _opts$lightSettings.specularRatio,\n      specularRatio = _opts$lightSettings$s === void 0 ? DEFAULT_SPECULAR_RATIO : _opts$lightSettings$s; // Pre-project light positions\n\n  var lightsPositionWorld = getMemoizedLightPositions({\n    lightsPosition: lightsPosition,\n    numberOfLights: numberOfLights,\n    viewport: opts.viewport,\n    modelMatrix: modelMatrix,\n    coordinateSystem: coordinateSystem,\n    coordinateOrigin: coordinateOrigin,\n    fromCoordinateSystem: fromCoordinateSystem,\n    fromCoordinateOrigin: fromCoordinateOrigin\n  });\n  return {\n    lighting_lightPositions: lightsPositionWorld,\n    lighting_lightStrengths: lightsStrength,\n    lighting_ambientRatio: ambientRatio,\n    lighting_diffuseRatio: diffuseRatio,\n    lighting_specularRatio: specularRatio,\n    lighting_numberOfLights: numberOfLights\n  };\n} // Pre-project light positions\n\n\nfunction preprojectLightPositions(_ref) {\n  var lightsPosition = _ref.lightsPosition,\n      numberOfLights = _ref.numberOfLights,\n      viewport = _ref.viewport,\n      modelMatrix = _ref.modelMatrix,\n      coordinateSystem = _ref.coordinateSystem,\n      coordinateOrigin = _ref.coordinateOrigin,\n      fromCoordinateSystem = _ref.fromCoordinateSystem,\n      fromCoordinateOrigin = _ref.fromCoordinateOrigin;\n  var projectionParameters = {\n    viewport: viewport,\n    modelMatrix: modelMatrix,\n    coordinateSystem: coordinateSystem,\n    coordinateOrigin: coordinateOrigin,\n    fromCoordinateSystem: fromCoordinateSystem,\n    fromCoordinateOrigin: fromCoordinateOrigin\n  };\n  var lightsPositionWorld = [];\n\n  for (var i = 0; i < numberOfLights; i++) {\n    var position = projectPosition(lightsPosition.slice(i * 3, i * 3 + 3), projectionParameters);\n    lightsPositionWorld[i * 3] = position[0];\n    lightsPositionWorld[i * 3 + 1] = position[1];\n    lightsPositionWorld[i * 3 + 2] = position[2];\n  }\n\n  return lightsPositionWorld;\n}","map":null,"metadata":{},"sourceType":"module"}