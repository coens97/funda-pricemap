{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Projection utils\n * TODO: move to Viewport class?\n */\n\n\nimport { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD } from './viewport-uniforms';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\nimport vec3_sub from 'gl-vec3/subtract';\nimport { getDistanceScales, addMetersToLngLat } from 'viewport-mercator-project'; // In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (pixelsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\n\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  var offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      _lngLatZ$ = _lngLatZ[2],\n      z = _lngLatZ$ === void 0 ? 0 : _lngLatZ$;\n\n  var _viewport$projectFlat = viewport.projectFlat(lngLatZ),\n      _viewport$projectFlat2 = _slicedToArray(_viewport$projectFlat, 2),\n      X = _viewport$projectFlat2[0],\n      Y = _viewport$projectFlat2[1];\n\n  var distanceScales = offsetMode ? getDistanceScales({\n    longitude: longitude,\n    latitude: latitude,\n    scale: viewport.scale\n  }) : viewport.getDistanceScales();\n  var Z = z * distanceScales.pixelsPerMeter[2];\n  return [X, Y, Z];\n}\n\nfunction normalizeParameters(opts) {\n  var normalizedParams = Object.assign({}, opts);\n  var viewport = opts.viewport,\n      coordinateSystem = opts.coordinateSystem,\n      coordinateOrigin = opts.coordinateOrigin,\n      fromCoordinateSystem = opts.fromCoordinateSystem,\n      fromCoordinateOrigin = opts.fromCoordinateOrigin;\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.zoom >= LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD) {\n    normalizedParams.coordinateSystem = COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n    normalizedParams.coordinateOrigin = [Math.fround(viewport.longitude), Math.fround(viewport.latitude)];\n  }\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(position, _ref) {\n  var viewport = _ref.viewport,\n      modelMatrix = _ref.modelMatrix,\n      coordinateSystem = _ref.coordinateSystem,\n      coordinateOrigin = _ref.coordinateOrigin,\n      offsetMode = _ref.offsetMode;\n\n  var _position = _slicedToArray(position, 3),\n      x = _position[0],\n      y = _position[1],\n      z = _position[2];\n\n  if (modelMatrix) {\n    var _vec4_transformMat = vec4_transformMat4([], [x, y, z, 1.0], modelMatrix);\n\n    var _vec4_transformMat2 = _slicedToArray(_vec4_transformMat, 3);\n\n    x = _vec4_transformMat2[0];\n    y = _vec4_transformMat2[1];\n    z = _vec4_transformMat2[2];\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.IDENTITY:\n    default:\n      return [x, y, z];\n  }\n}\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position in the target coordinates system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the coordinate system to project into\n * @param {array} params.coordinateOrigin - the coordinate origin to project into\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\n\nexport function projectPosition(position, params) {\n  var _normalizeParameters = normalizeParameters(params),\n      viewport = _normalizeParameters.viewport,\n      coordinateSystem = _normalizeParameters.coordinateSystem,\n      coordinateOrigin = _normalizeParameters.coordinateOrigin,\n      modelMatrix = _normalizeParameters.modelMatrix,\n      fromCoordinateSystem = _normalizeParameters.fromCoordinateSystem,\n      fromCoordinateOrigin = _normalizeParameters.fromCoordinateOrigin;\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      {\n        var worldPosition = getWorldPosition(position, {\n          viewport: viewport,\n          modelMatrix: modelMatrix,\n          coordinateSystem: fromCoordinateSystem,\n          coordinateOrigin: fromCoordinateOrigin,\n          offsetMode: true\n        });\n        var originWorld = lngLatZToWorldPosition(coordinateOrigin, viewport, true);\n        vec3_sub(worldPosition, worldPosition, originWorld);\n        return worldPosition;\n      }\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n    case COORDINATE_SYSTEM.IDENTITY:\n    default:\n      return getWorldPosition(position, {\n        viewport: viewport,\n        modelMatrix: modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode: false\n      });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}