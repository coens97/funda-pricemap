{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport transpileShader from './transpile-shader';\nimport assert from '../utils/assert';\nvar VERTEX_SHADER = 'vs';\nvar FRAGMENT_SHADER = 'fs';\n\nvar ShaderModule =\n/*#__PURE__*/\nfunction () {\n  function ShaderModule(_ref) {\n    var name = _ref.name,\n        vs = _ref.vs,\n        fs = _ref.fs,\n        _ref$dependencies = _ref.dependencies,\n        dependencies = _ref$dependencies === void 0 ? [] : _ref$dependencies,\n        _ref$getUniforms = _ref.getUniforms,\n        getUniforms = _ref$getUniforms === void 0 ? function () {\n      return {};\n    } : _ref$getUniforms,\n        _ref$deprecations = _ref.deprecations,\n        deprecations = _ref$deprecations === void 0 ? [] : _ref$deprecations,\n        vertexShader = _ref.vertexShader,\n        fragmentShader = _ref.fragmentShader;\n\n    _classCallCheck(this, ShaderModule);\n\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n  } // Extracts the source code chunk for the specified shader type from the named shader module\n\n\n  _createClass(ShaderModule, [{\n    key: \"getModuleSource\",\n    value: function getModuleSource(type, targetGLSLVersion) {\n      var moduleSource;\n\n      switch (type) {\n        case VERTEX_SHADER:\n          moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n          break;\n\n        case FRAGMENT_SHADER:\n          moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n          break;\n\n        default:\n          assert(false);\n      }\n\n      if (typeof moduleSource !== 'string') {\n        return '';\n      }\n\n      return \"#define MODULE_\".concat(this.name.toUpperCase(), \"\\n\").concat(moduleSource, \"// END MODULE_\").concat(this.name, \"\\n\\n\");\n    }\n  }, {\n    key: \"getUniforms\",\n    value: function getUniforms(opts, uniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    } // Warn about deprecated uniforms or functions\n\n  }, {\n    key: \"checkDeprecations\",\n    value: function checkDeprecations(shaderSource, log) {\n      this.deprecations.forEach(function (def) {\n        if (def.regex.test(shaderSource)) {\n          if (def.deprecated && log) {\n            log.deprecated(def.old, def.new)();\n          } else if (log) {\n            log.removed(def.old, def.new)();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_parseDeprecationDefinitions\",\n    value: function _parseDeprecationDefinitions() {\n      var deprecations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      deprecations.forEach(function (def) {\n        switch (def.type) {\n          case 'function':\n            def.regex = new RegExp(\"\\\\b\".concat(def.old, \"\\\\(\"));\n            break;\n\n          default:\n            def.regex = new RegExp(\"\".concat(def.type, \" \").concat(def.old, \";\"));\n        }\n      });\n      return deprecations;\n    }\n  }]);\n\n  return ShaderModule;\n}();\n\nexport { ShaderModule as default };","map":null,"metadata":{},"sourceType":"module"}