{"ast":null,"code":"// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default \"#define SHADER_NAME extruded-choropleths-layer-vertex-shader\\n\\nattribute vec4 positions;\\nattribute vec2 heights;\\nattribute vec3 normals;\\nattribute vec4 colors;\\n\\nuniform float opacity;\\nuniform float elevation;\\n\\nuniform vec3 uAmbientColor;\\nuniform float uPointLightAmbientCoefficient;\\nuniform vec3 uPointLightLocation;\\nuniform vec3 uPointLightColor;\\nuniform float uPointLightAttenuation;\\n\\nuniform vec3 uMaterialSpecularColor;\\nuniform float uMaterialShininess;\\n\\nvarying vec4 vColor;\\n\\nvec3 applyLighting(vec3 position_modelspace, vec3 normal_modelspace, vec3 color) {\\n\\n  vec3 pointLightLocation_modelspace = vec3(project_position(uPointLightLocation));\\n  vec3 lightDirection = normalize(pointLightLocation_modelspace - position_modelspace);\\n\\n  vec3 ambient = uPointLightAmbientCoefficient * color / 255.0 * uAmbientColor / 255.0;\\n\\n  float diffuseCoefficient = max(dot(normal_modelspace, lightDirection), 0.0);\\n  vec3 diffuse = diffuseCoefficient * uPointLightColor / 255. * color / 255.;\\n\\n  return ambient + uPointLightAttenuation * diffuse;\\n}\\n\\nvoid main(void) {\\n  vec2 projected_xy[2];\\n  project_position_fp64(positions, projected_xy);\\n  vec2 scaled_height = mul_fp64(heights, vec2(projectionPixelsPerUnit.x * elevation, 0.0));\\n\\n  vec2 vertex_pos_modelspace[4];\\n  vertex_pos_modelspace[0] = projected_xy[0];\\n  vertex_pos_modelspace[1] = projected_xy[1];\\n  vertex_pos_modelspace[2] = sum_fp64(scaled_height, vec2(1.0, 0.0));\\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\\n\\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\\n\\n  vec3 color = applyLighting(\\n  \\tvec3(\\n  \\t  vertex_pos_modelspace[0].x,\\n  \\t  vertex_pos_modelspace[1].x,\\n  \\t  vertex_pos_modelspace[2].x),\\n  \\tnormals,\\n  \\tcolors.rgb\\n  );\\n  vColor = vec4(color, opacity);\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}