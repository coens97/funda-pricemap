{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\n\nimport Accessor from './accessor';\nimport { isWebGL2 } from '../webgl-utils';\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\n\nvar ProgramConfiguration =\n/*#__PURE__*/\nfunction () {\n  function ProgramConfiguration(program) {\n    _classCallCheck(this, ProgramConfiguration);\n\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n\n    this._readAttributesFromProgram(program);\n\n    this._readVaryingsFromProgram(program);\n  }\n\n  _createClass(ProgramConfiguration, [{\n    key: \"getAttributeInfo\",\n    value: function getAttributeInfo(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return this.attributeInfos[location];\n      }\n\n      return this.attributeInfosByName[locationOrName] || null;\n    } // Resolves an attribute name or index to an index\n\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.location : -1;\n    }\n  }, {\n    key: \"getAttributeAccessor\",\n    value: function getAttributeAccessor(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.accessor : null;\n    }\n  }, {\n    key: \"getVaryingInfo\",\n    value: function getVaryingInfo(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return this.varyingInfos[location];\n      }\n\n      return this.varyingInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getVaryingIndex\",\n    value: function getVaryingIndex(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.location : -1;\n    }\n  }, {\n    key: \"getVaryingAccessor\",\n    value: function getVaryingAccessor(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.accessor : null;\n    } // PRIVATE METHODS\n    // linkProgram needs to have been called, although linking does not need to have been successful\n\n  }, {\n    key: \"_readAttributesFromProgram\",\n    value: function _readAttributesFromProgram(program) {\n      var gl = program.gl;\n      var count = gl.getProgramParameter(program.handle, 35721);\n\n      for (var index = 0; index < count; index++) {\n        var _gl$getActiveAttrib = gl.getActiveAttrib(program.handle, index),\n            name = _gl$getActiveAttrib.name,\n            type = _gl$getActiveAttrib.type,\n            size = _gl$getActiveAttrib.size;\n\n        var location = gl.getAttribLocation(program.handle, name);\n\n        this._addAttribute(location, name, type, size);\n      }\n\n      this.attributeInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    } // linkProgram needs to have been called, although linking does not need to have been successful\n\n  }, {\n    key: \"_readVaryingsFromProgram\",\n    value: function _readVaryingsFromProgram(program) {\n      var gl = program.gl;\n\n      if (!isWebGL2(gl)) {\n        return;\n      }\n\n      var count = gl.getProgramParameter(program.handle, 35971);\n\n      for (var location = 0; location < count; location++) {\n        var _gl$getTransformFeedb = gl.getTransformFeedbackVarying(program.handle, location),\n            name = _gl$getTransformFeedb.name,\n            type = _gl$getTransformFeedb.type,\n            size = _gl$getTransformFeedb.size;\n\n        this._addVarying(location, name, type, size);\n      }\n\n      this.varyingInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_addAttribute\",\n    value: function _addAttribute(location, name, compositeType, size) {\n      var _decomposeCompositeGL = decomposeCompositeGLType(compositeType),\n          type = _decomposeCompositeGL.type,\n          components = _decomposeCompositeGL.components;\n\n      var accessor = {\n        type: type,\n        size: size * components\n      };\n\n      this._inferProperties(location, name, accessor);\n\n      var attributeInfo = {\n        location: location,\n        name: name,\n        accessor: new Accessor(accessor)\n      }; // Base values\n\n      this.attributeInfos.push(attributeInfo);\n      this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n    } // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n\n  }, {\n    key: \"_inferProperties\",\n    value: function _inferProperties(location, name, accessor) {\n      if (/instance/i.test(name)) {\n        // Any attribute containing the word \"instance\" will be assumed to be instanced\n        accessor.divisor = 1;\n      }\n    }\n  }, {\n    key: \"_addVarying\",\n    value: function _addVarying(location, name, compositeType, size) {\n      var _decomposeCompositeGL2 = decomposeCompositeGLType(compositeType),\n          type = _decomposeCompositeGL2.type,\n          components = _decomposeCompositeGL2.components;\n\n      var accessor = new Accessor({\n        type: type,\n        size: size * components\n      });\n      var varying = {\n        location: location,\n        name: name,\n        accessor: accessor\n      }; // Base values\n\n      this.varyingInfos.push(varying);\n      this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n    }\n  }]);\n\n  return ProgramConfiguration;\n}();\n\nexport { ProgramConfiguration as default };","map":null,"metadata":{},"sourceType":"module"}