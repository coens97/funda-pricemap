{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { CompositeLayer, experimental } from '../../core';\nimport HexagonCellLayer from '../hexagon-cell-layer/hexagon-cell-layer';\nvar log = experimental.log,\n    BinSorter = experimental.BinSorter,\n    getQuantizeScale = experimental.getQuantizeScale,\n    getLinearScale = experimental.getLinearScale,\n    defaultColorRange = experimental.defaultColorRange;\nimport { pointToHexbin } from './hexagon-aggregator';\n\nfunction nop() {}\n\nvar defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: function getColorValue(points) {\n    return points.length;\n  },\n  lowerPercentile: 0,\n  upperPercentile: 100,\n  onSetColorDomain: nop,\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: function getElevationValue(points) {\n    return points.length;\n  },\n  elevationLowerPercentile: 0,\n  elevationUpperPercentile: 100,\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n  radius: 1000,\n  coverage: 1,\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: function getPosition(x) {\n    return x.position;\n  },\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {\n    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.0, 5000],\n    ambientRatio: 0.05,\n    diffuseRatio: 0.6,\n    specularRatio: 0.8,\n    lightsStrength: [2.0, 0.0, 0.0, 0.0],\n    numberOfLights: 2\n  }\n};\n\nvar HexagonLayer = function (_CompositeLayer) {\n  _inherits(HexagonLayer, _CompositeLayer);\n\n  function HexagonLayer(props) {\n    _classCallCheck(this, HexagonLayer);\n\n    if (!props.hexagonAggregator && !props.radius) {\n      log.once(0, 'HexagonLayer: Default hexagonAggregator requires radius prop to be set, ' + 'Now using 1000 meter as default');\n      props.radius = defaultProps.radius;\n    }\n\n    if (Number.isFinite(props.upperPercentile) && (props.upperPercentile > 100 || props.upperPercentile < 0)) {\n      log.once(0, 'HexagonLayer: upperPercentile should be between 0 and 100. ' + 'Assign to 100 by default');\n      props.upperPercentile = defaultProps.upperPercentile;\n    }\n\n    if (Number.isFinite(props.lowerPercentile) && (props.lowerPercentile > 100 || props.lowerPercentile < 0)) {\n      log.once(0, 'HexagonLayer: lowerPercentile should be between 0 and 100. ' + 'Assign to 0 by default');\n      props.lowerPercentile = defaultProps.upperPercentile;\n    }\n\n    if (props.lowerPercentile >= props.upperPercentile) {\n      log.once(0, 'HexagonLayer: lowerPercentile should not be bigger than ' + 'upperPercentile. Assign to 0 by default');\n      props.lowerPercentile = defaultProps.lowerPercentile;\n    }\n\n    return _possibleConstructorReturn(this, (HexagonLayer.__proto__ || Object.getPrototypeOf(HexagonLayer)).call(this, props));\n  }\n\n  _createClass(HexagonLayer, [{\n    key: 'initializeState',\n    value: function initializeState() {\n      this.state = {\n        hexagons: [],\n        hexagonVertices: null,\n        sortedColorBins: null,\n        sortedElevationBins: null,\n        colorValueDomain: null,\n        elevationValueDomain: null,\n        colorScaleFunc: nop,\n        elevationScaleFunc: nop,\n        dimensionUpdaters: this.getDimensionUpdaters()\n      };\n    }\n  }, {\n    key: 'shouldUpdateState',\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref2) {\n      var _this2 = this;\n\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n      var dimensionChanges = this.getDimensionChanges(oldProps, props);\n\n      if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {\n        // project data into hexagons, and get sortedColorBins\n        this.getHexagons();\n      } else if (dimensionChanges) {\n        dimensionChanges.forEach(function (f) {\n          return typeof f === 'function' && f.apply(_this2);\n        });\n      }\n    }\n  }, {\n    key: 'needsReProjectPoints',\n    value: function needsReProjectPoints(oldProps, props) {\n      return oldProps.radius !== props.radius || oldProps.hexagonAggregator !== props.hexagonAggregator;\n    }\n  }, {\n    key: 'getDimensionUpdaters',\n    value: function getDimensionUpdaters() {\n      // dimension updaters are sequential,\n      // if the first one needs to be called, the 2nd and 3rd one will automatically\n      // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n      // will automatically be called\n      return {\n        getColor: [{\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        }, {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        }, {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }],\n        getElevation: [{\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        }, {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        }, {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }]\n      };\n    }\n  }, {\n    key: 'getDimensionChanges',\n    value: function getDimensionChanges(oldProps, props) {\n      var dimensionUpdaters = this.state.dimensionUpdaters;\n      var updaters = []; // get dimension to be updated\n\n      for (var dimensionKey in dimensionUpdaters) {\n        // return the first triggered updater for each dimension\n        var needUpdate = dimensionUpdaters[dimensionKey].find(function (item) {\n          return item.triggers.some(function (t) {\n            return oldProps[t] !== props[t];\n          });\n        });\n\n        if (needUpdate) {\n          updaters.push(needUpdate.updater);\n        }\n      }\n\n      return updaters.length ? updaters : null;\n    }\n  }, {\n    key: 'getHexagons',\n    value: function getHexagons() {\n      var hexagonAggregator = this.props.hexagonAggregator;\n      var viewport = this.context.viewport;\n\n      var _hexagonAggregator = hexagonAggregator(this.props, viewport),\n          hexagons = _hexagonAggregator.hexagons,\n          hexagonVertices = _hexagonAggregator.hexagonVertices;\n\n      this.setState({\n        hexagons: hexagons,\n        hexagonVertices: hexagonVertices\n      });\n      this.getSortedBins();\n    }\n  }, {\n    key: 'getPickingInfo',\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info;\n      var _state = this.state,\n          sortedColorBins = _state.sortedColorBins,\n          sortedElevationBins = _state.sortedElevationBins;\n      var isPicked = info.picked && info.index > -1;\n      var object = null;\n\n      if (isPicked) {\n        var cell = this.state.hexagons[info.index];\n        var colorValue = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n        var elevationValue = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n        object = Object.assign({\n          colorValue: colorValue,\n          elevationValue: elevationValue\n        }, cell);\n      } // add bin colorValue and elevationValue to info\n\n\n      return Object.assign(info, {\n        picked: Boolean(object),\n        // override object with picked cell\n        object: object\n      });\n    }\n  }, {\n    key: 'getUpdateTriggers',\n    value: function getUpdateTriggers() {\n      var _this3 = this;\n\n      var dimensionUpdaters = this.state.dimensionUpdaters; // merge all dimension triggers\n\n      var updateTriggers = {};\n\n      var _loop = function _loop(dimensionKey) {\n        updateTriggers[dimensionKey] = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = dimensionUpdaters[dimensionKey][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var step = _step.value;\n            step.triggers.forEach(function (prop) {\n              updateTriggers[dimensionKey][prop] = _this3.props[prop];\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      for (var dimensionKey in dimensionUpdaters) {\n        _loop(dimensionKey);\n      }\n\n      return updateTriggers;\n    }\n  }, {\n    key: 'getValueDomain',\n    value: function getValueDomain() {\n      this.getColorValueDomain();\n      this.getElevationValueDomain();\n    }\n  }, {\n    key: 'getSortedBins',\n    value: function getSortedBins() {\n      this.getSortedColorBins();\n      this.getSortedElevationBins();\n    }\n  }, {\n    key: 'getSortedColorBins',\n    value: function getSortedColorBins() {\n      var getColorValue = this.props.getColorValue;\n      var sortedColorBins = new BinSorter(this.state.hexagons || [], getColorValue);\n      this.setState({\n        sortedColorBins: sortedColorBins\n      });\n      this.getColorValueDomain();\n    }\n  }, {\n    key: 'getSortedElevationBins',\n    value: function getSortedElevationBins() {\n      var getElevationValue = this.props.getElevationValue;\n      var sortedElevationBins = new BinSorter(this.state.hexagons || [], getElevationValue);\n      this.setState({\n        sortedElevationBins: sortedElevationBins\n      });\n      this.getElevationValueDomain();\n    }\n  }, {\n    key: 'getColorValueDomain',\n    value: function getColorValueDomain() {\n      var _props = this.props,\n          lowerPercentile = _props.lowerPercentile,\n          upperPercentile = _props.upperPercentile,\n          onSetColorDomain = _props.onSetColorDomain;\n      this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([lowerPercentile, upperPercentile]);\n\n      if (typeof onSetColorDomain === 'function') {\n        onSetColorDomain(this.state.colorValueDomain);\n      }\n\n      this.getColorScale();\n    }\n  }, {\n    key: 'getElevationValueDomain',\n    value: function getElevationValueDomain() {\n      var _props2 = this.props,\n          elevationLowerPercentile = _props2.elevationLowerPercentile,\n          elevationUpperPercentile = _props2.elevationUpperPercentile,\n          onSetElevationDomain = _props2.onSetElevationDomain;\n      this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([elevationLowerPercentile, elevationUpperPercentile]);\n\n      if (typeof onSetElevationDomain === 'function') {\n        onSetElevationDomain(this.state.elevationValueDomain);\n      }\n\n      this.getElevationScale();\n    }\n  }, {\n    key: 'getColorScale',\n    value: function getColorScale() {\n      var colorRange = this.props.colorRange;\n      var colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n      this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n    }\n  }, {\n    key: 'getElevationScale',\n    value: function getElevationScale() {\n      var elevationRange = this.props.elevationRange;\n      var elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n      this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n    }\n  }, {\n    key: '_onGetSublayerColor',\n    value: function _onGetSublayerColor(cell) {\n      var _state2 = this.state,\n          sortedColorBins = _state2.sortedColorBins,\n          colorScaleFunc = _state2.colorScaleFunc,\n          colorValueDomain = _state2.colorValueDomain;\n      var cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      var colorDomain = this.props.colorDomain || colorValueDomain;\n      var isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1]; // if cell value is outside domain, set alpha to 0\n\n      var color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0]; // add alpha to color if not defined in colorRange\n\n      color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n      return color;\n    }\n  }, {\n    key: '_onGetSublayerElevation',\n    value: function _onGetSublayerElevation(cell) {\n      var _state3 = this.state,\n          sortedElevationBins = _state3.sortedElevationBins,\n          elevationScaleFunc = _state3.elevationScaleFunc,\n          elevationValueDomain = _state3.elevationValueDomain;\n      var ev = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n      var elevationDomain = this.props.elevationDomain || elevationValueDomain;\n      var isElevationValueInDomain = ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1]; // if cell value is outside domain, set elevation to -1\n\n      return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n    } // for subclassing, override this method to return\n    // customized sub layer props\n\n  }, {\n    key: 'getSubLayerProps',\n    value: function getSubLayerProps() {\n      var _props3 = this.props,\n          radius = _props3.radius,\n          elevationScale = _props3.elevationScale,\n          extruded = _props3.extruded,\n          coverage = _props3.coverage,\n          lightSettings = _props3.lightSettings,\n          fp64 = _props3.fp64; // return props to the sublayer constructor\n\n      return _get(HexagonLayer.prototype.__proto__ || Object.getPrototypeOf(HexagonLayer.prototype), 'getSubLayerProps', this).call(this, {\n        id: 'hexagon-cell',\n        data: this.state.hexagons,\n        fp64: fp64,\n        hexagonVertices: this.state.hexagonVertices,\n        radius: radius,\n        elevationScale: elevationScale,\n        angle: Math.PI,\n        extruded: extruded,\n        coverage: coverage,\n        lightSettings: lightSettings,\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        updateTriggers: this.getUpdateTriggers()\n      });\n    } // for subclassing, override this method to return\n    // customized sub layer class\n\n  }, {\n    key: 'getSubLayerClass',\n    value: function getSubLayerClass() {\n      return HexagonCellLayer;\n    }\n  }, {\n    key: 'renderLayers',\n    value: function renderLayers() {\n      var SubLayerClass = this.getSubLayerClass();\n      return new SubLayerClass(this.getSubLayerProps());\n    }\n  }]);\n\n  return HexagonLayer;\n}(CompositeLayer);\n\nexport default HexagonLayer;\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}