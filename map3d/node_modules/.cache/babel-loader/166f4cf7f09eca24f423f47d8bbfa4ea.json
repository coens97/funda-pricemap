{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport { VertexShader, FragmentShader } from '../../webgl/shader';\nimport assert from 'assert';\nvar ERR_SOURCE = 'ShaderCache expects source strings';\nvar ERR_CONTEXT = 'ShaderCache does not support caching across multiple contexts';\n\nvar ShaderCache =\n/*#__PURE__*/\nfunction () {\n  /**\n   * A cache of compiled shaders, keyed by shader source strings.\n   * Compilation of long shaders can be time consuming.\n   * By using this class, the application can ensure that each shader\n   * is only compiled once.\n   */\n  function ShaderCache() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        gl = _ref.gl;\n\n    _classCallCheck(this, ShaderCache);\n\n    this.gl = gl;\n    this.vertexShaders = {};\n    this.fragmentShaders = {};\n  }\n  /**\n   * Deletes shader references\n   * @return {ShaderCache} - returns this for chaining\n   */\n\n\n  _createClass(ShaderCache, [{\n    key: 'delete',\n    value: function _delete() {\n      // TODO - requires reference counting to avoid deleting shaders in use\n      return this;\n    }\n    /**\n     * Returns a compiled `VertexShader` object corresponding to the supplied\n     * GLSL source code string, if possible from cache.\n     *\n     * @param {WebGLRenderingContext} gl - gl context\n     * @param {String} source - Source code for shader\n     * @return {VertexShader} - a compiled vertex shader\n     */\n\n  }, {\n    key: 'getVertexShader',\n    value: function getVertexShader(gl, source) {\n      assert(typeof source === 'string', ERR_SOURCE);\n      var shader = this.vertexShaders[source];\n      assert(!shader || shader.gl === gl, ERR_CONTEXT);\n\n      if (!shader) {\n        shader = new VertexShader(gl, source);\n        this.vertexShaders[source] = shader;\n      }\n\n      return shader;\n    }\n    /**\n     * Returns a compiled `VertexShader` object corresponding to the supplied\n     * GLSL source code string, if possible from cache.\n     *\n     * @param {WebGLRenderingContext} gl - gl context\n     * @param {String} source - Source code for shader\n     * @return {FragmentShader} - a compiled fragment shader, possibly from chache\n     */\n\n  }, {\n    key: 'getFragmentShader',\n    value: function getFragmentShader(gl, source) {\n      assert(typeof source === 'string', ERR_SOURCE);\n      var shader = this.fragmentShaders[source];\n      assert(!shader || shader.gl === gl, ERR_CONTEXT);\n\n      if (!shader) {\n        shader = new FragmentShader(gl, source);\n        this.fragmentShaders[source] = shader;\n      }\n\n      return shader;\n    }\n  }]);\n\n  return ShaderCache;\n}();\n\nexport default ShaderCache;","map":null,"metadata":{},"sourceType":"module"}