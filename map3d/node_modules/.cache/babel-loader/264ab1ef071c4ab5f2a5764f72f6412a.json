{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport GL from './gl-constants';\nimport Resource from './resource';\nimport { isWebGL2, assertWebGL2Context } from './context';\nimport assert from 'assert';\nvar GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\nvar GL_TRANSFORM_FEEDBACK = 0x8E22;\n\nvar TranformFeedback =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(TranformFeedback, _Resource);\n\n  _createClass(TranformFeedback, null, [{\n    key: 'isSupported',\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }, {\n    key: 'isHandle',\n    value: function isHandle(handle) {\n      return this.gl.isTransformFeedback(this.handle);\n    }\n    /**\n     * @class\n     * @param {WebGL2RenderingContext} gl - context\n     * @param {Object} opts - options\n     */\n\n  }]);\n\n  function TranformFeedback(gl, opts) {\n    _classCallCheck(this, TranformFeedback);\n\n    assertWebGL2Context(gl);\n\n    var _this = _possibleConstructorReturn(this, (TranformFeedback.__proto__ || Object.getPrototypeOf(TranformFeedback)).call(this, gl, opts));\n\n    _this.buffers = {};\n    Object.seal(_this);\n\n    _this.initialize(opts);\n\n    return _this;\n  }\n\n  _createClass(TranformFeedback, [{\n    key: 'initialize',\n    value: function initialize(_ref) {\n      var _ref$buffers = _ref.buffers,\n          buffers = _ref$buffers === undefined ? {} : _ref$buffers;\n      this.bindBuffers(buffers, {\n        clear: true\n      });\n    }\n  }, {\n    key: 'bindBuffers',\n    value: function bindBuffers() {\n      var buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _ref2 = arguments[1];\n      var clear = _ref2.clear,\n          _ref2$varyingMap = _ref2.varyingMap,\n          varyingMap = _ref2$varyingMap === undefined ? {} : _ref2$varyingMap;\n\n      if (clear) {\n        this._unbindBuffers();\n\n        this.buffers = {};\n      }\n\n      var bufferIndex = 0;\n\n      for (var bufferName in buffers) {\n        var buffer = buffers[bufferName];\n        var index = bufferIndex++;\n        assert(Number.isFinite(index));\n        this.buffers[index] = buffer;\n      }\n    } // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate\n    // program.use, should we move these methods (begin/pause/resume/end) to the Program?\n\n  }, {\n    key: 'begin',\n    value: function begin(primitiveMode) {\n      this._bindBuffers();\n\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.beginTransformFeedback(primitiveMode);\n      return this;\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.pauseTransformFeedback();\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n\n      this._unbindBuffers();\n\n      return this;\n    }\n  }, {\n    key: 'resume',\n    value: function resume() {\n      this._bindBuffers();\n\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.resumeTransformFeedback();\n      return this;\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.endTransformFeedback();\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n\n      this._unbindBuffers();\n\n      return this;\n    }\n  }, {\n    key: 'bindBuffer',\n    value: function bindBuffer(_ref3) {\n      var index = _ref3.index,\n          buffer = _ref3.buffer,\n          _ref3$offset = _ref3.offset,\n          offset = _ref3$offset === undefined ? 0 : _ref3$offset,\n          size = _ref3.size;\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n\n      if (size === undefined) {\n        this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);\n      } else {\n        this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);\n      }\n\n      return this;\n    }\n  }, {\n    key: 'unbindBuffer',\n    value: function unbindBuffer(_ref4) {\n      var index = _ref4.index;\n      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);\n      return this;\n    } // PRIVATE METHODS\n    // See https://github.com/KhronosGroup/WebGL/issues/2346\n    // If it was true that having a buffer on an unused TF was a problem\n    // it would make the entire concept of transform feedback objects pointless.\n    // The whole point of them is like VertexArrayObjects.\n    // You set them up with all in outputs at init time and\n    // then in one call you can setup all the outputs just before drawing.\n    // Since the point of transform feedback is to generate data that will\n    // then be used as inputs to attributes it makes zero sense you'd\n    // have to unbind them from every unused transform feedback object\n    // before you could use them in an attribute. If that was the case\n    // there would be no reason to setup transform feedback objects ever.\n    // You'd always use the default because you'd always have to bind and\n    // unbind all the buffers.\n\n  }, {\n    key: '_bindBuffers',\n    value: function _bindBuffers() {\n      for (var bufferIndex in this.buffers) {\n        this.bindBuffer({\n          buffer: this.buffers[bufferIndex],\n          index: Number(bufferIndex)\n        });\n      }\n    }\n  }, {\n    key: '_unbindBuffers',\n    value: function _unbindBuffers() {\n      for (var bufferIndex in this.buffers) {\n        this.unbindBuffer({\n          buffer: this.buffers[bufferIndex],\n          index: Number(bufferIndex)\n        });\n      }\n    } // RESOURCE METHODS\n\n  }, {\n    key: '_createHandle',\n    value: function _createHandle() {\n      return this.gl.createTransformFeedback();\n    }\n  }, {\n    key: '_deleteHandle',\n    value: function _deleteHandle() {\n      this.gl.deleteTransformFeedback(this.handle);\n    }\n  }]);\n\n  return TranformFeedback;\n}(Resource); // Counts the number of complete \"primitives\" given a number of vertices and a drawMode\n\n\nexport default TranformFeedback;\nexport function getPrimitiveCount(_ref5) {\n  var drawMode = _ref5.drawMode,\n      vertexCount = _ref5.vertexCount,\n      countVertices = _ref5.countVertices;\n\n  switch (drawMode) {\n    case GL.POINTS:\n      return vertexCount;\n\n    case GL.LINES:\n      return vertexCount / 2;\n\n    case GL.LINE_STRIP:\n      return vertexCount - 1;\n\n    case GL.LINE_LOOP:\n      return vertexCount;\n\n    case GL.TRIANGLES:\n      return vertexCount / 3;\n\n    case GL.TRIANGLE_STRIP:\n      return vertexCount - 2;\n\n    case GL.TRIANGLE_FAN:\n      return vertexCount - 2;\n\n    default:\n      assert(false);\n      return 0;\n  }\n} // Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\n\nexport function getVertexCount(_ref6) {\n  var drawMode = _ref6.drawMode,\n      vertexCount = _ref6.vertexCount;\n  var primitiveCount = getPrimitiveCount({\n    drawMode: drawMode,\n    vertexCount: vertexCount\n  });\n\n  switch (drawMode) {\n    case GL.POINTS:\n      return primitiveCount;\n\n    case GL.LINES:\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n      return vertexCount * 2;\n\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return vertexCount * 3;\n\n    default:\n      assert(false);\n      return 0;\n  }\n} // Counts the number of complete primitives given a number of vertices and a drawMode\n\nexport function getTransformFeedbackMode(_ref7) {\n  var drawMode = _ref7.drawMode;\n\n  switch (drawMode) {\n    case GL.POINTS:\n      return GL.POINTS;\n\n    case GL.LINES:\n      return GL.LINES;\n\n    case GL.LINE_STRIP:\n      return GL.LINES;\n\n    case GL.LINE_LOOP:\n      return GL.LINES;\n\n    case GL.TRIANGLES:\n      return GL.TRIANGLES;\n\n    case GL.TRIANGLE_STRIP:\n      return GL.TRIANGLES;\n\n    case GL.TRIANGLE_FAN:\n      return GL.TRIANGLES;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}