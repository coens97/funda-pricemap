{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_perspective from 'gl-mat4/perspective';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nvar PerspectiveView =\n/*#__PURE__*/\nfunction (_View) {\n  _inherits(PerspectiveView, _View);\n\n  function PerspectiveView() {\n    _classCallCheck(this, PerspectiveView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PerspectiveView).apply(this, arguments));\n  }\n\n  _createClass(PerspectiveView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(props) {\n      var x = props.x,\n          y = props.y,\n          width = props.width,\n          height = props.height,\n          viewState = props.viewState;\n      var eye = viewState.eye,\n          _viewState$lookAt = viewState.lookAt,\n          lookAt = _viewState$lookAt === void 0 ? [0, 0, 0] : _viewState$lookAt,\n          _viewState$up = viewState.up,\n          up = _viewState$up === void 0 ? [0, 1, 0] : _viewState$up; // Projection matrix arguments\n      // TODO - Extracting from viewState is deprecated\n\n      var fovy = props.fovy || viewState.fovy || 75; // Field of view covered by camera\n\n      var near = props.near || viewState.near || 1; // Distance of near clipping plane\n\n      var far = props.far || viewState.far || 100; // Distance of far clipping plane\n\n      var aspect = Number.isFinite(viewState.aspect) ? viewState.aspect : width / height;\n      var fovyRadians = fovy * DEGREES_TO_RADIANS;\n      return new Viewport({\n        id: this.id,\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        viewMatrix: mat4_lookAt([], eye, lookAt, up),\n        projectionMatrix: mat4_perspective([], fovyRadians, aspect, near, far)\n      });\n    }\n  }]);\n\n  return PerspectiveView;\n}(View);\n\nexport { PerspectiveView as default };\nPerspectiveView.displayName = 'PerspectiveView';","map":null,"metadata":{},"sourceType":"module"}