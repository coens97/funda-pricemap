{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { Layer } from '../../../lib';\nimport { get } from '../../../lib/utils';\nimport { GL, Model, Geometry } from 'luma.gl';\nimport { enable64bitSupport } from '../../../lib/utils/fp64';\nimport { COORDINATE_SYSTEM } from '../../../lib'; // Polygon geometry generation is managed by the polygon tesselator\n\nimport { PolygonTesselator } from './polygon-tesselator';\nimport { PolygonTesselatorExtruded } from './polygon-tesselator-extruded';\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport vs64 from './solid-polygon-layer-vertex-64.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nvar defaultProps = {\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n  // Accessor for polygon geometry\n  getPolygon: function getPolygon(f) {\n    return get(f, 'polygon') || get(f, 'geometry.coordinates');\n  },\n  // Accessor for extrusion height\n  getElevation: function getElevation(f) {\n    return get(f, 'elevation') || get(f, 'properties.height') || 0;\n  },\n  // Accessor for color\n  getColor: function getColor(f) {\n    return get(f, 'color') || get(f, 'properties.color');\n  },\n  // Optional settings for 'lighting' shader module\n  lightSettings: {\n    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],\n    ambientRatio: 0.05,\n    diffuseRatio: 0.6,\n    specularRatio: 0.8,\n    lightsStrength: [2.0, 0.0, 0.0, 0.0],\n    numberOfLights: 2\n  }\n};\n\nvar SolidPolygonLayer = function (_Layer) {\n  _inherits(SolidPolygonLayer, _Layer);\n\n  function SolidPolygonLayer() {\n    _classCallCheck(this, SolidPolygonLayer);\n\n    return _possibleConstructorReturn(this, (SolidPolygonLayer.__proto__ || Object.getPrototypeOf(SolidPolygonLayer)).apply(this, arguments));\n  }\n\n  _createClass(SolidPolygonLayer, [{\n    key: 'getShaders',\n    value: function getShaders() {\n      return enable64bitSupport(this.props) ? {\n        vs: vs64,\n        fs: fs,\n        modules: ['project64', 'lighting']\n      } : {\n        vs: vs,\n        fs: fs,\n        modules: ['lighting']\n      }; // 'project' module added by default.\n    }\n  }, {\n    key: 'initializeState',\n    value: function initializeState() {\n      var gl = this.context.gl;\n      this.setState({\n        model: this._getModel(gl),\n        numInstances: 0,\n        IndexType: gl.getExtension('OES_element_index_uint') ? Uint32Array : Uint16Array\n      });\n      var attributeManager = this.state.attributeManager;\n      var noAlloc = true;\n      /* eslint-disable max-len */\n\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: this.calculateIndices,\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          accessor: 'getElevation',\n          update: this.calculatePositions,\n          noAlloc: noAlloc\n        },\n        normals: {\n          size: 3,\n          update: this.calculateNormals,\n          noAlloc: noAlloc\n        },\n        colors: {\n          size: 4,\n          type: GL.UNSIGNED_BYTE,\n          accessor: 'getColor',\n          update: this.calculateColors,\n          noAlloc: noAlloc\n        },\n        pickingColors: {\n          size: 3,\n          type: GL.UNSIGNED_BYTE,\n          update: this.calculatePickingColors,\n          noAlloc: noAlloc\n        }\n      });\n      /* eslint-enable max-len */\n    }\n  }, {\n    key: 'updateAttribute',\n    value: function updateAttribute(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var attributeManager = this.state.attributeManager;\n        attributeManager.invalidateAll();\n\n        if (props.fp64 && props.projectionMode === COORDINATE_SYSTEM.LNGLAT) {\n          attributeManager.add({\n            positions64xyLow: {\n              size: 2,\n              update: this.calculatePositionsLow\n            }\n          });\n        } else {\n          attributeManager.remove(['positions64xyLow']);\n        }\n      }\n    }\n  }, {\n    key: 'draw',\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _props = this.props,\n          extruded = _props.extruded,\n          lightSettings = _props.lightSettings;\n      this.state.model.render(Object.assign({}, uniforms, {\n        extruded: extruded ? 1.0 : 0.0\n      }, lightSettings));\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          changeFlags = _ref3.changeFlags;\n\n      _get(SolidPolygonLayer.prototype.__proto__ || Object.getPrototypeOf(SolidPolygonLayer.prototype), 'updateState', this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var regenerateModel = this.updateGeometry({\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (regenerateModel) {\n        var gl = this.context.gl;\n        this.setState({\n          model: this._getModel(gl)\n        });\n      }\n\n      this.updateAttribute({\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n    }\n  }, {\n    key: 'updateGeometry',\n    value: function updateGeometry(_ref4) {\n      var _this2 = this;\n\n      var props = _ref4.props,\n          oldProps = _ref4.oldProps,\n          changeFlags = _ref4.changeFlags;\n      var geometryConfigChanged = props.extruded !== oldProps.extruded || props.wireframe !== oldProps.wireframe || props.fp64 !== oldProps.fp64; // When the geometry config  or the data is changed,\n      // tessellator needs to be invoked\n\n      if (changeFlags.dataChanged || geometryConfigChanged) {\n        var getPolygon = props.getPolygon,\n            extruded = props.extruded,\n            wireframe = props.wireframe,\n            getElevation = props.getElevation; // TODO - avoid creating a temporary array here: let the tesselator iterate\n\n        var polygons = props.data.map(getPolygon);\n        this.setState({\n          polygonTesselator: !extruded ? new PolygonTesselator({\n            polygons: polygons,\n            fp64: this.props.fp64\n          }) : new PolygonTesselatorExtruded({\n            polygons: polygons,\n            wireframe: wireframe,\n            getHeight: function getHeight(polygonIndex) {\n              return getElevation(_this2.props.data[polygonIndex]);\n            },\n            fp64: this.props.fp64\n          })\n        });\n        this.state.attributeManager.invalidateAll();\n      }\n\n      return geometryConfigChanged;\n    }\n  }, {\n    key: '_getModel',\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: this.props.wireframe ? GL.LINES : GL.TRIANGLES\n        }),\n        vertexCount: 0,\n        isIndexed: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }, {\n    key: 'calculateIndices',\n    value: function calculateIndices(attribute) {\n      attribute.value = this.state.polygonTesselator.indices();\n      attribute.target = GL.ELEMENT_ARRAY_BUFFER;\n      this.state.model.setVertexCount(attribute.value.length / attribute.size);\n    }\n  }, {\n    key: 'calculatePositions',\n    value: function calculatePositions(attribute) {\n      attribute.value = this.state.polygonTesselator.positions().positions;\n    }\n  }, {\n    key: 'calculatePositionsLow',\n    value: function calculatePositionsLow(attribute) {\n      attribute.value = this.state.polygonTesselator.positions().positions64xyLow;\n    }\n  }, {\n    key: 'calculateNormals',\n    value: function calculateNormals(attribute) {\n      attribute.value = this.state.polygonTesselator.normals();\n    }\n  }, {\n    key: 'calculateColors',\n    value: function calculateColors(attribute) {\n      var _this3 = this;\n\n      attribute.value = this.state.polygonTesselator.colors({\n        getColor: function getColor(polygonIndex) {\n          return _this3.props.getColor(_this3.props.data[polygonIndex]);\n        }\n      });\n    } // Override the default picking colors calculation\n\n  }, {\n    key: 'calculatePickingColors',\n    value: function calculatePickingColors(attribute) {\n      attribute.value = this.state.polygonTesselator.pickingColors();\n    }\n  }]);\n\n  return SolidPolygonLayer;\n}(Layer);\n\nexport default SolidPolygonLayer;\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}