{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.diffSources = diffSources;\nexports.diffLayers = diffLayers;\nexports.default = diffStyle;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Copyright (c) 2015 Uber Technologies, Inc.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements */\n\n\nfunction diffSources(prevStyle, nextStyle) {\n  var prevSources = prevStyle.get('sources');\n  var nextSources = nextStyle.get('sources');\n  var enter = [];\n  var update = [];\n  var exit = [];\n  var prevIds = prevSources.keySeq().toArray();\n  var nextIds = nextSources.keySeq().toArray();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator3.default)(prevIds), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var id = _step.value;\n      var nextSource = nextSources.get(id);\n\n      if (nextSource) {\n        if (!nextSource.equals(prevSources.get(id))) {\n          update.push({\n            id: id,\n            source: nextSources.get(id)\n          });\n        }\n      } else {\n        exit.push({\n          id: id,\n          source: prevSources.get(id)\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = (0, _getIterator3.default)(nextIds), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _id = _step2.value;\n      var prevSource = prevSources.get(_id);\n\n      if (!prevSource) {\n        enter.push({\n          id: _id,\n          source: nextSources.get(_id)\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return {\n    enter: enter,\n    update: update,\n    exit: exit\n  };\n}\n/* eslint-enable max-statements */\n\n\nfunction diffLayers(prevStyle, nextStyle) {\n  var prevLayers = prevStyle.get('layers');\n  var nextLayers = nextStyle.get('layers');\n  var updates = [];\n  var exiting = [];\n  var prevMap = {};\n  var nextMap = {};\n  nextLayers.forEach(function (layer, index) {\n    var id = layer.get('id');\n    var layerImBehind = nextLayers.get(index + 1);\n    nextMap[id] = {\n      layer: layer,\n      id: id,\n      // The `id` of the layer before this one.\n      before: layerImBehind ? layerImBehind.get('id') : null,\n      enter: true\n    };\n  });\n  prevLayers.forEach(function (layer, index) {\n    var id = layer.get('id');\n    var layerImBehind = prevLayers.get(index + 1);\n    prevMap[id] = {\n      layer: layer,\n      id: id,\n      before: layerImBehind ? layerImBehind.get('id') : null\n    };\n\n    if (nextMap[id]) {\n      // Not a new layer.\n      nextMap[id].enter = false;\n    } else {\n      // This layer is being removed.\n      exiting.push(prevMap[id]);\n    }\n  });\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = (0, _getIterator3.default)(nextLayers.reverse()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var layer = _step3.value;\n      var id = layer.get('id');\n\n      if (!prevMap[id] || !prevMap[id].layer.equals(nextMap[id].layer) || prevMap[id].before !== nextMap[id].before) {\n        // This layer is being changed.\n        updates.push(nextMap[id]);\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return {\n    updates: updates,\n    exiting: exiting\n  };\n}\n\nfunction diffStyle(prevStyle, nextStyle) {\n  return {\n    sourcesDiff: diffSources(prevStyle, nextStyle),\n    layersDiff: diffLayers(prevStyle, nextStyle)\n  };\n}","map":null,"metadata":{},"sourceType":"script"}