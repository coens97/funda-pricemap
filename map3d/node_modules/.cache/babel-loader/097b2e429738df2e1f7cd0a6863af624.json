{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* global window */\n\n\nimport { clear, isWebGL } from '../webgl';\nimport { log } from '../utils';\nimport Group from './group';\nimport assert from '../utils/assert';\nvar ILLEGAL_ARG = 'Illegal argument to pick';\n\nfunction getDevicePixelRatio() {\n  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n}\n\nexport default function pickModels(gl, _ref) {\n  var models = _ref.models,\n      position = _ref.position,\n      _ref$uniforms = _ref.uniforms,\n      uniforms = _ref$uniforms === void 0 ? {} : _ref$uniforms,\n      _ref$parameters = _ref.parameters,\n      parameters = _ref$parameters === void 0 ? {} : _ref$parameters,\n      settings = _ref.settings,\n      _ref$useDevicePixelRa = _ref.useDevicePixelRatio,\n      useDevicePixelRatio = _ref$useDevicePixelRa === void 0 ? null : _ref$useDevicePixelRa,\n      _ref$useDevicePixels = _ref.useDevicePixels,\n      useDevicePixels = _ref$useDevicePixels === void 0 ? true : _ref$useDevicePixels,\n      framebuffer = _ref.framebuffer;\n  assert(isWebGL(gl), ILLEGAL_ARG);\n  assert(framebuffer, ILLEGAL_ARG);\n  assert(position, ILLEGAL_ARG);\n\n  if (useDevicePixelRatio !== null) {\n    log.deprecated('useDevicePixelRatio', 'useDevicePixels')();\n    useDevicePixels = useDevicePixelRatio;\n  }\n\n  var _position = _slicedToArray(position, 2),\n      x = _position[0],\n      y = _position[1]; // Match our picking framebuffer with the size of the canvas drawing buffer\n\n\n  framebuffer.resize({\n    width: gl.canvas.width,\n    height: gl.canvas.height\n  }); // Compensate for devicePixelRatio\n  // Note: this assumes the canvas framebuffer has been matched\n\n  var dpr = useDevicePixels ? getDevicePixelRatio() : 1; // Reverse the y coordinate\n\n  var deviceX = x * dpr;\n  var deviceY = gl.canvas.height - y * dpr; // return withParameters(gl, {\n  //   // framebuffer,\n  //   // // We are only interested in one pixel, no need to render anything else\n  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}\n  // }, () => {\n\n  var group = new Group({\n    children: models\n  });\n  return group.traverseReverse(function (model) {\n    if (model.isPickable()) {\n      // Clear the frame buffer\n      clear(gl, {\n        framebuffer: framebuffer,\n        color: true,\n        depth: true\n      }); // Render picking colors\n\n      /* eslint-disable camelcase */\n\n      model.setUniforms({\n        picking_uActive: 1\n      });\n      model.draw({\n        uniforms: uniforms,\n        parameters: parameters,\n        settings: settings,\n        framebuffer: framebuffer\n      });\n      model.setUniforms({\n        picking_uActive: 0\n      }); // Sample Read color in the central pixel, to be mapped as a picking color\n\n      var color = framebuffer.readPixels({\n        x: deviceX,\n        y: deviceY,\n        width: 1,\n        height: 1,\n        format: gl.RGBA,\n        type: gl.UNSIGNED_BYTE\n      });\n      var isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0; // Add the information to the stack\n\n      if (isPicked) {\n        return {\n          model: model,\n          color: color,\n          x: x,\n          y: y,\n          deviceX: deviceX,\n          deviceY: deviceY\n        };\n      }\n    }\n\n    return null;\n  }); // });\n}","map":null,"metadata":{},"sourceType":"module"}