{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _react = require('react');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _autobind = require('../utils/autobind');\n\nvar _autobind2 = _interopRequireDefault(_autobind);\n\nvar _staticMap = require('./static-map');\n\nvar _staticMap2 = _interopRequireDefault(_staticMap);\n\nvar _mapState = require('../utils/map-state');\n\nvar _viewportMercatorProject = require('viewport-mercator-project');\n\nvar _eventManager = require('../utils/event-manager/event-manager');\n\nvar _eventManager2 = _interopRequireDefault(_eventManager);\n\nvar _mapControls = require('../utils/map-controls');\n\nvar _mapControls2 = _interopRequireDefault(_mapControls);\n\nvar _config = require('../config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _deprecateWarn = require('../utils/deprecate-warn');\n\nvar _deprecateWarn2 = _interopRequireDefault(_deprecateWarn);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar propTypes = (0, _assign2.default)({}, _staticMap2.default.propTypes, {\n  // Additional props on top of StaticMap\n\n  /** Viewport constraints */\n  // Max zoom level\n  maxZoom: _propTypes2.default.number,\n  // Min zoom level\n  minZoom: _propTypes2.default.number,\n  // Max pitch in degrees\n  maxPitch: _propTypes2.default.number,\n  // Min pitch in degrees\n  minPitch: _propTypes2.default.number,\n\n  /**\n   * `onViewportChange` callback is fired when the user interacted with the\n   * map. The object passed to the callback contains viewport properties\n   * such as `longitude`, `latitude`, `zoom` etc.\n   */\n  onViewportChange: _propTypes2.default.func,\n\n  /** Enables control event handling */\n  // Scroll to zoom\n  scrollZoom: _propTypes2.default.bool,\n  // Drag to pan\n  dragPan: _propTypes2.default.bool,\n  // Drag to rotate\n  dragRotate: _propTypes2.default.bool,\n  // Double click to zoom\n  doubleClickZoom: _propTypes2.default.bool,\n  // Pinch to zoom / rotate\n  touchZoomRotate: _propTypes2.default.bool,\n\n  /**\n     * Called when the map is hovered over.\n     * @callback\n     * @param {Object} event - The mouse event.\n     * @param {[Number, Number]} event.lngLat - The coordinates of the pointer\n     * @param {Array} event.features - The features under the pointer, using Mapbox's\n     * queryRenderedFeatures API:\n     * https://www.mapbox.com/mapbox-gl-js/api/#Map#queryRenderedFeatures\n     * To make a layer interactive, set the `interactive` property in the\n     * layer style to `true`. See Mapbox's style spec\n     * https://www.mapbox.com/mapbox-gl-style-spec/#layer-interactive\n     */\n  onHover: _propTypes2.default.func,\n\n  /**\n    * Called when the map is clicked.\n    * @callback\n    * @param {Object} event - The mouse event.\n    * @param {[Number, Number]} event.lngLat - The coordinates of the pointer\n    * @param {Array} event.features - The features under the pointer, using Mapbox's\n    * queryRenderedFeatures API:\n    * https://www.mapbox.com/mapbox-gl-js/api/#Map#queryRenderedFeatures\n    * To make a layer interactive, set the `interactive` property in the\n    * layer style to `true`. See Mapbox's style spec\n    * https://www.mapbox.com/mapbox-gl-style-spec/#layer-interactive\n    */\n  onClick: _propTypes2.default.func,\n\n  /** Radius to detect features around a clicked point. Defaults to 0. */\n  clickRadius: _propTypes2.default.number,\n\n  /** Accessor that returns a cursor style to show interactive state */\n  getCursor: _propTypes2.default.func,\n\n  /** Advanced features */\n  // Contraints for displaying the map. If not met, then the map is hidden.\n  // Experimental! May be changed in minor version updates.\n  visibilityConstraints: _propTypes2.default.shape({\n    minZoom: _propTypes2.default.number,\n    maxZoom: _propTypes2.default.number,\n    minPitch: _propTypes2.default.number,\n    maxPitch: _propTypes2.default.number\n  }),\n  // A map control instance to replace the default map controls\n  // The object must expose one property: `events` as an array of subscribed\n  // event names; and two methods: `setState(state)` and `handle(event)`\n  mapControls: _propTypes2.default.shape({\n    events: _propTypes2.default.arrayOf(_propTypes2.default.string),\n    handleEvent: _propTypes2.default.func\n  })\n});\n\nvar getDefaultCursor = function getDefaultCursor(_ref) {\n  var isDragging = _ref.isDragging,\n      isHovering = _ref.isHovering;\n  return isDragging ? _config2.default.CURSOR.GRABBING : isHovering ? _config2.default.CURSOR.POINTER : _config2.default.CURSOR.GRAB;\n};\n\nvar defaultProps = (0, _assign2.default)({}, _staticMap2.default.defaultProps, _mapState.MAPBOX_LIMITS, {\n  onViewportChange: null,\n  onClick: null,\n  onHover: null,\n  scrollZoom: true,\n  dragPan: true,\n  dragRotate: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  clickRadius: 0,\n  getCursor: getDefaultCursor,\n  visibilityConstraints: _mapState.MAPBOX_LIMITS\n});\nvar childContextTypes = {\n  viewport: _propTypes2.default.instanceOf(_viewportMercatorProject.PerspectiveMercatorViewport),\n  isDragging: _propTypes2.default.bool\n};\n\nvar InteractiveMap = function (_PureComponent) {\n  (0, _inherits3.default)(InteractiveMap, _PureComponent);\n  (0, _createClass3.default)(InteractiveMap, null, [{\n    key: 'supported',\n    value: function supported() {\n      return _staticMap2.default.supported();\n    }\n  }]);\n\n  function InteractiveMap(props) {\n    (0, _classCallCheck3.default)(this, InteractiveMap);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (InteractiveMap.__proto__ || (0, _getPrototypeOf2.default)(InteractiveMap)).call(this, props));\n\n    (0, _autobind2.default)(_this); // Check for deprecated props\n\n    (0, _deprecateWarn2.default)(props);\n    _this.state = {\n      // Whether the cursor is down\n      isDragging: false,\n      // Whether the cursor is over a clickable feature\n      isHovering: false\n    }; // If props.mapControls is not provided, fallback to default MapControls instance\n    // Cannot use defaultProps here because it needs to be per map instance\n\n    _this._mapControls = props.mapControls || new _mapControls2.default();\n    return _this;\n  }\n\n  (0, _createClass3.default)(InteractiveMap, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        viewport: new _viewportMercatorProject.PerspectiveMercatorViewport(this.props),\n        isDragging: this.state.isDragging\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var eventManager = new _eventManager2.default(this._eventCanvas); // Register additional event handlers for click and hover\n\n      eventManager.on('mousemove', this._onMouseMove);\n      eventManager.on('click', this._onMouseClick);\n      this._eventManager = eventManager;\n\n      this._mapControls.setOptions((0, _assign2.default)({}, this.props, {\n        onStateChange: this._onInteractiveStateChange,\n        eventManager: eventManager\n      }));\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps) {\n      this._mapControls.setOptions(nextProps);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._eventManager) {\n        // Must destroy because hammer adds event listeners to window\n        this._eventManager.destroy();\n      }\n    }\n  }, {\n    key: 'getMap',\n    value: function getMap() {\n      return this._map.getMap();\n    }\n  }, {\n    key: 'queryRenderedFeatures',\n    value: function queryRenderedFeatures(geometry, options) {\n      return this._map.queryRenderedFeatures(geometry, options);\n    } // Checks a visibilityConstraints object to see if the map should be displayed\n\n  }, {\n    key: 'checkVisibilityConstraints',\n    value: function checkVisibilityConstraints(props) {\n      var capitalize = function capitalize(s) {\n        return s[0].toUpperCase() + s.slice(1);\n      };\n\n      var visibilityConstraints = props.visibilityConstraints;\n\n      for (var propName in props) {\n        var capitalizedPropName = capitalize(propName);\n        var minPropName = 'min' + capitalizedPropName;\n        var maxPropName = 'max' + capitalizedPropName;\n\n        if (minPropName in visibilityConstraints && props[propName] < visibilityConstraints[minPropName]) {\n          return false;\n        }\n\n        if (maxPropName in visibilityConstraints && props[propName] > visibilityConstraints[maxPropName]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: '_getFeatures',\n    value: function _getFeatures(_ref2) {\n      var pos = _ref2.pos,\n          radius = _ref2.radius;\n      var features = void 0;\n\n      if (radius) {\n        // Radius enables point features, like marker symbols, to be clicked.\n        var size = radius;\n        var bbox = [[pos[0] - size, pos[1] + size], [pos[0] + size, pos[1] - size]];\n        features = this._map.queryRenderedFeatures(bbox);\n      } else {\n        features = this._map.queryRenderedFeatures(pos);\n      }\n\n      return features;\n    }\n  }, {\n    key: '_onInteractiveStateChange',\n    value: function _onInteractiveStateChange(_ref3) {\n      var _ref3$isDragging = _ref3.isDragging,\n          isDragging = _ref3$isDragging === undefined ? false : _ref3$isDragging;\n\n      if (isDragging !== this.state.isDragging) {\n        this.setState({\n          isDragging: isDragging\n        });\n      }\n    } // HOVER AND CLICK\n\n  }, {\n    key: '_getPos',\n    value: function _getPos(event) {\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: '_onMouseMove',\n    value: function _onMouseMove(event) {\n      if (!this.state.isDragging) {\n        var pos = this._getPos(event);\n\n        var features = this._getFeatures({\n          pos: pos,\n          radius: this.props.clickRadius\n        });\n\n        var isHovering = features && features.length > 0;\n\n        if (isHovering !== this.state.isHovering) {\n          this.setState({\n            isHovering: isHovering\n          });\n        }\n\n        if (this.props.onHover) {\n          var viewport = new _viewportMercatorProject.PerspectiveMercatorViewport(this.props);\n          event.lngLat = viewport.unproject(pos);\n          event.features = features;\n          this.props.onHover(event);\n        }\n      }\n    }\n  }, {\n    key: '_onMouseClick',\n    value: function _onMouseClick(event) {\n      if (this.props.onClick) {\n        var pos = this._getPos(event);\n\n        var viewport = new _viewportMercatorProject.PerspectiveMercatorViewport(this.props);\n        event.lngLat = viewport.unproject(pos);\n        event.features = this._getFeatures({\n          pos: pos,\n          radius: this.props.clickRadius\n        });\n        this.props.onClick(event);\n      }\n    }\n  }, {\n    key: '_eventCanvasLoaded',\n    value: function _eventCanvasLoaded(ref) {\n      this._eventCanvas = ref;\n    }\n  }, {\n    key: '_staticMapLoaded',\n    value: function _staticMapLoaded(ref) {\n      this._map = ref;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height,\n          getCursor = _props.getCursor;\n      var eventCanvasStyle = {\n        width: width,\n        height: height,\n        position: 'relative',\n        cursor: getCursor(this.state)\n      };\n      return (0, _react.createElement)('div', {\n        key: 'map-controls',\n        ref: this._eventCanvasLoaded,\n        style: eventCanvasStyle\n      }, (0, _react.createElement)(_staticMap2.default, (0, _assign2.default)({}, this.props, {\n        visible: this.checkVisibilityConstraints(this.props),\n        ref: this._staticMapLoaded\n      })));\n    }\n  }]);\n  return InteractiveMap;\n}(_react.PureComponent);\n\nexports.default = InteractiveMap;\nInteractiveMap.displayName = 'InteractiveMap';\nInteractiveMap.propTypes = propTypes;\nInteractiveMap.defaultProps = defaultProps;\nInteractiveMap.childContextTypes = childContextTypes;","map":null,"metadata":{},"sourceType":"script"}