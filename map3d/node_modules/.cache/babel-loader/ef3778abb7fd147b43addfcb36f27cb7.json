{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* global window */\n\nimport { clear, isWebGL } from '../webgl';\nimport Group from './group';\nimport assert from '../utils/assert';\n\nfunction getDevicePixelRatio() {\n  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n}\n\nexport default function pickModels(gl, props) {\n  var models = props.models,\n      position = props.position,\n      _props$uniforms = props.uniforms,\n      uniforms = _props$uniforms === void 0 ? {} : _props$uniforms,\n      _props$parameters = props.parameters,\n      parameters = _props$parameters === void 0 ? {} : _props$parameters,\n      settings = props.settings,\n      _props$useDevicePixel = props.useDevicePixels,\n      useDevicePixels = _props$useDevicePixel === void 0 ? true : _props$useDevicePixel,\n      framebuffer = props.framebuffer,\n      context = props.context;\n  assert(isWebGL(gl) && framebuffer && position);\n\n  var _position = _slicedToArray(position, 2),\n      x = _position[0],\n      y = _position[1]; // Match our picking framebuffer with the size of the canvas drawing buffer\n\n\n  framebuffer.resize({\n    width: gl.canvas.width,\n    height: gl.canvas.height\n  }); // Compensate for devicePixelRatio\n  // Note: this assumes the canvas framebuffer has been matched\n\n  var dpr = useDevicePixels ? getDevicePixelRatio() : 1; // Reverse the y coordinate\n\n  var deviceX = x * dpr;\n  var deviceY = gl.canvas.height - y * dpr; // return withParameters(gl, {\n  //   // framebuffer,\n  //   // // We are only interested in one pixel, no need to render anything else\n  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}\n  // }, () => {\n\n  var group = new Group({\n    children: models\n  });\n  return group.traverseReverse(function (model) {\n    if (model.pickable) {\n      // Clear the frame buffer\n      clear(gl, {\n        framebuffer: framebuffer,\n        color: true,\n        depth: true\n      }); // Render picking colors\n\n      /* eslint-disable camelcase */\n\n      model.setUniforms({\n        picking_uActive: 1\n      });\n      model.draw(Object.assign({}, props, {\n        uniforms: uniforms,\n        parameters: parameters,\n        settings: settings,\n        framebuffer: framebuffer,\n        context: context\n      }));\n      model.setUniforms({\n        picking_uActive: 0\n      }); // Sample Read color in the central pixel, to be mapped as a picking color\n\n      var color = framebuffer.readPixels({\n        x: deviceX,\n        y: deviceY,\n        width: 1,\n        height: 1,\n        format: 6408,\n        type: 5121\n      });\n      var isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0; // Add the information to the stack\n\n      if (isPicked) {\n        return {\n          model: model,\n          color: color,\n          x: x,\n          y: y,\n          deviceX: deviceX,\n          deviceY: deviceY\n        };\n      }\n    }\n\n    return null;\n  }); // });\n}","map":null,"metadata":{},"sourceType":"module"}