{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport Viewport from './viewport';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_perspective from 'gl-mat4/perspective';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nvar PerspectiveViewport = function (_Viewport) {\n  _inherits(PerspectiveViewport, _Viewport);\n\n  function PerspectiveViewport(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        eye = _ref.eye,\n        _ref$lookAt = _ref.lookAt,\n        lookAt = _ref$lookAt === undefined ? [0, 0, 0] : _ref$lookAt,\n        _ref$up = _ref.up,\n        up = _ref$up === undefined ? [0, 1, 0] : _ref$up,\n        _ref$fovy = _ref.fovy,\n        fovy = _ref$fovy === undefined ? 75 : _ref$fovy,\n        _ref$near = _ref.near,\n        near = _ref$near === undefined ? 1 : _ref$near,\n        _ref$far = _ref.far,\n        far = _ref$far === undefined ? 100 : _ref$far,\n        _ref$aspect = _ref.aspect,\n        aspect = _ref$aspect === undefined ? null : _ref$aspect;\n\n    _classCallCheck(this, PerspectiveViewport);\n\n    var fovyRadians = fovy * DEGREES_TO_RADIANS;\n    aspect = Number.isFinite(aspect) ? aspect : width / height;\n    return _possibleConstructorReturn(this, (PerspectiveViewport.__proto__ || Object.getPrototypeOf(PerspectiveViewport)).call(this, {\n      viewMatrix: mat4_lookAt([], eye, lookAt, up),\n      projectionMatrix: mat4_perspective([], fovyRadians, aspect, near, far),\n      width: width,\n      height: height\n    }));\n  }\n\n  return PerspectiveViewport;\n}(Viewport);\n\nexport default PerspectiveViewport;","map":null,"metadata":{},"sourceType":"module"}