{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nvar counter = 0;\n\nvar Effect = function () {\n  function Effect() {\n    _classCallCheck(this, Effect);\n\n    this.count = counter++;\n    this.visible = true;\n    this.priority = 0;\n    this.needsRedraw = false;\n  }\n  /**\n   * subclasses should override to set up any resources needed\n   */\n\n\n  _createClass(Effect, [{\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var gl = _ref.gl,\n          layerManager = _ref.layerManager;\n    }\n    /**\n     * and subclasses should free those resources here\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(_ref2) {\n      var gl = _ref2.gl,\n          layerManager = _ref2.layerManager;\n    }\n    /**\n     * override for a callback immediately before drawing each frame\n     */\n\n  }, {\n    key: \"preDraw\",\n    value: function preDraw(_ref3) {\n      var gl = _ref3.gl,\n          layerManager = _ref3.layerManager;\n    }\n    /**\n     * override for a callback immediately after drawing a frame's layers\n     */\n\n  }, {\n    key: \"draw\",\n    value: function draw(_ref4) {\n      var gl = _ref4.gl,\n          layerManager = _ref4.layerManager;\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.needsRedraw = redraw;\n    }\n  }]);\n\n  return Effect;\n}();\n\nexport default Effect;","map":null,"metadata":{},"sourceType":"module"}