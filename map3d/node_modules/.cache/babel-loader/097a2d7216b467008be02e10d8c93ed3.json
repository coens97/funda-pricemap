{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n} // Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport { CompositeLayer } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n  getPolygon: function getPolygon(f) {\n    return f.polygon;\n  },\n  // Polygon fill color\n  getFillColor: defaultFillColor,\n  // Point, line and polygon outline color\n  getLineColor: defaultLineColor,\n  // Line and polygon outline accessors\n  getLineWidth: 1,\n  // Line dash array accessor\n  getLineDashArray: null,\n  // Polygon extrusion accessor\n  getElevation: 1000,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nvar PolygonLayer =\n/*#__PURE__*/\nfunction (_CompositeLayer) {\n  _inherits(PolygonLayer, _CompositeLayer);\n\n  function PolygonLayer() {\n    _classCallCheck(this, PolygonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PolygonLayer).apply(this, arguments));\n  }\n\n  _createClass(PolygonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        paths: []\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n      if (geometryChanged) {\n        var _this$props = this.props,\n            data = _this$props.data,\n            getPolygon = _this$props.getPolygon;\n        this.state.paths = [];\n        data.forEach(function (object) {\n          var complexPolygon = Polygon.normalize(getPolygon(object));\n          complexPolygon.forEach(function (polygon) {\n            return _this.state.paths.push({\n              path: polygon,\n              object: object\n            });\n          });\n        });\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      return Object.assign(info, {\n        // override object with picked data\n        object: info.object && info.object.object || info.object\n      });\n    }\n  }, {\n    key: \"_getAccessor\",\n    value: function _getAccessor(accessor) {\n      if (typeof accessor === 'function') {\n        return function (x) {\n          return accessor(x.object);\n        };\n      }\n\n      return accessor;\n    }\n    /* eslint-disable complexity */\n\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      // Layer composition props\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          stroked = _this$props2.stroked,\n          filled = _this$props2.filled,\n          extruded = _this$props2.extruded,\n          wireframe = _this$props2.wireframe,\n          elevationScale = _this$props2.elevationScale,\n          transitions = _this$props2.transitions; // Rendering props underlying layer\n\n      var _this$props3 = this.props,\n          lineWidthScale = _this$props3.lineWidthScale,\n          lineWidthMinPixels = _this$props3.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props3.lineWidthMaxPixels,\n          lineJointRounded = _this$props3.lineJointRounded,\n          lineMiterLimit = _this$props3.lineMiterLimit,\n          lineDashJustified = _this$props3.lineDashJustified,\n          fp64 = _this$props3.fp64; // Accessor props for underlying layers\n\n      var _this$props4 = this.props,\n          getFillColor = _this$props4.getFillColor,\n          getLineColor = _this$props4.getLineColor,\n          getLineWidth = _this$props4.getLineWidth,\n          getLineDashArray = _this$props4.getLineDashArray,\n          getElevation = _this$props4.getElevation,\n          getPolygon = _this$props4.getPolygon,\n          updateTriggers = _this$props4.updateTriggers,\n          lightSettings = _this$props4.lightSettings;\n      var paths = this.state.paths;\n      var hasData = data && data.length > 0; // Filled Polygon Layer\n\n      var polygonLayer = hasData && new SolidPolygonLayer(this.getSubLayerProps({\n        id: 'fill',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: data,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        fp64: fp64,\n        filled: filled,\n        wireframe: wireframe,\n        getPolygon: getPolygon,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        lightSettings: lightSettings,\n        transitions: transitions\n      }); // Polygon line layer\n\n      var polygonLineLayer = !extruded && stroked && hasData && new PathLayer(this.getSubLayerProps({\n        id: 'stroke',\n        updateTriggers: {\n          getWidth: updateTriggers.getLineWidth,\n          getColor: updateTriggers.getLineColor,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: paths,\n        fp64: fp64,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        transitions: transitions && {\n          getWidth: transitions.getLineWidth,\n          getColor: transitions.getLineColor,\n          getPath: transitions.getPolygon\n        },\n        getPath: function getPath(x) {\n          return x.path;\n        },\n        getColor: this._getAccessor(getLineColor),\n        getWidth: this._getAccessor(getLineWidth),\n        getDashArray: this._getAccessor(getLineDashArray)\n      });\n      return [// If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer, polygonLineLayer, // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer];\n    }\n    /* eslint-enable complexity */\n\n  }]);\n\n  return PolygonLayer;\n}(CompositeLayer);\n\nexport { PolygonLayer as default };\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}