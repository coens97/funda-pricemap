{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\"; // WebGL2 VertexArrayObject class\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { isWebGL2 } from '../webgl-utils';\nimport { getScratchArray, fillArray } from '../utils/array-utils-flat';\nimport { assert } from '../utils';\nimport { getBrowser } from 'probe.gl';\n/* eslint-disable camelcase */\n\nvar OES_vertex_array_object = 'OES_vertex_array_object';\nvar ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nvar VertexArrayObject =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(VertexArrayObject, _Resource);\n\n  _createClass(VertexArrayObject, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Attribute 0 can not be disable on most desktop OpenGL based browsers\n      // and on iOS Safari browser.\n\n      if (options.constantAttributeZero) {\n        return isWebGL2(gl) || getBrowser() === 'Chrome';\n      } // Whether additional objects can be created\n\n\n      return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n    } // Returns the global (null) vertex array object. Exists even when no extension available\n\n  }, {\n    key: \"getDefaultArray\",\n    value: function getDefaultArray(gl) {\n      gl.luma = gl.luma || {};\n\n      if (!gl.luma.defaultVertexArray) {\n        gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n          handle: null\n        });\n      }\n\n      return gl.luma.defaultVertexArray;\n    }\n  }, {\n    key: \"getMaxAttributes\",\n    value: function getMaxAttributes(gl) {\n      // TODO - should be cached per context\n      VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n      return VertexArrayObject.MAX_ATTRIBUTES;\n    } // Note: Constants are stored globally on the WebGL context, not the VAO\n    // So they need to be updated before every render\n    // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n    // TODO - remember/cache values to avoid setting them unnecessarily?\n\n  }, {\n    key: \"setConstant\",\n    value: function setConstant(gl, location, array) {\n      switch (array.constructor) {\n        case Float32Array:\n          VertexArrayObject._setConstantFloatArray(gl, location, array);\n\n          break;\n\n        case Int32Array:\n          VertexArrayObject._setConstantIntArray(gl, location, array);\n\n          break;\n\n        case Uint32Array:\n          VertexArrayObject._setConstantUintArray(gl, location, array);\n\n          break;\n\n        default:\n          assert(false);\n      }\n    } // Create a VertexArray\n\n  }]);\n\n  function VertexArrayObject(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VertexArrayObject); // Use program's id if program but no id is supplied\n\n\n    var id = opts.id || opts.program && opts.program.id;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VertexArrayObject).call(this, gl, Object.assign({}, opts, {\n      id: id\n    })));\n    _this.hasVertexArrays = VertexArrayObject.isSupported(gl);\n    _this.buffer = null;\n    _this.bufferValue = null;\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VertexArrayObject, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VertexArrayObject.prototype), \"delete\", this).call(this);\n\n      if (this.buffer) {\n        this.buffer.delete();\n      }\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.setProps(props);\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      // TODO: decide which props should be supported\n      return this;\n    } // Set (bind) an elements buffer, for indexed rendering.\n    // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n\n  }, {\n    key: \"setElementBuffer\",\n    value: function setElementBuffer() {\n      var _this2 = this;\n\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS); // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n\n      this.bind(function () {\n        _this2.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n      });\n      return this;\n    } // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n\n  }, {\n    key: \"setBuffer\",\n    value: function setBuffer(location, buffer, accessor) {\n      // Check target\n      if (buffer.target === 34963) {\n        return this.setElementBuffer(buffer, accessor);\n      }\n\n      var size = accessor.size,\n          type = accessor.type,\n          stride = accessor.stride,\n          offset = accessor.offset,\n          normalized = accessor.normalized,\n          integer = accessor.integer,\n          divisor = accessor.divisor;\n      var gl = this.gl;\n      location = Number(location);\n      this.bind(function () {\n        // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n        gl.bindBuffer(34962, buffer.handle); // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n\n        if (integer) {\n          assert(isWebGL2(gl));\n          gl.vertexAttribIPointer(location, size, type, stride, offset);\n        } else {\n          // Attaches ARRAY_BUFFER with specified buffer format to location\n          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n        }\n\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribDivisor(location, divisor || 0); // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n      });\n      return this;\n    } // Enabling an attribute location makes it reference the currently bound buffer\n    // Disabling an attribute location makes it reference the global constant value\n    // TODO - handle single values for size 1 attributes?\n    // TODO - convert classic arrays based on known type?\n\n  }, {\n    key: \"enable\",\n    value: function enable(location) {\n      var _this3 = this;\n\n      var _enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true; // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n\n\n      var disablingAttributeZero = !_enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n        constantAttributeZero: true\n      });\n\n      if (!disablingAttributeZero) {\n        location = Number(location);\n        this.bind(function () {\n          return _enable ? _this3.gl.enableVertexAttribArray(location) : _this3.gl.disableVertexAttribArray(location);\n        });\n      }\n\n      return this;\n    } // Provide a means to create a buffer that is equivalent to a constant.\n    // NOTE: Desktop OpenGL cannot disable attribute 0.\n    // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n    // this-has-significant-performance-penalt\n\n  }, {\n    key: \"getConstantBuffer\",\n    value: function getConstantBuffer(elementCount, value, accessor) {\n      // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n      var constantValue = this._normalizeConstantArrayValue(value, accessor);\n\n      var byteLength = constantValue.byteLength * elementCount;\n      var length = constantValue.length * elementCount;\n      var updateNeeded = !this.buffer;\n      this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n      updateNeeded = updateNeeded || this.buffer.setByteLength(byteLength); // Reallocate and update contents if needed\n\n      updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n      if (updateNeeded) {\n        // Create a typed array that is big enough, and fill it with the required data\n        var typedArray = getScratchArray(value.constructor, length);\n        fillArray({\n          target: typedArray,\n          source: constantValue,\n          start: 0,\n          count: length\n        });\n        this.buffer.subData(typedArray);\n        this.bufferValue = value;\n      }\n\n      return this.buffer;\n    } // PRIVATE\n    // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n    // TODO - handle single values for size 1 attributes?\n\n  }, {\n    key: \"_normalizeConstantArrayValue\",\n    value: function _normalizeConstantArrayValue(arrayValue, accessor) {\n      if (Array.isArray(arrayValue)) {\n        return new Float32Array(arrayValue);\n      }\n\n      return arrayValue;\n    }\n  }, {\n    key: \"_compareConstantArrayValues\",\n    value: function _compareConstantArrayValues(v1, v2) {\n      if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n        return false;\n      }\n\n      for (var i = 0; i < v1.length; ++i) {\n        if (v1[i] !== v2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_createHandle\",\n    // RESOURCE IMPLEMENTATION\n    value: function _createHandle() {\n      this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);\n\n      if (this.hasVertexArrays) {\n        return this.gl.createVertexArray();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle(handle) {\n      if (this.hasVertexArrays) {\n        this.gl.deleteVertexArray(handle);\n      }\n\n      return [this.elements]; // return [this.elements, ...this.buffers];\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      if (this.hasVertexArrays) {\n        this.gl.bindVertexArray(handle);\n      }\n    } // Generic getter for information about a vertex attribute at a given position\n\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname, _ref) {\n      var _this4 = this;\n\n      var location = _ref.location;\n      assert(Number.isFinite(location));\n      return this.bind(function () {\n        switch (pname) {\n          case 34373:\n            return _this4.gl.getVertexAttribOffset(location, pname);\n\n          default:\n            return _this4.gl.getVertexAttrib(location, pname);\n        }\n      });\n    } // DEPRECATED\n\n    /*\n    setDivisor(location, divisor) {\n      location = Number(location);\n      this.bind(() => this.gl.vertexAttribDivisor(location, divisor));\n      return this;\n    }\n     // match assumed WebGL defaults\n    static resetConstants(gl) {\n      const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);\n      for (let i = 0; i < MAX_ATTRIBUTES; i++) {\n        VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);\n      }\n    }\n     // Resets all attributes (to default valued constants)\n    resetAttributes() {\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // But Chrome does not like buffers that are bound to several binding points.\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n       for (const location in this.values) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n       this.setElementBuffer(null);\n      return this;\n    }\n    */\n\n  }, {\n    key: \"MAX_ATTRIBUTES\",\n    get: function get() {\n      return VertexArrayObject.getMaxAttributes(this.gl);\n    }\n  }], [{\n    key: \"_setConstantFloatArray\",\n    value: function _setConstantFloatArray(gl, location, array) {\n      switch (array.length) {\n        case 1:\n          gl.vertexAttrib1fv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttrib2fv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttrib3fv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttrib4fv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantIntArray\",\n    value: function _setConstantIntArray(gl, location, array) {\n      assert(isWebGL2(gl));\n\n      switch (array.length) {\n        case 1:\n          gl.vertexAttribI1iv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttribI2iv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttribI3iv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttribI4iv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantUintArray\",\n    value: function _setConstantUintArray(gl, location, array) {\n      assert(isWebGL2(gl));\n\n      switch (array.length) {\n        case 1:\n          gl.vertexAttribI1uiv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttribI2uiv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttribI3uiv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttribI4uiv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }]);\n\n  return VertexArrayObject;\n}(Resource);\n\nexport { VertexArrayObject as default };","map":null,"metadata":{},"sourceType":"module"}