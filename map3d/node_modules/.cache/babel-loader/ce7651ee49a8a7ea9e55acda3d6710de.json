{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _RENDERBUFFER_FORMATS;\n/* eslint-disable no-inline-comments */\n\n\nimport { isWebGL2 } from '../webgl-utils';\nimport Resource from './resource';\nimport assert from '../utils/assert'; // Define local GL constants to optimize minification\n\nvar GL_RENDERBUFFER = 0x8D41;\nvar GL_SAMPLES = 0x80A9;\nvar GL_RENDERBUFFER_WIDTH = 0x8D42;\nvar GL_RENDERBUFFER_HEIGHT = 0x8D43;\nvar GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;\nvar GL_RENDERBUFFER_SAMPLES = 0x8CAB; // Define local extension strings to optimize minification\n// const SRGB = 'EXT_sRGB';\n// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';\n\nvar CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float'; // const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';\n\nexport var RENDERBUFFER_FORMATS = (_RENDERBUFFER_FORMATS = {}, _defineProperty(_RENDERBUFFER_FORMATS, 33189, {}), _defineProperty(_RENDERBUFFER_FORMATS, 33190, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36012, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36168, {}), _defineProperty(_RENDERBUFFER_FORMATS, 34041, {}), _defineProperty(_RENDERBUFFER_FORMATS, 35056, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36013, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 32854, {}), _defineProperty(_RENDERBUFFER_FORMATS, 36194, {}), _defineProperty(_RENDERBUFFER_FORMATS, 32855, {}), _defineProperty(_RENDERBUFFER_FORMATS, 33321, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33330, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33329, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33332, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33331, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33334, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33333, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33323, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33336, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33335, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33338, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33337, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33340, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33339, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 32849, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 32856, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 32857, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36220, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36238, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36975, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36214, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36232, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36226, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 36208, {\n  gl2: true\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33325, {\n  gl2: CB_FLOAT_WEBGL2\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33327, {\n  gl2: CB_FLOAT_WEBGL2\n}), _defineProperty(_RENDERBUFFER_FORMATS, 34842, {\n  gl2: CB_FLOAT_WEBGL2\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33326, {\n  gl2: CB_FLOAT_WEBGL2\n}), _defineProperty(_RENDERBUFFER_FORMATS, 33328, {\n  gl2: CB_FLOAT_WEBGL2\n}), _defineProperty(_RENDERBUFFER_FORMATS, 34836, {\n  gl2: CB_FLOAT_WEBGL2\n}), _defineProperty(_RENDERBUFFER_FORMATS, 35898, {\n  gl2: CB_FLOAT_WEBGL2\n}), _RENDERBUFFER_FORMATS);\n\nfunction isFormatSupported(gl, format, formats) {\n  var info = formats[format];\n\n  if (!info) {\n    return false;\n  }\n\n  var value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n\n  return value;\n}\n\nvar Renderbuffer =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(Renderbuffer, _Resource);\n\n  _createClass(Renderbuffer, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          format = _ref.format;\n\n      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n    }\n  }, {\n    key: \"getSamplesForFormat\",\n    value: function getSamplesForFormat(gl, _ref2) {\n      var format = _ref2.format; // Polyfilled to return [0] under WebGL1\n\n      return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);\n    }\n  }]);\n\n  function Renderbuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Renderbuffer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Renderbuffer).call(this, gl, opts));\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Creates and initializes a renderbuffer object's data store\n\n\n  _createClass(Renderbuffer, [{\n    key: \"initialize\",\n    value: function initialize(_ref3) {\n      var format = _ref3.format,\n          _ref3$width = _ref3.width,\n          width = _ref3$width === void 0 ? 1 : _ref3$width,\n          _ref3$height = _ref3.height,\n          height = _ref3$height === void 0 ? 1 : _ref3$height,\n          _ref3$samples = _ref3.samples,\n          samples = _ref3$samples === void 0 ? 0 : _ref3$samples;\n      assert(format, 'Needs format');\n      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n\n      if (samples !== 0 && isWebGL2(this.gl)) {\n        this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);\n      } else {\n        this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);\n      } // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n\n      this.format = format;\n      this.width = width;\n      this.height = height;\n      this.samples = samples;\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref4) {\n      var width = _ref4.width,\n          height = _ref4.height; // Don't resize if width/height haven't changed\n\n      if (width !== this.width || height !== this.height) {\n        return this.initialize({\n          width: width,\n          height: height,\n          format: this.format,\n          samples: this.samples\n        });\n      }\n\n      return this;\n    } // PRIVATE METHODS\n\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createRenderbuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteRenderbuffer(this.handle);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      this.gl.bindRenderbuffer(GL_RENDERBUFFER, handle);\n    }\n  }, {\n    key: \"_syncHandle\",\n    value: function _syncHandle(handle) {\n      this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);\n      this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);\n      this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);\n      this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);\n    } // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n    // @returns {GLenum|GLint} - depends on pname\n\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n      var value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname); // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n      return value;\n    }\n  }]);\n\n  return Renderbuffer;\n}(Resource);\n\nexport { Renderbuffer as default };","map":null,"metadata":{},"sourceType":"module"}