{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var descriptor, i = 0; i < props.length; i++) {\n      descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 'value' in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;\n  };\n}();\n\nObject.defineProperty(exports, '__esModule', {\n  value: !0\n});\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) throw new TypeError('Cannot call a class as a function');\n}\n\nfunction getStorage(type) {\n  try {\n    var storage = window[type],\n        x = '__storage_test__';\n    return storage.setItem(x, x), storage.removeItem(x), storage;\n  } catch (e) {\n    return null;\n  }\n}\n\nvar LocalStorage = function () {\n  function LocalStorage(id, defaultSettings) {\n    var type = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 'sessionStorage';\n    _classCallCheck(this, LocalStorage), this.storage = getStorage(type), this.id = id, this.config = {}, Object.assign(this.config, defaultSettings), this._loadConfiguration();\n  }\n\n  return _createClass(LocalStorage, [{\n    key: 'getConfiguration',\n    value: function getConfiguration() {\n      return this.config;\n    }\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      return this.config = {}, this.updateConfiguration(configuration);\n    }\n  }, {\n    key: 'updateConfiguration',\n    value: function updateConfiguration(configuration) {\n      if (Object.assign(this.config, configuration), this.storage) {\n        var serialized = JSON.stringify(this.config);\n        this.storage.setItem(this.id, serialized);\n      }\n\n      return this;\n    }\n  }, {\n    key: '_loadConfiguration',\n    value: function _loadConfiguration() {\n      var configuration = {};\n\n      if (this.storage) {\n        var serializedConfiguration = this.storage.getItem(this.id);\n        configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n      }\n\n      return Object.assign(this.config, configuration), this;\n    }\n  }]), LocalStorage;\n}();\n\nexports.default = LocalStorage;","map":null,"metadata":{},"sourceType":"script"}