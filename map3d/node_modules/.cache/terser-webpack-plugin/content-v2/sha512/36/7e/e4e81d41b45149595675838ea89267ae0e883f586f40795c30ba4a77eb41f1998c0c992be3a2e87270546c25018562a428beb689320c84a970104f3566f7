{"map":"{\"version\":3,\"sources\":[\"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/src/deckgl-overlay.js\",\"/Users/coenstange/Documents/GitSSH/funda-pricemap/map3d/src/index.js\"],\"names\":[\"LIGHT_SETTINGS\",\"lightsPosition\",\"ambientRatio\",\"diffuseRatio\",\"specularRatio\",\"lightsStrength\",\"numberOfLights\",\"DeckGLOverlay\",\"_this$props\",\"this\",\"props\",\"viewport\",\"data\",\"colorScale\",\"layer\",\"GeoJsonLayer\",\"id\",\"opacity\",\"stroked\",\"filled\",\"extruded\",\"wireframe\",\"fp64\",\"getElevation\",\"f\",\"Math\",\"floor\",\"random\",\"getFillColor\",\"getLineColor\",\"lightSettings\",\"pickable\",\"Boolean\",\"onHover\",\"react_default\",\"a\",\"createElement\",\"dist_esm\",\"Object\",\"assign\",\"layers\",\"initWebGLParameters\",\"latitude\",\"longitude\",\"zoom\",\"maxZoom\",\"pitch\",\"bearing\",\"Component\",\"DATA_URL\",\"r\",\"Root\",\"_this\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"objectSpread\",\"defaultViewport\",\"width\",\"height\",\"requestJson\",\"error\",\"response\",\"setState\",\"window\",\"addEventListener\",\"_resize\",\"bind\",\"_onViewportChange\",\"innerWidth\",\"innerHeight\",\"_this$state\",\"esm\",\"onViewportChange\",\"mapboxApiAccessToken\",\"deckgl_overlay_DeckGLOverlay\",\"render\",\"src_Root\",\"document\",\"getElementById\"],\"mappings\":\"4RAGMA,EAAiB,CACrBC,eAAgB,EAAE,IAAK,KAAM,KAAO,MAAO,KAAM,KACjDC,aAAc,GACdC,aAAc,GACdC,cAAe,GACfC,eAAgB,CAAC,EAAK,EAAK,EAAK,GAChCC,eAAgB,GAGGC,mLAaV,IAAAC,EACgCC,KAAKC,MAApCC,EADDH,EACCG,SAAUC,EADXJ,EACWI,KADXJ,EACiBK,WAExB,IAAKD,EACH,OAAO,KAGT,IAAME,EAAQ,IAAIC,EAAAA,EAAa,CAC7BC,GAAI,UACJJ,KAAAA,EACAK,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,MAAM,EACNC,aAAc,SAAAC,GAAC,OAAqC,GAAjCC,KAAKC,MAAsB,GAAhBD,KAAKE,WACnCC,aAAc,SAAAJ,GAAC,MAAI,CAAC,IAAK,EAAG,MAC5BK,aAAc,SAAAL,GAAC,MAAI,CAAC,IAAK,IAAK,MAC9BM,cAAe9B,EACf+B,SAAUC,QAAQvB,KAAKC,MAAMuB,SAC7BA,QAASxB,KAAKC,MAAMuB,UAGtB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAY5B,EAAZ,CAAsB6B,OAAQ,CAAC1B,GAAQ2B,qBAAmB,+CAnC5D,MAAO,CACLC,SAAU,WACVC,UAAW,UACXC,KAAM,EACNC,QAAS,GACTC,MAAO,GACPC,QAAS,UAT4BC,EAAAA,oBCArCC,EAAW,2BAEXpC,EAAa,SAAAqC,GAAC,MAAI,CAAK,IAAJA,EAAS,IAAK,KAAO,EAAIA,KAE5CC,cAEJ,SAAAA,EAAYzC,GAAO,IAAA0C,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAA7B,KAAA0C,IACjBC,EAAAd,OAAAgB,EAAA,EAAAhB,CAAA7B,KAAA6B,OAAAiB,EAAA,EAAAjB,CAAAa,GAAAK,KAAA/C,KAAMC,KACD+C,MAAQ,CACX9C,SAAS2B,OAAAoB,EAAA,EAAApB,CAAA,GACJ/B,EAAcoD,gBADX,CAENC,MAAO,IACPC,OAAQ,MAEVjD,KAAM,MAGRkD,OAAAA,EAAAA,EAAAA,CAAYb,EAAU,SAACc,EAAOC,GACvBD,GACHX,EAAKa,SAAS,CAAErD,KAAMoD,MAbTZ,mFAmBjBc,OAAOC,iBAAiB,SAAU1D,KAAK2D,QAAQC,KAAK5D,OACpDA,KAAK2D,4CAIL3D,KAAK6D,kBAAkB,CACrBV,MAAOM,OAAOK,WACdV,OAAQK,OAAOM,wDAID7D,GAChBF,KAAKwD,SAAS,CACZtD,SAAS2B,OAAAoB,EAAA,EAAApB,CAAA,GAAM7B,KAAKgD,MAAM9C,SAAaA,sCAIlC,IAAA8D,EACoBhE,KAAKgD,MAAxB9C,EADD8D,EACC9D,SAAUC,EADX6D,EACW7D,KAElB,OACEsB,EAAAC,EAAAC,cAACsC,EAAA,EAADpC,OAAAC,OAAA,GACM5B,EADN,CAEEgE,iBAAkBlE,KAAK6D,kBAAkBD,KAAK5D,MAC9CmE,qBApDa,8FAqDb1C,EAAAC,EAAAC,cAACyC,EAAD,CAAelE,SAAUA,EACvBC,KAAMA,EACNC,WAAYA,YAhDHmC,EAAAA,WAsDnB8B,OAAAA,EAAAA,OAAAA,CAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAAUC,SAASC,eAAe\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\\n\\nconst LIGHT_SETTINGS = {\\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\\n  ambientRatio: 0.2,\\n  diffuseRatio: 0.5,\\n  specularRatio: 0.3,\\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\\n  numberOfLights: 2\\n};\\n\\nexport default class DeckGLOverlay extends Component {\\n\\n  static get defaultViewport() {\\n    return {\\n      latitude: 52.2125708,\\n      longitude: 4.9636486,\\n      zoom: 8,\\n      maxZoom: 16,\\n      pitch: 45,\\n      bearing: 0\\n    };\\n  }\\n\\n  render() {\\n    const { viewport, data, colorScale } = this.props;\\n\\n    if (!data) {\\n      return null;\\n    }\\n\\n    const layer = new GeoJsonLayer({\\n      id: 'geojson',\\n      data,\\n      opacity: 0.8,\\n      stroked: false,\\n      filled: true,\\n      extruded: true,\\n      wireframe: true,\\n      fp64: true,\\n      getElevation: f => Math.floor(Math.random() * 20) * 20,//Math.sqrt(f.properties.valuePerSqm) * 10,\\n      getFillColor: f => [255, 0, 255],//colorScale(f.properties.growth),\\n      getLineColor: f => [255, 255, 255],\\n      lightSettings: LIGHT_SETTINGS,\\n      pickable: Boolean(this.props.onHover),\\n      onHover: this.props.onHover\\n    });\\n\\n    return (\\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\\n    );\\n  }\\n}\",\"/* global window,document */\\nimport React, { Component } from 'react';\\nimport { render } from 'react-dom';\\nimport MapGL from 'react-map-gl';\\nimport DeckGLOverlay from './deckgl-overlay.js';\\n\\nimport { json as requestJson } from 'd3-request';\\n\\n// Set your mapbox token here\\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\\n\\n// Source data GeoJSON\\nconst DATA_URL = 'map/postcodemap.wsg.json'; // eslint-disable-line\\n\\nconst colorScale = r => [r * 255, 140, 200 * (1 - r)];\\n\\nclass Root extends Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      viewport: {\\n        ...DeckGLOverlay.defaultViewport,\\n        width: 500,\\n        height: 500\\n      },\\n      data: null\\n    };\\n\\n    requestJson(DATA_URL, (error, response) => {\\n      if (!error) {\\n        this.setState({ data: response });\\n      }\\n    });\\n  }\\n\\n  componentDidMount() {\\n    window.addEventListener('resize', this._resize.bind(this));\\n    this._resize();\\n  }\\n\\n  _resize() {\\n    this._onViewportChange({\\n      width: window.innerWidth,\\n      height: window.innerHeight\\n    });\\n  }\\n\\n  _onViewportChange(viewport) {\\n    this.setState({\\n      viewport: { ...this.state.viewport, ...viewport }\\n    });\\n  }\\n\\n  render() {\\n    const { viewport, data } = this.state;\\n\\n    return (\\n      <MapGL\\n        {...viewport}\\n        onViewportChange={this._onViewportChange.bind(this)}\\n        mapboxApiAccessToken={MAPBOX_TOKEN}>\\n        <DeckGLOverlay viewport={viewport}\\n          data={data}\\n          colorScale={colorScale} />\\n      </MapGL>\\n    );\\n  }\\n}\\n\\nrender(<Root />, document.getElementById('root'));\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{136:function(t,e,n){t.exports=n(167)},150:function(t,e){},151:function(t,e){},152:function(t,e){},167:function(t,e,n){\"use strict\";n.r(e);var i=n(84),o=n(1),a=n(3),r=n(8),s=n(7),c=n(9),u=n(15),l=n.n(u),p=n(93),h=n(120),d=n(86),f={lightsPosition:[-125,50.5,5e3,-122.8,48.5,8e3],ambientRatio:.2,diffuseRatio:.5,specularRatio:.3,lightsStrength:[1,0,2,0],numberOfLights:2},w=function(t){function e(){return Object(o.a)(this,e),Object(r.a)(this,Object(s.a)(e).apply(this,arguments))}return Object(c.a)(e,t),Object(a.a)(e,[{key:\"render\",value:function(){var t=this.props,e=t.viewport,n=t.data;t.colorScale;if(!n)return null;var i=new d.a({id:\"geojson\",data:n,opacity:.8,stroked:!1,filled:!0,extruded:!0,wireframe:!0,fp64:!0,getElevation:function(t){return 20*Math.floor(20*Math.random())},getFillColor:function(t){return[255,0,255]},getLineColor:function(t){return[255,255,255]},lightSettings:f,pickable:Boolean(this.props.onHover),onHover:this.props.onHover});return l.a.createElement(d.b,Object.assign({},e,{layers:[i],initWebGLParameters:!0}))}}],[{key:\"defaultViewport\",get:function(){return{latitude:52.2125708,longitude:4.9636486,zoom:8,maxZoom:16,pitch:45,bearing:0}}}]),e}(u.Component),b=n(121),g=\"map/postcodemap.wsg.json\",j=function(t){return[255*t,140,200*(1-t)]},m=function(t){function e(t){var n;return Object(o.a)(this,e),(n=Object(r.a)(this,Object(s.a)(e).call(this,t))).state={viewport:Object(i.a)({},w.defaultViewport,{width:500,height:500}),data:null},Object(b.a)(g,function(t,e){t||n.setState({data:e})}),n}return Object(c.a)(e,t),Object(a.a)(e,[{key:\"componentDidMount\",value:function(){window.addEventListener(\"resize\",this._resize.bind(this)),this._resize()}},{key:\"_resize\",value:function(){this._onViewportChange({width:window.innerWidth,height:window.innerHeight})}},{key:\"_onViewportChange\",value:function(t){this.setState({viewport:Object(i.a)({},this.state.viewport,t)})}},{key:\"render\",value:function(){var t=this.state,e=t.viewport,n=t.data;return l.a.createElement(h.a,Object.assign({},e,{onViewportChange:this._onViewportChange.bind(this),mapboxApiAccessToken:\"pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w\"}),l.a.createElement(w,{viewport:e,data:n,colorScale:j}))}}]),e}(u.Component);Object(p.render)(l.a.createElement(m,null),document.getElementById(\"root\"))}},[[136,2,1]]]);","extractedComments":[]}