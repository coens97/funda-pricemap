{"version":3,"sources":["deckgl-overlay.js","index.js"],"names":["LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","DeckGLOverlay","_this$props","this","props","viewport","postmap","statistics","postcodes","filteredPostmap","Object","objectSpread","features","filter","f","properties","POSTCODE","calcDepth","defaultValue","scale","postcode","r","minprice","layer","GeoJsonLayer","id","data","opacity","stroked","filled","extruded","wireframe","fp64","getElevation","getFillColor","getLineColor","lightSettings","pickable","Boolean","onHover","react_default","a","createElement","dist_esm","assign","layers","initWebGLParameters","latitude","longitude","zoom","maxZoom","pitch","bearing","Component","library","add","fab","DATA_URL","OVERVIEW_URL","Root","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_onDateChanged","newDate","setState","selectedDate","loadStatisticsFile","value","state","selectedOtherStatistics","_onOtherChanged","newStatistics","defaultViewport","width","height","overview","loading","overviewLoaded","label","Promise","all","fetch","then","response","map","x","json","jsonData","datesList","dates","reverse","loadingDate","catch","ex","console","warn","toast","error","filename","_this2","concat","window","addEventListener","_resize","bind","_onViewportChange","innerWidth","innerHeight","_this$state","lib","className","react_spinners","sizeUnit","size","margin","color","BurgerMenu","react_select_esm","onChange","options","target","href","index_es","icon","esm","mapStyle","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","render","src_Root","document","getElementById"],"mappings":"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","file":"static/js/main.de1cdac5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nexport default class DeckGLOverlay extends Component {\n\n  static get defaultViewport() {\n    return {\n      latitude: 52.2125708,\n      longitude: 4.9636486,\n      zoom: 7,\n      maxZoom: 16,\n      pitch: 5,\n      bearing: 0\n    };\n  }\n\n  render() {\n    const { viewport, postmap, statistics } = this.props;\n\n    if (!postmap || !statistics || !(statistics.postcodes)) {\n      return null;\n    }\n\n    const filteredPostmap = {\n      ...postmap,\n      features: postmap.features.filter(f => {\n        const postcode = f.properties.POSTCODE;\n        return postcode in statistics.postcodes\n      })\n    }\n\n    const calcDepth = (f, defaultValue, scale) => {\n      const priceMax = 3750;\n      const postcode = f.properties.POSTCODE;\n      if (postcode in statistics.postcodes) {\n        const data = statistics.postcodes[postcode];\n\n        return ((data.r - statistics.minprice) / (priceMax - statistics.minprice)) * scale;\n      }\n      else {\n        return defaultValue;\n      }\n    };\n\n    const colorScale = r => [r * 255, 140, 200 * (1 - r)];\n\n    const layer = new GeoJsonLayer({\n      id: 'geojson',\n      data: filteredPostmap,\n      opacity: 0.3,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      fp64: true,\n      getElevation: f => calcDepth(f, 0, 5000),\n      getFillColor: f => colorScale(calcDepth(f, 0, 1)),\n      getLineColor: f => [255, 255, 255],\n      lightSettings: LIGHT_SETTINGS,\n      pickable: Boolean(this.props.onHover),\n      onHover: this.props.onHover\n    });\n\n    return (\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\n    );\n  }\n}","/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { BounceLoader } from 'react-spinners';\nimport { slide as Menu } from 'react-burger-menu'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport Select from 'react-select';\n\nlibrary.add(fab);\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL = 'map/postcodemap.wsg.json'; // eslint-disable-line\nconst OVERVIEW_URL = 'generated/overview.json'\n\nclass Root extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        ...DeckGLOverlay.defaultViewport,\n        width: 500,\n        height: 500,\n      },\n      data: null,\n      statistics: null,\n      overview: null,\n      loading: true,\n      overviewLoaded: false,\n      selectedDate: null,\n      selectedOtherStatistics: { value: \"\", label: \"All\" }\n    };\n\n    Promise.all([fetch(DATA_URL), fetch(OVERVIEW_URL)])\n      .then(response =>\n        Promise.all(response.map(x => x.json()))\n      )\n      .then(jsonData => {\n        const datesList = jsonData[1]\n          .dates\n          .reverse()\n          .map(x => ({ value: x, label: x }));\n        const loadingDate = datesList[0];\n        this.setState(\n          {\n            data: jsonData[0],\n            overview: datesList,\n            overviewLoaded: true,\n            selectedDate: loadingDate\n          });\n\n        this.loadStatisticsFile(loadingDate.value);\n      }).catch(ex => {\n        console.warn(ex);\n        toast.error(\"Could not load the map data\");\n      });\n\n  }\n\n  loadStatisticsFile(filename) {\n    fetch(`generated/${filename}.json`)\n      .then(response =>\n        response.json()\n      )\n      .then(jsonData => {\n        this.setState(\n          {\n            statistics: jsonData,\n            loading: false,\n          });\n      }).catch(ex => {\n        console.warn(ex);\n        toast.error(\"Could not load the statistics data\");\n      });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize.bind(this));\n    this._resize();\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  _onDateChanged = (newDate) => {\n    this.setState(\n      {\n        selectedDate: newDate\n      });\n\n    this.loadStatisticsFile(newDate.value + this.state.selectedOtherStatistics.value);\n  };\n\n  _onOtherChanged = (newStatistics) => {\n    this.setState(\n      {\n        selectedOtherStatistics: newStatistics\n      });\n\n    this.loadStatisticsFile(this.state.selectedDate.value + newStatistics.value);\n  };\n\n  render() {\n    const { viewport, data, statistics } = this.state;\n    const extraStatistics = [\n      { value: \"\", label: \"All\" },\n      { value: \".slaap.1\", label: \"1 bedroom\" },\n      { value: \".slaap.2\", label: \"2 bedrooms\" },\n      { value: \".slaap.3\", label: \"3 bedrooms\" },\n      { value: \".slaap.4\", label: \"4 bedrooms\" },\n      { value: \".slaap.5\", label: \"5 bedrooms\" },\n      { value: \".slaap.6\", label: \"6 bedrooms\" },\n      { value: \".year.0\", label: \" 0 - 5 years old\" },\n      { value: \".year.5\", label: \" 5 - 10 years old\" },\n      { value: \".year.10\", label: \"10 - 20 years old\" },\n      { value: \".year.20\", label: \"20 - 40 years old\" },\n      { value: \".year.40\", label: \">40 years old\" }\n    ];\n    // Css style of loader\n    return (\n      <div>\n        <ToastContainer />\n        { // Render loading screen if applicable\n          this.state.loading &&\n          <div className=\"loaderBox\">\n            <div className=\"loaderContainer\">\n              <BounceLoader\n                sizeUnit={\"px\"}\n                size={150}\n                margin={\"0 auto\"}\n                color={'#43c92c'}\n                loading={true}\n              />\n            </div>\n            <h3>Loading rescources...</h3>\n          </div>\n        }\n        {\n          // Render menu-bar if overview is loaded\n          this.state.overviewLoaded &&\n          <Menu>\n            <h1 className=\"header\">Price per &#13217;</h1>\n            <hr></hr>\n            <h3 className=\"select-header\">Date</h3>\n            <Select\n              className=\"menu-select\"\n              value={this.state.selectedDate}\n              onChange={this._onDateChanged}\n              options={this.state.overview}\n            />\n            <h3 className=\"select-header\">Other statistics</h3>\n            <Select\n              className=\"menu-select\"\n              value={this.state.selectedOtherStatistics}\n              onChange={this._onOtherChanged}\n              options={extraStatistics}\n            />\n            <div className=\"sociallinks\">\n              <a className=\"icon-link\" target=\"_blank\" href=\"https://github.com/coens97/funda-pricemap\">\n                <FontAwesomeIcon icon={['fab', 'github']} size=\"3x\" />\n              </a>\n              <a className=\"icon-link\" target=\"_blank\" href=\"https://www.linkedin.com/in/coen-stange/\">\n                <FontAwesomeIcon className=\"font-icon\" icon={['fab', 'linkedin']} size=\"3x\" />\n              </a>\n            </div>\n          </Menu>\n        }\n        <MapGL\n          {...viewport}\n          mapStyle='mapbox://styles/mapbox/streets-v10'\n          onViewportChange={this._onViewportChange.bind(this)}\n          mapboxApiAccessToken={MAPBOX_TOKEN}>\n          <DeckGLOverlay viewport={viewport}\n            postmap={data}\n            statistics={statistics} />\n        </MapGL>\n      </div>\n    );\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}