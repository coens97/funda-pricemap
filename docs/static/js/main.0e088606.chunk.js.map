{"version":3,"sources":["deckgl-overlay.js","index.js"],"names":["LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","DeckGLOverlay","_this$props","this","props","viewport","postmap","statistics","filteredPostmap","Object","objectSpread","features","filter","f","properties","POSTCODE","postcodes","calcDepth","defaultValue","scale","postcode","r","minprice","layer","GeoJsonLayer","id","data","opacity","stroked","filled","extruded","wireframe","fp64","getElevation","getFillColor","getLineColor","lightSettings","pickable","Boolean","onHover","react_default","a","createElement","dist_esm","assign","layers","initWebGLParameters","latitude","longitude","zoom","maxZoom","pitch","bearing","Component","DATA_URL","Root","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","defaultViewport","width","height","loading","Promise","all","fetch","then","response","map","x","json","jsonData","setState","catch","ex","console","warn","toast","error","window","addEventListener","_resize","bind","_onViewportChange","innerWidth","innerHeight","_this$state","lib","className","react_spinners","sizeUnit","size","margin","color","esm","mapStyle","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","render","src_Root","document","getElementById"],"mappings":"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","file":"static/js/main.0e088606.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nexport default class DeckGLOverlay extends Component {\n\n  static get defaultViewport() {\n    return {\n      latitude: 52.2125708,\n      longitude: 4.9636486,\n      zoom: 7,\n      maxZoom: 16,\n      pitch: 5,\n      bearing: 0\n    };\n  }\n\n  render() {\n    const { viewport, postmap, statistics } = this.props;\n\n    if (!postmap) {\n      return null;\n    }\n\n    const filteredPostmap = {\n      ...postmap,\n      features: postmap.features.filter(f => {\n        const postcode = f.properties.POSTCODE;\n        return postcode in statistics.postcodes\n      })\n    }\n\n    const calcDepth = (f, defaultValue, scale) => {\n      const priceMax = 3750;\n      const postcode = f.properties.POSTCODE;\n      if (postcode in statistics.postcodes) {\n        const data = statistics.postcodes[postcode];\n\n        return ((data.r - statistics.minprice) / (priceMax - statistics.minprice)) * scale;\n      }\n      else {\n        return defaultValue;\n      }\n    };\n\n    const colorScale = r => [r * 255, 140, 200 * (1 - r)];\n\n    const layer = new GeoJsonLayer({\n      id: 'geojson',\n      data: filteredPostmap,\n      opacity: 0.3,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      fp64: true,\n      getElevation: f => calcDepth(f, 0, 5000),\n      getFillColor: f => colorScale(calcDepth(f, 0, 1)),\n      getLineColor: f => [255, 255, 255],\n      lightSettings: LIGHT_SETTINGS,\n      pickable: Boolean(this.props.onHover),\n      onHover: this.props.onHover\n    });\n\n    return (\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\n    );\n  }\n}","/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { BounceLoader } from 'react-spinners';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL = 'map/postcodemap.wsg.json'; // eslint-disable-line\n\nclass Root extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        ...DeckGLOverlay.defaultViewport,\n        width: 500,\n        height: 500,\n      },\n      data: null,\n      statistics: null,\n      loading: true\n    };\n\n    Promise.all([fetch(DATA_URL), fetch('generated/2018-10-25.slaap.4.json')])\n      .then(response =>\n        Promise.all(response.map(x => x.json()))\n      )\n      .then(jsonData => {\n        this.setState(\n          {\n            data: jsonData[0],\n            statistics: jsonData[1],\n            loading: false\n          });\n      }).catch(ex => {\n        console.warn(ex);\n        toast.error(\"Could not load the map data\");\n      });\n\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize.bind(this));\n    this._resize();\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  render() {\n    const { viewport, data, statistics } = this.state;\n    // Css style of loader\n    return (\n      <div>\n        <ToastContainer />\n        { // Render loading screen if applicable\n          this.state.loading &&\n          <div className=\"loaderBox\">\n            <div className=\"loaderContainer\">\n              <BounceLoader\n                sizeUnit={\"px\"}\n                size={150}\n                margin={\"0 auto\"}\n                color={'#43c92c'}\n                loading={true}\n              />\n            </div>\n            <h3>Loading rescources...</h3>\n          </div>\n        }\n        <MapGL\n          {...viewport}\n          mapStyle='mapbox://styles/mapbox/streets-v10'\n          onViewportChange={this._onViewportChange.bind(this)}\n          mapboxApiAccessToken={MAPBOX_TOKEN}>\n          <DeckGLOverlay viewport={viewport}\n            postmap={data}\n            statistics={statistics} />\n        </MapGL>\n      </div>\n    );\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}