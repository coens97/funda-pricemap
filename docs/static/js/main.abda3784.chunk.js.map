{"version":3,"sources":["deckgl-overlay.js","index.js"],"names":["LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","DeckGLOverlay","_this$props","this","props","viewport","postmap","statistics","filteredPostmap","Object","objectSpread","features","filter","f","properties","POSTCODE","postcodes","calcDepth","defaultValue","scale","postcode","r","minprice","layer","GeoJsonLayer","id","data","opacity","stroked","filled","extruded","wireframe","fp64","getElevation","getFillColor","getLineColor","lightSettings","pickable","Boolean","onHover","react_default","a","createElement","dist_esm","assign","layers","initWebGLParameters","latitude","longitude","zoom","maxZoom","pitch","bearing","Component","library","add","fab","DATA_URL","OVERVIEW_URL","Root","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_onDateChanged","newDate","setState","selectedDate","loadStatisticsFile","value","state","defaultViewport","width","height","overview","loading","overviewLoaded","Promise","all","fetch","then","response","map","x","json","jsonData","datesList","dates","reverse","label","loadingDate","catch","ex","console","warn","toast","error","filename","_this2","concat","window","addEventListener","_resize","bind","_onViewportChange","innerWidth","innerHeight","_this$state","lib","className","react_spinners","sizeUnit","size","margin","color","BurgerMenu","react_select_esm","onChange","options","target","href","index_es","icon","esm","mapStyle","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","render","src_Root","document","getElementById"],"mappings":"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","file":"static/js/main.abda3784.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nexport default class DeckGLOverlay extends Component {\n\n  static get defaultViewport() {\n    return {\n      latitude: 52.2125708,\n      longitude: 4.9636486,\n      zoom: 7,\n      maxZoom: 16,\n      pitch: 5,\n      bearing: 0\n    };\n  }\n\n  render() {\n    const { viewport, postmap, statistics } = this.props;\n\n    if (!postmap || !statistics) {\n      return null;\n    }\n\n    const filteredPostmap = {\n      ...postmap,\n      features: postmap.features.filter(f => {\n        const postcode = f.properties.POSTCODE;\n        return postcode in statistics.postcodes\n      })\n    }\n\n    const calcDepth = (f, defaultValue, scale) => {\n      const priceMax = 3750;\n      const postcode = f.properties.POSTCODE;\n      if (postcode in statistics.postcodes) {\n        const data = statistics.postcodes[postcode];\n\n        return ((data.r - statistics.minprice) / (priceMax - statistics.minprice)) * scale;\n      }\n      else {\n        return defaultValue;\n      }\n    };\n\n    const colorScale = r => [r * 255, 140, 200 * (1 - r)];\n\n    const layer = new GeoJsonLayer({\n      id: 'geojson',\n      data: filteredPostmap,\n      opacity: 0.3,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      fp64: true,\n      getElevation: f => calcDepth(f, 0, 5000),\n      getFillColor: f => colorScale(calcDepth(f, 0, 1)),\n      getLineColor: f => [255, 255, 255],\n      lightSettings: LIGHT_SETTINGS,\n      pickable: Boolean(this.props.onHover),\n      onHover: this.props.onHover\n    });\n\n    return (\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\n    );\n  }\n}","/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { BounceLoader } from 'react-spinners';\nimport { slide as Menu } from 'react-burger-menu'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport Select from 'react-select';\n\nlibrary.add(fab);\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL = 'map/postcodemap.wsg.json'; // eslint-disable-line\nconst OVERVIEW_URL = 'generated/overview.json'\n\nclass Root extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        ...DeckGLOverlay.defaultViewport,\n        width: 500,\n        height: 500,\n      },\n      data: null,\n      statistics: null,\n      overview: null,\n      loading: true,\n      overviewLoaded: false,\n      selectedDate: null\n    };\n\n    Promise.all([fetch(DATA_URL), fetch(OVERVIEW_URL)])\n      .then(response =>\n        Promise.all(response.map(x => x.json()))\n      )\n      .then(jsonData => {\n        const datesList = jsonData[1]\n          .dates\n          .reverse()\n          .map(x => ({ value: x, label: x }));\n        const loadingDate = datesList[0];\n        this.setState(\n          {\n            data: jsonData[0],\n            overview: datesList,\n            overviewLoaded: true,\n            selectedDate: loadingDate\n          });\n\n        this.loadStatisticsFile(loadingDate.value);\n      }).catch(ex => {\n        console.warn(ex);\n        toast.error(\"Could not load the map data\");\n      });\n\n  }\n\n  loadStatisticsFile(filename) {\n    fetch(`generated/${filename}.json`)\n      .then(response =>\n        response.json()\n      )\n      .then(jsonData => {\n        this.setState(\n          {\n            statistics: jsonData,\n            loading: false,\n          });\n      }).catch(ex => {\n        console.warn(ex);\n        toast.error(\"Could not load the statistics data\");\n      });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize.bind(this));\n    this._resize();\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  _onDateChanged = (newDate) => {\n    this.setState(\n      {\n        selectedDate: newDate\n      });\n\n    this.loadStatisticsFile(newDate.value);\n  };\n\n  render() {\n    const { viewport, data, statistics } = this.state;\n    // Css style of loader\n    return (\n      <div>\n        <ToastContainer />\n        { // Render loading screen if applicable\n          this.state.loading &&\n          <div className=\"loaderBox\">\n            <div className=\"loaderContainer\">\n              <BounceLoader\n                sizeUnit={\"px\"}\n                size={150}\n                margin={\"0 auto\"}\n                color={'#43c92c'}\n                loading={true}\n              />\n            </div>\n            <h3>Loading rescources...</h3>\n          </div>\n        }\n        {\n          // Render menu-bar if overview is loaded\n          this.state.overviewLoaded &&\n          <Menu>\n            <h1 className=\"header\">Price per &#13217;</h1>\n            <hr></hr>\n            <h3 className=\"select-header\">Date</h3>\n            <Select\n              className=\"menu-select\"\n              value={this.state.selectedDate}\n              onChange={this._onDateChanged}\n              options={this.state.overview}\n            />\n            <div className=\"sociallinks\">\n              <a className=\"icon-link\" target=\"_blank\" href=\"https://github.com/coens97/funda-pricemap\">\n                <FontAwesomeIcon icon={['fab', 'github']} size=\"3x\" />\n              </a>\n              <a className=\"icon-link\" target=\"_blank\" href=\"https://www.linkedin.com/in/coen-stange/\">\n                <FontAwesomeIcon className=\"font-icon\" icon={['fab', 'linkedin']} size=\"3x\" />\n              </a>\n            </div>\n          </Menu>\n        }\n        <MapGL\n          {...viewport}\n          mapStyle='mapbox://styles/mapbox/streets-v10'\n          onViewportChange={this._onViewportChange.bind(this)}\n          mapboxApiAccessToken={MAPBOX_TOKEN}>\n          <DeckGLOverlay viewport={viewport}\n            postmap={data}\n            statistics={statistics} />\n        </MapGL>\n      </div>\n    );\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}