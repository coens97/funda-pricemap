{"version":3,"sources":["deckgl-overlay.js","index.js"],"names":["LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","DeckGLOverlay","_this$props","this","props","viewport","postmap","statistics","filteredPostmap","Object","objectSpread","features","filter","f","postcode","properties","POSTCODE","postcodes","c","calcDepth","defaultValue","scale","data","r","minprice","layer","GeoJsonLayer","id","opacity","stroked","filled","extruded","wireframe","fp64","getElevation","getFillColor","getLineColor","lightSettings","pickable","Boolean","onHover","react_default","a","createElement","dist_esm","assign","layers","initWebGLParameters","latitude","longitude","zoom","maxZoom","pitch","bearing","Component","DATA_URL","Root","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","defaultViewport","width","height","Promise","all","fetch","then","response","map","x","json","jsonData","setState","catch","ex","console","warn","toast","error","window","addEventListener","_resize","bind","_onViewportChange","innerWidth","innerHeight","_this$state","lib","esm","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","render","src_Root","document","getElementById"],"mappings":"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","file":"static/js/main.fd495fdc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nexport default class DeckGLOverlay extends Component {\n\n  static get defaultViewport() {\n    return {\n      latitude: 52.2125708,\n      longitude: 4.9636486,\n      zoom: 7,\n      maxZoom: 16,\n      pitch: 5,\n      bearing: 0\n    };\n  }\n\n  render() {\n    const { viewport, postmap, statistics } = this.props;\n\n    if (!postmap) {\n      return null;\n    }\n\n    const filteredPostmap = {\n      ...postmap,\n      features: postmap.features.filter(f => {\n        const postcode = f.properties.POSTCODE;\n        if (postcode in statistics.postcodes) {\n          const data = statistics.postcodes[postcode];\n          return data.c >= 3;\n        }\n        return false;\n      })\n    }\n\n    const calcDepth = (f, defaultValue, scale) => {\n      const priceMax = 3500;\n      const postcode = f.properties.POSTCODE;\n      if (postcode in statistics.postcodes) {\n        const data = statistics.postcodes[postcode];\n        if (data.r > priceMax) {\n          return scale;\n        }\n        if (data.c < 3) {\n          return defaultValue;\n        }\n        return ((data.r - statistics.minprice) / (priceMax - statistics.minprice)) * scale;\n      }\n      else {\n        return defaultValue;\n      }\n    };\n\n    const colorScale = r => [r * 255, 140, 200 * (1 - r)];\n\n    const layer = new GeoJsonLayer({\n      id: 'geojson',\n      data: filteredPostmap,\n      opacity: 0.3,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      fp64: true,\n      getElevation: f => calcDepth(f, 0, 5000),\n      getFillColor: f => colorScale(calcDepth(f, 0, 1)),\n      getLineColor: f => [255, 255, 255],\n      lightSettings: LIGHT_SETTINGS,\n      pickable: Boolean(this.props.onHover),\n      onHover: this.props.onHover\n    });\n\n    return (\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\n    );\n  }\n}","/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL = 'map/postcodemap.wsg.json'; // eslint-disable-line\n\nclass Root extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        ...DeckGLOverlay.defaultViewport,\n        width: 500,\n        height: 500\n      },\n      data: null,\n      statistics: null\n    };\n\n    Promise.all([fetch(DATA_URL), fetch('generated/2018-10-22.json')])\n      .then(response =>\n        Promise.all(response.map(x => x.json()))\n      )\n      .then(jsonData => {\n        this.setState(\n          {\n            data: jsonData[0],\n            statistics: jsonData[1]\n          });\n      }).catch(ex => {\n        console.warn(ex);\n        toast.error(\"Could not load the map data\");\n      });\n\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize.bind(this));\n    this._resize();\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  render() {\n    const { viewport, data, statistics } = this.state;\n\n    return (\n      <div>\n        <ToastContainer />\n        <MapGL\n          {...viewport}\n          onViewportChange={this._onViewportChange.bind(this)}\n          mapboxApiAccessToken={MAPBOX_TOKEN}>\n          <DeckGLOverlay viewport={viewport}\n            postmap={data}\n            statistics={statistics} />\n        </MapGL>\n      </div>\n    );\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}