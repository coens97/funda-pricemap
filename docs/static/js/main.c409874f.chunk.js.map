{"version":3,"sources":["deckgl-overlay.js","index.js"],"names":["LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","DeckGLOverlay","_this$props","this","props","viewport","data","colorScale","layer","GeoJsonLayer","id","opacity","stroked","filled","extruded","wireframe","fp64","getElevation","f","Math","floor","random","getFillColor","getLineColor","lightSettings","pickable","Boolean","onHover","react_default","a","createElement","dist_esm","Object","assign","layers","initWebGLParameters","latitude","longitude","zoom","maxZoom","pitch","bearing","Component","DATA_URL","r","Root","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","defaultViewport","width","height","requestJson","error","response","setState","window","addEventListener","_resize","bind","_onViewportChange","innerWidth","innerHeight","_this$state","esm","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","render","src_Root","document","getElementById"],"mappings":"4RAGMA,EAAiB,CACrBC,eAAgB,EAAE,IAAK,KAAM,KAAO,MAAO,KAAM,KACjDC,aAAc,GACdC,aAAc,GACdC,cAAe,GACfC,eAAgB,CAAC,EAAK,EAAK,EAAK,GAChCC,eAAgB,GAGGC,mLAaV,IAAAC,EACgCC,KAAKC,MAApCC,EADDH,EACCG,SAAUC,EADXJ,EACWI,KADXJ,EACiBK,WAExB,IAAKD,EACH,OAAO,KAGT,IAAME,EAAQ,IAAIC,IAAa,CAC7BC,GAAI,UACJJ,OACAK,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,MAAM,EACNC,aAAc,SAAAC,GAAC,OAAqC,GAAjCC,KAAKC,MAAsB,GAAhBD,KAAKE,WACnCC,aAAc,SAAAJ,GAAC,MAAI,CAAC,IAAK,EAAG,MAC5BK,aAAc,SAAAL,GAAC,MAAI,CAAC,IAAK,IAAK,MAC9BM,cAAe9B,EACf+B,SAAUC,QAAQvB,KAAKC,MAAMuB,SAC7BA,QAASxB,KAAKC,MAAMuB,UAGtB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAY5B,EAAZ,CAAsB6B,OAAQ,CAAC1B,GAAQ2B,qBAAmB,+CAnC5D,MAAO,CACLC,SAAU,WACVC,UAAW,UACXC,KAAM,EACNC,QAAS,GACTC,MAAO,GACPC,QAAS,UAT4BC,sBCArCC,EAAW,2BAEXpC,EAAa,SAAAqC,GAAC,MAAI,CAAK,IAAJA,EAAS,IAAK,KAAO,EAAIA,KAE5CC,cAEJ,SAAAA,EAAYzC,GAAO,IAAA0C,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAA7B,KAAA0C,IACjBC,EAAAd,OAAAgB,EAAA,EAAAhB,CAAA7B,KAAA6B,OAAAiB,EAAA,EAAAjB,CAAAa,GAAAK,KAAA/C,KAAMC,KACD+C,MAAQ,CACX9C,SAAS2B,OAAAoB,EAAA,EAAApB,CAAA,GACJ/B,EAAcoD,gBADX,CAENC,MAAO,IACPC,OAAQ,MAEVjD,KAAM,MAGRkD,YAAYb,EAAU,SAACc,EAAOC,GACvBD,GACHX,EAAKa,SAAS,CAAErD,KAAMoD,MAbTZ,mFAmBjBc,OAAOC,iBAAiB,SAAU1D,KAAK2D,QAAQC,KAAK5D,OACpDA,KAAK2D,4CAIL3D,KAAK6D,kBAAkB,CACrBV,MAAOM,OAAOK,WACdV,OAAQK,OAAOM,wDAID7D,GAChBF,KAAKwD,SAAS,CACZtD,SAAS2B,OAAAoB,EAAA,EAAApB,CAAA,GAAM7B,KAAKgD,MAAM9C,SAAaA,sCAIlC,IAAA8D,EACoBhE,KAAKgD,MAAxB9C,EADD8D,EACC9D,SAAUC,EADX6D,EACW7D,KAElB,OACEsB,EAAAC,EAAAC,cAACsC,EAAA,EAADpC,OAAAC,OAAA,GACM5B,EADN,CAEEgE,iBAAkBlE,KAAK6D,kBAAkBD,KAAK5D,MAC9CmE,qBApDa,8FAqDb1C,EAAAC,EAAAC,cAACyC,EAAD,CAAelE,SAAUA,EACvBC,KAAMA,EACNC,WAAYA,YAhDHmC,aAsDnB8B,iBAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAAUC,SAASC,eAAe","file":"static/js/main.c409874f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DeckGL, { GeoJsonLayer } from 'deck.gl';\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-125, 50.5, 5000, -122.8, 48.5, 8000],\n  ambientRatio: 0.2,\n  diffuseRatio: 0.5,\n  specularRatio: 0.3,\n  lightsStrength: [1.0, 0.0, 2.0, 0.0],\n  numberOfLights: 2\n};\n\nexport default class DeckGLOverlay extends Component {\n\n  static get defaultViewport() {\n    return {\n      latitude: 52.2125708,\n      longitude: 4.9636486,\n      zoom: 8,\n      maxZoom: 16,\n      pitch: 45,\n      bearing: 0\n    };\n  }\n\n  render() {\n    const { viewport, data, colorScale } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const layer = new GeoJsonLayer({\n      id: 'geojson',\n      data,\n      opacity: 0.8,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      fp64: true,\n      getElevation: f => Math.floor(Math.random() * 20) * 20,//Math.sqrt(f.properties.valuePerSqm) * 10,\n      getFillColor: f => [255, 0, 255],//colorScale(f.properties.growth),\n      getLineColor: f => [255, 255, 255],\n      lightSettings: LIGHT_SETTINGS,\n      pickable: Boolean(this.props.onHover),\n      onHover: this.props.onHover\n    });\n\n    return (\n      <DeckGL {...viewport} layers={[layer]} initWebGLParameters />\n    );\n  }\n}","/* global window,document */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay.js';\n\nimport { json as requestJson } from 'd3-request';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY29lbnM5NyIsImEiOiJjam5objg4YWQwNWVlM3B0ZHd0NGV2aDdpIn0.0Jg6jNjAROAafiP9QB_i6w'; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL = 'map/postcodemap.wsg.json'; // eslint-disable-line\n\nconst colorScale = r => [r * 255, 140, 200 * (1 - r)];\n\nclass Root extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        ...DeckGLOverlay.defaultViewport,\n        width: 500,\n        height: 500\n      },\n      data: null\n    };\n\n    requestJson(DATA_URL, (error, response) => {\n      if (!error) {\n        this.setState({ data: response });\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize.bind(this));\n    this._resize();\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  render() {\n    const { viewport, data } = this.state;\n\n    return (\n      <MapGL\n        {...viewport}\n        onViewportChange={this._onViewportChange.bind(this)}\n        mapboxApiAccessToken={MAPBOX_TOKEN}>\n        <DeckGLOverlay viewport={viewport}\n          data={data}\n          colorScale={colorScale} />\n      </MapGL>\n    );\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}